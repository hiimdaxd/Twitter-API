{
  // Specifies the style of the gravatar default (fallback) images
  //  - identicon: A geometric pattern
  //  - mp: A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)
  //  - monsterid: A monster with different colors, faces, etc
  //  - retro: 8-bit arcade-style pixelated faces
  //  - robohash: A robot with different colors, faces, etc
  //  - wavatar: A face with differing features and backgrounds
  "gitlens.defaultGravatarsStyle": "robohash",

  // Deprecated. Use the pre-release of GitLens instead
  //
  "gitlens.insiders": null,

  // Specifies how much (if any) output will be sent to the GitLens output channel
  //  - off: Logs nothing
  //  - error: Logs only errors
  //  - warn: Logs errors and warnings
  //  - info: Logs errors, warnings, and messages
  //  - debug: Logs verbose errors, warnings, and messages. Best for issue reporting.
  "gitlens.outputLevel": "warn",

  // Specifies whether to hide or show features that require a trial or paid plan and are not accessible given the opened repositories and current trial or plan
  "gitlens.plusFeatures.enabled": true,

  // Specifies the proxy configuration to use. If not specified, the proxy configuration will be determined based on VS Code or OS settings
  "gitlens.proxy": null,

  // Specifies whether to show the Welcome experience on first install
  "gitlens.showWelcomeOnInstall": true,

  // Specifies whether to show the What's New notification after upgrading to new feature releases
  "gitlens.showWhatsNewAfterUpgrades": true,

  // Specifies whether to enable virtual repositories support
  "gitlens.virtualRepositories.enabled": true,

  // If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the `telemetry.telemetryLevel` setting.
  // Enable crash reports to be collected. This helps us improve stability.
  // This option requires restart to take effect.
  "telemetry.enableCrashReporter": true,

  // If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated in favor of the `telemetry.telemetryLevel` setting.
  // Enable diagnostic data to be collected. This helps us to better understand how Visual Studio Code is performing and where improvements need to be made. [Read more](https://go.microsoft.com/fwlink/?LinkId=521839) about what we collect and our privacy statement.
  "telemetry.enableTelemetry": true,

  //
  // Controls Visual Studio Code telemetry, first-party extension telemetry, and participating third-party extension telemetry. Some third party extensions might not respect this setting. Consult the specific extension's documentation to be sure. Telemetry helps us better understand how Visual Studio Code is performing, where improvements need to be made, and how features are being used. Read more about the [data we collect](https://aka.ms/vscode-telemetry) and our [privacy statement](https://go.microsoft.com/fwlink/?LinkId=521839). A full restart of the application is necessary for crash reporting changes to take effect.
  //
  // &nbsp;
  //
  // The following table outlines the data sent with each setting:
  //
  // |       | Crash Reports | Error Telemetry | Usage Data |
  // |:------|:---------------------:|:---------------:|:--------------:|
  // | all   |            ✓          |        ✓        |        ✓       |
  // | error |            ✓          |        ✓        |        -       |
  // | crash |            ✓          |        -        |        -       |
  // | off   |            -          |        -        |        -       |
  //
  //
  // &nbsp;
  //
  // ****Note:*** If this setting is 'off', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except 'off' and telemetry is disabled with deprecated settings, no telemetry will be sent.*
  //
  //  - all: Sends usage data, errors, and crash reports.
  //  - error: Sends general error telemetry and crash reports.
  //  - crash: Sends OS level crash reports.
  //  - off: Disables all product telemetry.
  "telemetry.telemetryLevel": "all",

  // Controls whether the editor shows CodeLens.
  "diffEditor.codeLens": false,

  //
  //  - legacy: Uses the legacy diffing algorithm.
  //  - advanced: Uses the advanced diffing algorithm.
  "diffEditor.diffAlgorithm": "advanced",

  // Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted.
  "diffEditor.experimental.showEmptyDecorations": true,

  // Controls whether the diff editor should show detected code moves.
  "diffEditor.experimental.showMoves": false,

  // Controls how many lines are used as context when comparing unchanged regions.
  "diffEditor.hideUnchangedRegions.contextLineCount": 3,

  // Controls whether the diff editor shows unchanged regions.
  "diffEditor.hideUnchangedRegions.enabled": false,

  // Controls how many lines are used as a minimum for unchanged regions.
  "diffEditor.hideUnchangedRegions.minimumLineCount": 3,

  // Controls how many lines are used for unchanged regions.
  "diffEditor.hideUnchangedRegions.revealLineCount": 20,

  // When enabled, the diff editor ignores changes in leading or trailing whitespace.
  "diffEditor.ignoreTrimWhitespace": true,

  // Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
  "diffEditor.maxComputationTime": 5000,

  // Maximum file size in MB for which to compute diffs. Use 0 for no limit.
  "diffEditor.maxFileSize": 50,

  // When enabled, the diff editor shows a special gutter for revert and stage actions.
  "diffEditor.renderGutterMenu": true,

  // Controls whether the diff editor shows +/- indicators for added/removed changes.
  "diffEditor.renderIndicators": true,

  // When enabled, the diff editor shows arrows in its glyph margin to revert changes.
  "diffEditor.renderMarginRevertIcon": true,

  // Controls whether the diff editor shows the diff side by side or inline.
  "diffEditor.renderSideBySide": true,

  // If the diff editor width is smaller than this value, the inline view is used.
  "diffEditor.renderSideBySideInlineBreakpoint": 900,

  // If enabled and the editor width is too small, the inline view is used.
  "diffEditor.useInlineViewWhenSpaceIsLimited": true,

  //
  //  - off: Lines will never wrap.
  //  - on: Lines will wrap at the viewport width.
  //  - inherit: Lines will wrap according to the `editor.wordWrap` setting.
  "diffEditor.wordWrap": "inherit",

  // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
  "editor.acceptSuggestionOnCommitCharacter": true,

  // Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
  //  - on
  //  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
  //  - off
  "editor.acceptSuggestionOnEnter": "on",

  // Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.
  "editor.accessibilityPageSize": 10,

  // Controls if the UI should run in a mode where it is optimized for screen readers.
  //  - auto: Use platform APIs to detect when a Screen Reader is attached.
  //  - on: Optimize for usage with a Screen Reader.
  //  - off: Assume a screen reader is not attached.
  "editor.accessibilitySupport": "auto",

  // Controls whether the editor should automatically close brackets after the user adds an opening bracket.
  //  - always
  //  - languageDefined: Use language configurations to determine when to autoclose brackets.
  //  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
  //  - never
  "editor.autoClosingBrackets": "languageDefined",

  // Controls whether the editor should automatically close comments after the user adds an opening comment.
  //  - always
  //  - languageDefined: Use language configurations to determine when to autoclose comments.
  //  - beforeWhitespace: Autoclose comments only when the cursor is to the left of whitespace.
  //  - never
  "editor.autoClosingComments": "languageDefined",

  // Controls whether the editor should remove adjacent closing quotes or brackets when deleting.
  //  - always
  //  - auto: Remove adjacent closing quotes or brackets only if they were automatically inserted.
  //  - never
  "editor.autoClosingDelete": "auto",

  // Controls whether the editor should type over closing quotes or brackets.
  //  - always
  //  - auto: Type over closing quotes or brackets only if they were automatically inserted.
  //  - never
  "editor.autoClosingOvertype": "auto",

  // Controls whether the editor should automatically close quotes after the user adds an opening quote.
  //  - always
  //  - languageDefined: Use language configurations to determine when to autoclose quotes.
  //  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
  //  - never
  "editor.autoClosingQuotes": "languageDefined",

  // Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
  //  - none: The editor will not insert indentation automatically.
  //  - keep: The editor will keep the current line's indentation.
  //  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
  //  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
  //  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
  "editor.autoIndent": "full",

  // Controls whether the editor should automatically surround selections when typing quotes or brackets.
  //  - languageDefined: Use language configurations to determine when to automatically surround selections.
  //  - quotes: Surround with quotes but not brackets.
  //  - brackets: Surround with brackets but not quotes.
  //  - never
  "editor.autoSurround": "languageDefined",

  // Controls whether bracket pair colorization is enabled or not. Use `workbench.colorCustomizations` to override the bracket highlight colors.
  "editor.bracketPairColorization.enabled": true,

  // Controls whether each bracket type has its own independent color pool.
  "editor.bracketPairColorization.independentColorPoolPerBracketType": false,

  // Run Code Actions for the editor on save. Code Actions must be specified and the editor must not be shutting down. Example: `"source.organizeImports": "explicit" `
  "editor.codeActionsOnSave": {},

  // Enable/disable showing nearest Quick Fix within a line when not currently on a diagnostic.
  "editor.codeActionWidget.includeNearbyQuickFixes": true,

  // Enable/disable showing group headers in the Code Action menu.
  "editor.codeActionWidget.showHeaders": true,

  // Controls whether the editor shows CodeLens.
  "editor.codeLens": true,

  // Controls the font family for CodeLens.
  "editor.codeLensFontFamily": "",

  // Controls the font size in pixels for CodeLens. When set to 0, 90% of `editor.fontSize` is used.
  "editor.codeLensFontSize": 0,

  // Controls whether the editor should render the inline color decorators and color picker.
  "editor.colorDecorators": true,

  // Controls the condition to make a color picker appear from a color decorator
  //  - clickAndHover: Make the color picker appear both on click and hover of the color decorator
  //  - hover: Make the color picker appear on hover of the color decorator
  //  - click: Make the color picker appear on click of the color decorator
  "editor.colorDecoratorsActivatedOn": "clickAndHover",

  // Controls the max number of color decorators that can be rendered in an editor at once.
  "editor.colorDecoratorsLimit": 500,

  // Enable that the selection with the mouse and keys is doing column selection.
  "editor.columnSelection": false,

  // Controls if empty lines should be ignored with toggle, add or remove actions for line comments.
  "editor.comments.ignoreEmptyLines": true,

  // Controls whether a space character is inserted when commenting.
  "editor.comments.insertSpace": true,

  // Controls whether syntax highlighting should be copied into the clipboard.
  "editor.copyWithSyntaxHighlighting": true,

  // Control the cursor animation style.
  "editor.cursorBlinking": "blink",

  // Controls whether the smooth caret animation should be enabled.
  //  - off: Smooth caret animation is disabled.
  //  - explicit: Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture.
  //  - on: Smooth caret animation is always enabled.
  "editor.cursorSmoothCaretAnimation": "off",

  // Controls the cursor style.
  "editor.cursorStyle": "line",

  // Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.
  "editor.cursorSurroundingLines": 0,

  // Controls when `editor.cursorSurroundingLines` should be enforced.
  //  - default: `cursorSurroundingLines` is enforced only when triggered via the keyboard or API.
  //  - all: `cursorSurroundingLines` is enforced always.
  "editor.cursorSurroundingLinesStyle": "default",

  // Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
  "editor.cursorWidth": 0,

  // Controls whether inline color decorations should be shown using the default document color provider
  "editor.defaultColorDecorators": false,

  // Defines a default folding range provider that takes precedence over all other folding range providers. Must be the identifier of an extension contributing a folding range provider.
  //  - null: All active folding range providers
  //  - formulahendry.auto-close-tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
  //  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
  //  - njpwerner.autodocstring: Generates python docstrings automatically
  //  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML, Zig, Mojo, Erlang, SPWN, Pkl, Gleam
  //  - GitHub.copilot: Your AI pair programmer
  //  - GitHub.copilot-chat: AI chat features powered by Copilot
  //  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
  //  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
  //  - golang.go: Rich Go language support for Visual Studio Code
  //  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
  //  - solnurkarim.html-to-css-autocompletion: Provides completion suggestions for classes and ids from markup documents to stylesheets.
  //  - vscode.json-language-features: Provides rich language support for JSON files.
  //  - James-Yu.latex-workshop: Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.
  //  - vscode.markdown-language-features: Provides rich language support for Markdown.
  //  - vscode.markdown-math: Adds math support to Markdown in notebooks.
  //  - mongodb.mongodb-vscode: Connect to MongoDB and Atlas directly from your VS Code environment, navigate your databases and collections, inspect your schema and use playgrounds to prototype queries and aggregations.
  //  - zobo.php-intellisense: Advanced Autocompletion and Refactoring support for PHP
  //  - vscode.php-language-features: Provides rich language support for PHP files.
  //  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
  //  - donjayamanne.python-environment-manager: View and manage Python environments & packages.
  //  - mechatroner.rainbow-csv: Highlight CSV and TSV files, Run SQL-like queries
  //  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
  //  - KevinRose.vsc-python-indent: Correct Python indentation
  //  - mike-lischke.vscode-antlr4: Language support for ANTLR4 grammar files
  //  - batisteo.vscode-django: Beautiful syntax and scoped snippets for perfectionists with deadlines
  //  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
  //  - bmewburn.vscode-intelephense-client: PHP code intelligence for Visual Studio Code
  //  - mgmcdermott.vscode-language-babel: VSCode syntax highlighting for today's JavaScript
  //  - mathematic.vscode-latex: LaTeX language support for Visual Studio Code.
  //  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
  //  - mrmlnc.vscode-scss: Advanced autocompletion and refactoring support for SCSS
  //  - styled-components.vscode-styled-components: Syntax highlighting for styled-components
  //  - rangav.vscode-thunder-client: Lightweight Rest API Client for VS Code
  //  - shalldie.background: Bring background images to your vscode
  //  - aaron-bond.better-comments: Improve your code commenting by annotating with alert, informational, TODOs, and more!
  //  - alefragnani.Bookmarks: Mark lines and jump to them
  //  - twxs.cmake: CMake langage support for Visual Studio Code
  //  - ms-vscode.cmake-tools: Extended CMake support in Visual Studio Code
  //  - naumovs.color-highlight: Highlight web colors in your editor
  //  - bierner.color-info: Provides quick information about css colors
  //  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
  //  - ms-vscode.cpptools-extension-pack: Popular extensions for C++ development in Visual Studio Code.
  //  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
  //  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
  //  - ms-python.debugpy: Python Debugger extension using debugpy.
  //  - EditorConfig.EditorConfig: EditorConfig Support for Visual Studio Code
  //  - vscode.emmet: Emmet support for VS Code
  //  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
  //  - figma.figma-vscode-extension: Bring Figma into the text editor. Inspect designs, receive notifications, and get code suggestions.
  //  - vscode.git: Git SCM Integration
  //  - vscode.git-base: Git static contributions and pickers.
  //  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
  //  - vscode.github: GitHub features for VS Code
  //  - vscode.github-authentication: GitHub Authentication Provider
  //  - eamodio.gitlens: Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more
  //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
  //  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
  //  - vincaslt.highlight-matching-tag: Highlights matching closing and opening tags
  //  - bradgashler.htmltagwrap: Wraps selected code with HTML tags
  //  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
  //  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
  //  - vscode.jake: Extension to add Jake capabilities to VS Code.
  //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
  //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
  //  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
  //  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
  //  - mjpvs.latex-previewer: Preview a typeset LaTeX document in VS Code
  //  - negokaz.live-server-preview: Preview your HTML file with localhost server live-reloading enabled
  //  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
  //  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
  //  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
  //  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
  //  - vscode.microsoft-authentication: Microsoft authentication provider
  //  - ChirtleLovesDolls.nebula-theme: 🌌🌸 Fresh colors on a dark, cold slate. An almost-material theme for Visual Studio Code.
  //  - vscode.npm: Extension to add task support for npm scripts.
  //  - xdebug.php-debug: Debug support for PHP with Xdebug
  //  - brapifra.phpserver: Serve your Project with PHP
  //  - esbenp.prettier-vscode: Code formatter using prettier
  //  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
  //  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
  //  - vscode.simple-browser: A very basic built-in webview for displaying web content.
  //  - yasht.terminal-all-in-one: Enhance your integrated terminal with themes, scripts, keybindings, and commands.
  //  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
  //  - ChakrounAnas.turbo-console-log: Automating the process of writing meaningful log messages.
  //  - anseki.vscode-color: Helper with GUI to generate color codes such as CSS color notations.
  //  - kisstkondoros.vscode-gutter-preview: Shows image preview in the gutter and on hover
  //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
  //  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
  //  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
  //  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
  //  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
  "editor.defaultFoldingRangeProvider": null,

  // Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
  //  - null: None
  //  - formulahendry.auto-close-tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
  //  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
  //  - njpwerner.autodocstring: Generates python docstrings automatically
  //  - aaron-bond.better-comments: Improve your code commenting by annotating with alert, informational, TODOs, and more!
  //  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML, Zig, Mojo, Erlang, SPWN, Pkl, Gleam
  //  - GitHub.copilot: Your AI pair programmer
  //  - GitHub.copilot-chat: AI chat features powered by Copilot
  //  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
  //  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
  //  - figma.figma-vscode-extension: Bring Figma into the text editor. Inspect designs, receive notifications, and get code suggestions.
  //  - golang.go: Rich Go language support for Visual Studio Code
  //  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
  //  - solnurkarim.html-to-css-autocompletion: Provides completion suggestions for classes and ids from markup documents to stylesheets.
  //  - vscode.json-language-features: Provides rich language support for JSON files.
  //  - James-Yu.latex-workshop: Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.
  //  - vscode.markdown-language-features: Provides rich language support for Markdown.
  //  - vscode.markdown-math: Adds math support to Markdown in notebooks.
  //  - mongodb.mongodb-vscode: Connect to MongoDB and Atlas directly from your VS Code environment, navigate your databases and collections, inspect your schema and use playgrounds to prototype queries and aggregations.
  //  - zobo.php-intellisense: Advanced Autocompletion and Refactoring support for PHP
  //  - vscode.php-language-features: Provides rich language support for PHP files.
  //  - esbenp.prettier-vscode: Code formatter using prettier
  //  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
  //  - donjayamanne.python-environment-manager: View and manage Python environments & packages.
  //  - mechatroner.rainbow-csv: Highlight CSV and TSV files, Run SQL-like queries
  //  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
  //  - KevinRose.vsc-python-indent: Correct Python indentation
  //  - mike-lischke.vscode-antlr4: Language support for ANTLR4 grammar files
  //  - batisteo.vscode-django: Beautiful syntax and scoped snippets for perfectionists with deadlines
  //  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
  //  - bmewburn.vscode-intelephense-client: PHP code intelligence for Visual Studio Code
  //  - mgmcdermott.vscode-language-babel: VSCode syntax highlighting for today's JavaScript
  //  - mathematic.vscode-latex: LaTeX language support for Visual Studio Code.
  //  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
  //  - mrmlnc.vscode-scss: Advanced autocompletion and refactoring support for SCSS
  //  - styled-components.vscode-styled-components: Syntax highlighting for styled-components
  //  - rangav.vscode-thunder-client: Lightweight Rest API Client for VS Code
  //  - shalldie.background: Bring background images to your vscode
  //  - alefragnani.Bookmarks: Mark lines and jump to them
  //  - twxs.cmake: CMake langage support for Visual Studio Code
  //  - ms-vscode.cmake-tools: Extended CMake support in Visual Studio Code
  //  - naumovs.color-highlight: Highlight web colors in your editor
  //  - bierner.color-info: Provides quick information about css colors
  //  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
  //  - ms-vscode.cpptools-extension-pack: Popular extensions for C++ development in Visual Studio Code.
  //  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
  //  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
  //  - ms-python.debugpy: Python Debugger extension using debugpy.
  //  - EditorConfig.EditorConfig: EditorConfig Support for Visual Studio Code
  //  - vscode.emmet: Emmet support for VS Code
  //  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
  //  - vscode.git: Git SCM Integration
  //  - vscode.git-base: Git static contributions and pickers.
  //  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
  //  - vscode.github: GitHub features for VS Code
  //  - vscode.github-authentication: GitHub Authentication Provider
  //  - eamodio.gitlens: Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more
  //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
  //  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
  //  - vincaslt.highlight-matching-tag: Highlights matching closing and opening tags
  //  - bradgashler.htmltagwrap: Wraps selected code with HTML tags
  //  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
  //  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
  //  - vscode.jake: Extension to add Jake capabilities to VS Code.
  //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
  //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
  //  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
  //  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
  //  - mjpvs.latex-previewer: Preview a typeset LaTeX document in VS Code
  //  - negokaz.live-server-preview: Preview your HTML file with localhost server live-reloading enabled
  //  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
  //  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
  //  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
  //  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
  //  - vscode.microsoft-authentication: Microsoft authentication provider
  //  - ChirtleLovesDolls.nebula-theme: 🌌🌸 Fresh colors on a dark, cold slate. An almost-material theme for Visual Studio Code.
  //  - vscode.npm: Extension to add task support for npm scripts.
  //  - xdebug.php-debug: Debug support for PHP with Xdebug
  //  - brapifra.phpserver: Serve your Project with PHP
  //  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
  //  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
  //  - vscode.simple-browser: A very basic built-in webview for displaying web content.
  //  - yasht.terminal-all-in-one: Enhance your integrated terminal with themes, scripts, keybindings, and commands.
  //  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
  //  - ChakrounAnas.turbo-console-log: Automating the process of writing meaningful log messages.
  //  - anseki.vscode-color: Helper with GUI to generate color codes such as CSS color notations.
  //  - kisstkondoros.vscode-gutter-preview: Shows image preview in the gutter and on hover
  //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
  //  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
  //  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
  //  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
  //  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
  "editor.defaultFormatter": null,

  // Controls whether the Go to Definition mouse gesture always opens the peek widget.
  "editor.definitionLinkOpensInPeek": false,

  // Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
  "editor.detectIndentation": true,

  // Controls whether the editor should allow moving selections via drag and drop.
  "editor.dragAndDrop": true,

  // Controls whether you can drag and drop a file into a text editor by holding down the `Shift` key (instead of opening the file in an editor).
  "editor.dropIntoEditor.enabled": true,

  // Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped.
  //  - afterDrop: Show the drop selector widget after a file is dropped into the editor.
  //  - never: Never show the drop selector widget. Instead the default drop provider is always used.
  "editor.dropIntoEditor.showDropSelector": "afterDrop",

  // Controls whether copying without a selection copies the current line.
  "editor.emptySelectionClipboard": true,

  // Controls whether the tokenization should happen asynchronously on a web worker.
  "editor.experimental.asyncTokenization": true,

  // Controls whether async tokenization should be logged. For debugging only.
  "editor.experimental.asyncTokenizationLogging": false,

  // Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only.
  "editor.experimental.asyncTokenizationVerification": false,

  // Configures the default drop provider to use for content of a given mime type.
  "editor.experimental.dropIntoEditor.defaultProvider": {},

  // Controls whether to color the background of inline edits.
  "editor.experimentalInlineEdit.backgroundColoring": false,

  // Controls whether to show inline edits in the editor.
  "editor.experimentalInlineEdit.enabled": false,

  // Controls the font family of the inline edit.
  "editor.experimentalInlineEdit.fontFamily": "default",

  // Controls when to show the inline edit toolbar.
  //  - always: Show the inline edit toolbar whenever an inline suggestion is shown.
  //  - onHover: Show the inline edit toolbar when hovering over an inline suggestion.
  //  - never: Never show the inline edit toolbar.
  "editor.experimentalInlineEdit.showToolbar": "onHover",

  // Controls whether whitespace is rendered with a new, experimental method.
  //  - svg: Use a new rendering method with svgs.
  //  - font: Use a new rendering method with font characters.
  //  - off: Use the stable rendering method.
  "editor.experimentalWhitespaceRendering": "svg",

  // Scrolling speed multiplier when pressing `Alt`.
  "editor.fastScrollSensitivity": 5,

  // Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
  "editor.find.addExtraSpaceOnTop": true,

  // Controls the condition for turning on Find in Selection automatically.
  //  - never: Never turn on Find in Selection automatically (default).
  //  - always: Always turn on Find in Selection automatically.
  //  - multiline: Turn on Find in Selection automatically when multiple lines of content are selected.
  "editor.find.autoFindInSelection": "never",

  // Controls whether the cursor should jump to find matches while typing.
  "editor.find.cursorMoveOnType": true,

  // Controls whether the Find Widget should read or modify the shared find clipboard on macOS.
  "editor.find.globalFindClipboard": false,

  // Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.
  "editor.find.loop": true,

  // Controls whether the search string in the Find Widget is seeded from the editor selection.
  //  - never: Never seed search string from the editor selection.
  //  - always: Always seed search string from the editor selection, including word at cursor position.
  //  - selection: Only seed search string from the editor selection.
  "editor.find.seedSearchStringFromSelection": "always",

  // Controls whether the editor has code folding enabled.
  "editor.folding": true,

  // Controls whether the editor should highlight folded ranges.
  "editor.foldingHighlight": true,

  // Controls whether the editor automatically collapses import ranges.
  "editor.foldingImportsByDefault": false,

  // The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.
  "editor.foldingMaximumRegions": 5000,

  // Controls the strategy for computing folding ranges.
  //  - auto: Use a language-specific folding strategy if available, else the indentation-based one.
  //  - indentation: Use the indentation-based folding strategy.
  "editor.foldingStrategy": "auto",

  // Controls the font family.
  "editor.fontFamily": "Menlo, Monaco, 'Courier New', monospace",

  // Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.
  "editor.fontLigatures": false,

  // Controls the font size in pixels.
  "editor.fontSize": 12,

  // Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property.
  "editor.fontVariations": false,

  // Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
  "editor.fontWeight": "normal",

  // Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
  "editor.formatOnPaste": false,

  // Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
  "editor.formatOnSave": false,

  // Controls if format on save formats the whole file or only modifications. Only applies when `editor.formatOnSave` is enabled.
  //  - file: Format the whole file.
  //  - modifications: Format modifications (requires source control).
  //  - modificationsIfAvailable: Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted.
  "editor.formatOnSaveMode": "file",

  // Controls whether the editor should automatically format the line after typing.
  "editor.formatOnType": false,

  // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
  "editor.glyphMargin": true,

  // Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
  "editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

  // Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
  "editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

  // Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
  "editor.gotoLocation.alternativeImplementationCommand": "",

  // Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
  "editor.gotoLocation.alternativeReferenceCommand": "",

  // Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
  "editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

  // This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.
  //
  "editor.gotoLocation.multiple": null,

  // Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
  //  - peek: Show Peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a Peek view
  //  - goto: Go to the primary result and enable Peek-less navigation to others
  "editor.gotoLocation.multipleDeclarations": "peek",

  // Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
  //  - peek: Show Peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a Peek view
  //  - goto: Go to the primary result and enable Peek-less navigation to others
  "editor.gotoLocation.multipleDefinitions": "peek",

  // Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
  //  - peek: Show Peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a Peek view
  //  - goto: Go to the primary result and enable Peek-less navigation to others
  "editor.gotoLocation.multipleImplementations": "peek",

  // Controls the behavior the 'Go to References'-command when multiple target locations exist.
  //  - peek: Show Peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a Peek view
  //  - goto: Go to the primary result and enable Peek-less navigation to others
  "editor.gotoLocation.multipleReferences": "peek",

  // Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
  //  - peek: Show Peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a Peek view
  //  - goto: Go to the primary result and enable Peek-less navigation to others
  "editor.gotoLocation.multipleTypeDefinitions": "peek",

  // Controls whether bracket pair guides are enabled or not.
  //  - true: Enables bracket pair guides.
  //  - active: Enables bracket pair guides only for the active bracket pair.
  //  - false: Disables bracket pair guides.
  "editor.guides.bracketPairs": false,

  // Controls whether horizontal bracket pair guides are enabled or not.
  //  - true: Enables horizontal guides as addition to vertical bracket pair guides.
  //  - active: Enables horizontal guides only for the active bracket pair.
  //  - false: Disables horizontal bracket pair guides.
  "editor.guides.bracketPairsHorizontal": "active",

  // Controls whether the editor should highlight the active bracket pair.
  "editor.guides.highlightActiveBracketPair": true,

  // Controls whether the editor should highlight the active indent guide.
  //  - true: Highlights the active indent guide.
  //  - always: Highlights the active indent guide even if bracket guides are highlighted.
  //  - false: Do not highlight the active indent guide.
  "editor.guides.highlightActiveIndentation": true,

  // Controls whether the editor should render indent guides.
  "editor.guides.indentation": true,

  // Controls whether the cursor should be hidden in the overview ruler.
  "editor.hideCursorInOverviewRuler": false,

  // Prefer showing hovers above the line, if there's space.
  "editor.hover.above": true,

  // Controls the delay in milliseconds after which the hover is shown.
  "editor.hover.delay": 300,

  // Controls whether the hover is shown.
  "editor.hover.enabled": true,

  // Controls the delay in milliseconds after which the hover is hidden. Requires `editor.hover.sticky` to be enabled.
  "editor.hover.hidingDelay": 300,

  // Controls whether the hover should remain visible when mouse is moved over it.
  "editor.hover.sticky": true,

  // The number of spaces used for indentation or `"tabSize"` to use the value from `editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation` is on.
  "editor.indentSize": "tabSize",

  // Enables the inlay hints in the editor.
  //  - on: Inlay hints are enabled
  //  - onUnlessPressed: Inlay hints are showing by default and hide when holding Ctrl+Option
  //  - offUnlessPressed: Inlay hints are hidden by default and show when holding Ctrl+Option
  //  - off: Inlay hints are disabled
  "editor.inlayHints.enabled": "on",

  // Controls font family of inlay hints in the editor. When set to empty, the `editor.fontFamily` is used.
  "editor.inlayHints.fontFamily": "",

  // Controls font size of inlay hints in the editor. As default the `editor.fontSize` is used when the configured value is less than `5` or greater than the editor font size.
  "editor.inlayHints.fontSize": 0,

  // Enables the padding around the inlay hints in the editor.
  "editor.inlayHints.padding": false,

  // Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown.
  "editor.inlineCompletionsAccessibilityVerbose": false,

  // Controls whether to automatically show inline suggestions in the editor.
  "editor.inlineSuggest.enabled": true,

  // Controls the font family of the inline suggestions.
  "editor.inlineSuggest.fontFamily": "default",

  // Controls when to show the inline suggestion toolbar.
  //  - always: Show the inline suggestion toolbar whenever an inline suggestion is shown.
  //  - onHover: Show the inline suggestion toolbar when hovering over an inline suggestion.
  //  - never: Never show the inline suggestion toolbar.
  "editor.inlineSuggest.showToolbar": "onHover",

  // Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available.
  "editor.inlineSuggest.suppressSuggestions": false,

  // Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.insertSpaces": true,

  // Defines the bracket symbols that increase or decrease the indentation.
  "editor.language.brackets": null,

  // Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.
  "editor.language.colorizedBracketPairs": null,

  // Special handling for large files to disable certain memory intensive features.
  "editor.largeFileOptimizations": true,

  // Controls the letter spacing in pixels.
  "editor.letterSpacing": 0,

  // Enables the Code Action lightbulb in the editor.
  //  - off: Disable the code action menu.
  //  - onCode: Show the code action menu when the cursor is on lines with code.
  //  - on: Show the code action menu when the cursor is on lines with code or on empty lines.
  "editor.lightbulb.enabled": "on",

  // Controls the line height.
  //  - Use 0 to automatically compute the line height from the font size.
  //  - Values between 0 and 8 will be used as a multiplier with the font size.
  //  - Values greater than or equal to 8 will be used as effective values.
  "editor.lineHeight": 0,

  // Controls the display of line numbers.
  //  - off: Line numbers are not rendered.
  //  - on: Line numbers are rendered as absolute number.
  //  - relative: Line numbers are rendered as distance in lines to cursor position.
  //  - interval: Line numbers are rendered every 10 lines.
  "editor.lineNumbers": "on",

  // Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.
  "editor.linkedEditing": false,

  // Controls whether the editor should detect links and make them clickable.
  "editor.links": true,

  // Highlight matching brackets.
  "editor.matchBrackets": "always",

  // Lines above this length will not be tokenized for performance reasons
  "editor.maxTokenizationLineLength": 20000,

  // Controls whether the minimap is hidden automatically.
  "editor.minimap.autohide": false,

  // Controls whether the minimap is shown.
  "editor.minimap.enabled": true,

  // Limit the width of the minimap to render at most a certain number of columns.
  "editor.minimap.maxColumn": 120,

  // Render the actual characters on a line as opposed to color blocks.
  "editor.minimap.renderCharacters": true,

  // Scale of content drawn in the minimap: 1, 2 or 3.
  "editor.minimap.scale": 1,

  // Controls the font size of section headers in the minimap.
  "editor.minimap.sectionHeaderFontSize": 9,

  // Controls the amount of space (in pixels) between characters of section header. This helps the readability of the header in small font sizes.
  "editor.minimap.sectionHeaderLetterSpacing": 1,

  // Controls whether MARK: comments are shown as section headers in the minimap.
  "editor.minimap.showMarkSectionHeaders": true,

  // Controls whether named regions are shown as section headers in the minimap.
  "editor.minimap.showRegionSectionHeaders": true,

  // Controls when the minimap slider is shown.
  "editor.minimap.showSlider": "mouseover",

  // Controls the side where to render the minimap.
  "editor.minimap.side": "right",

  // Controls the size of the minimap.
  //  - proportional: The minimap has the same size as the editor contents (and might scroll).
  //  - fill: The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).
  //  - fit: The minimap will shrink as necessary to never be larger than the editor (no scrolling).
  "editor.minimap.size": "proportional",

  // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
  "editor.mouseWheelScrollSensitivity": 1,

  // Zoom the font of the editor when using mouse wheel and holding `Cmd`.
  "editor.mouseWheelZoom": false,

  // Controls the max number of cursors that can be in an active editor at once.
  "editor.multiCursorLimit": 10000,

  // Merge multiple cursors when they are overlapping.
  "editor.multiCursorMergeOverlapping": true,

  // The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
  //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
  //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
  "editor.multiCursorModifier": "alt",

  // Controls pasting when the line count of the pasted text matches the cursor count.
  //  - spread: Each cursor pastes a single line of the text.
  //  - full: Each cursor pastes the full text.
  "editor.multiCursorPaste": "spread",

  // Controls whether occurrences should be highlighted across open files.
  //  - off: Does not highlight occurrences.
  //  - singleFile: Highlights occurrences only in the current file.
  //  - multiFile: Experimental: Highlights occurrences across all valid open files.
  "editor.occurrencesHighlight": "singleFile",

  // Controls whether a border should be drawn around the overview ruler.
  "editor.overviewRulerBorder": true,

  // Controls the amount of space between the bottom edge of the editor and the last line.
  "editor.padding.bottom": 0,

  // Controls the amount of space between the top edge of the editor and the first line.
  "editor.padding.top": 0,

  // Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
  "editor.parameterHints.cycle": true,

  // Enables a pop-up that shows parameter documentation and type information as you type.
  "editor.parameterHints.enabled": true,

  // Controls whether you can paste content in different ways.
  "editor.pasteAs.enabled": true,

  // Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted.
  //  - afterPaste: Show the paste selector widget after content is pasted into the editor.
  //  - never: Never show the paste selector widget. Instead the default pasting behavior is always used.
  "editor.pasteAs.showPasteSelector": "afterPaste",

  // Controls whether to focus the inline editor or the tree in the peek widget.
  //  - tree: Focus the tree when opening peek
  //  - editor: Focus the editor when opening peek
  "editor.peekWidgetDefaultFocus": "tree",

  // Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the '#editor.suggestOnTriggerCharacters#'-setting which controls if suggestions are triggered by special characters.
  "editor.quickSuggestions": {
    "other": "on",
    "comments": "off",
    "strings": "off"
  },

  // Controls the delay in milliseconds after which quick suggestions will show up.
  "editor.quickSuggestionsDelay": 10,

  // Enable/disable the ability to preview changes before renaming
  "editor.rename.enablePreview": true,

  // Deprecated, use `editor.linkedEditing` instead.
  // Controls whether the editor auto renames on type.
  "editor.renameOnType": false,

  // Controls whether the editor should render control characters.
  "editor.renderControlCharacters": true,

  // Render last line number when the file ends with a newline.
  "editor.renderFinalNewline": "on",

  // Controls how the editor should render the current line highlight.
  //  - none
  //  - gutter
  //  - line
  //  - all: Highlights both the gutter and the current line.
  "editor.renderLineHighlight": "line",

  // Controls if the editor should render the current line highlight only when the editor is focused.
  "editor.renderLineHighlightOnlyWhenFocus": false,

  // Controls how the editor should render whitespace characters.
  //  - none
  //  - boundary: Render whitespace characters except for single spaces between words.
  //  - selection: Render whitespace characters only on selected text.
  //  - trailing: Render only trailing whitespace characters.
  //  - all
  "editor.renderWhitespace": "selection",

  // Controls whether selections should have rounded corners.
  "editor.roundedSelection": true,

  // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
  "editor.rulers": [],

  // Control whether inline suggestions are announced by a screen reader.
  "editor.screenReaderAnnounceInlineSuggestion": true,

  // Controls the visibility of the horizontal scrollbar.
  //  - auto: The horizontal scrollbar will be visible only when necessary.
  //  - visible: The horizontal scrollbar will always be visible.
  //  - hidden: The horizontal scrollbar will always be hidden.
  "editor.scrollbar.horizontal": "auto",

  // The height of the horizontal scrollbar.
  "editor.scrollbar.horizontalScrollbarSize": 12,

  // When set, the horizontal scrollbar will not increase the size of the editor's content.
  "editor.scrollbar.ignoreHorizontalScrollbarInContentHeight": false,

  // Controls whether clicks scroll by page or jump to click position.
  "editor.scrollbar.scrollByPage": false,

  // Controls the visibility of the vertical scrollbar.
  //  - auto: The vertical scrollbar will be visible only when necessary.
  //  - visible: The vertical scrollbar will always be visible.
  //  - hidden: The vertical scrollbar will always be hidden.
  "editor.scrollbar.vertical": "auto",

  // The width of the vertical scrollbar.
  "editor.scrollbar.verticalScrollbarSize": 14,

  // Controls the number of extra characters beyond which the editor will scroll horizontally.
  "editor.scrollBeyondLastColumn": 4,

  // Controls whether the editor will scroll beyond the last line.
  "editor.scrollBeyondLastLine": true,

  // Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
  "editor.scrollPredominantAxis": true,

  // Controls whether the editor should highlight matches similar to the selection.
  "editor.selectionHighlight": true,

  // Controls whether the semanticHighlighting is shown for the languages that support it.
  //  - true: Semantic highlighting enabled for all color themes.
  //  - false: Semantic highlighting disabled for all color themes.
  //  - configuredByTheme: Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.
  "editor.semanticHighlighting.enabled": "configuredByTheme",

  // Overrides editor semantic token color and styles from the currently selected color theme.
  "editor.semanticTokenColorCustomizations": {},

  // Controls strikethrough deprecated variables.
  "editor.showDeprecated": true,

  // Controls when the folding controls on the gutter are shown.
  //  - always: Always show the folding controls.
  //  - never: Never show the folding controls and reduce the gutter size.
  //  - mouseover: Only show the folding controls when the mouse is over the gutter.
  "editor.showFoldingControls": "mouseover",

  // Controls fading out of unused code.
  "editor.showUnused": true,

  // Whether leading and trailing whitespace should always be selected.
  "editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

  // Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected.
  "editor.smartSelect.selectSubwords": true,

  // Controls whether the editor will scroll using an animation.
  "editor.smoothScrolling": false,

  // Controls if surround-with-snippets or file template snippets show as Code Actions.
  "editor.snippets.codeActions.enabled": true,

  // Controls whether snippets are shown with other suggestions and how they are sorted.
  //  - top: Show snippet suggestions on top of other suggestions.
  //  - bottom: Show snippet suggestions below other suggestions.
  //  - inline: Show snippets suggestions with other suggestions.
  //  - none: Do not show snippet suggestions.
  "editor.snippetSuggestions": "inline",

  // Keep peek editors open even when double-clicking their content or when hitting `Escape`.
  "editor.stablePeek": false,

  // Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases.
  "editor.stickyScroll.defaultModel": "outlineModel",

  // Shows the nested current scopes during the scroll at the top of the editor.
  "editor.stickyScroll.enabled": true,

  // Defines the maximum number of sticky lines to show.
  "editor.stickyScroll.maxLineCount": 5,

  // Enable scrolling of Sticky Scroll with the editor's horizontal scrollbar.
  "editor.stickyScroll.scrollWithEditor": true,

  // Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.
  "editor.stickyTabStops": false,

  // This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.
  //
  "editor.suggest.filteredTypes": {},

  // Controls whether filtering and sorting suggestions accounts for small typos.
  "editor.suggest.filterGraceful": true,

  // Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
  //  - insert: Insert suggestion without overwriting text right of the cursor.
  //  - replace: Insert suggestion and overwrite text right of the cursor.
  "editor.suggest.insertMode": "insert",

  // Controls whether sorting favors words that appear close to the cursor.
  "editor.suggest.localityBonus": false,

  // When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.
  "editor.suggest.matchOnWordStartOnly": true,

  // This setting is deprecated. The suggest widget can now be resized.
  //
  "editor.suggest.maxVisibleSuggestions": 0,

  // Controls whether to preview the suggestion outcome in the editor.
  "editor.suggest.preview": false,

  // Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions (`editor.quickSuggestions#` and `#editor.suggestOnTriggerCharacters`) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.
  //  - always: Always select a suggestion when automatically triggering IntelliSense.
  //  - never: Never select a suggestion when automatically triggering IntelliSense.
  //  - whenTriggerCharacter: Select a suggestion only when triggering IntelliSense from a trigger character.
  //  - whenQuickSuggestion: Select a suggestion only when triggering IntelliSense as you type.
  "editor.suggest.selectionMode": "always",

  // Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
  "editor.suggest.shareSuggestSelections": false,

  // When enabled IntelliSense shows `class`-suggestions.
  "editor.suggest.showClasses": true,

  // When enabled IntelliSense shows `color`-suggestions.
  "editor.suggest.showColors": true,

  // When enabled IntelliSense shows `constant`-suggestions.
  "editor.suggest.showConstants": true,

  // When enabled IntelliSense shows `constructor`-suggestions.
  "editor.suggest.showConstructors": true,

  // When enabled IntelliSense shows `customcolor`-suggestions.
  "editor.suggest.showCustomcolors": true,

  // When enabled IntelliSense shows `deprecated`-suggestions.
  "editor.suggest.showDeprecated": true,

  // When enabled IntelliSense shows `enumMember`-suggestions.
  "editor.suggest.showEnumMembers": true,

  // When enabled IntelliSense shows `enum`-suggestions.
  "editor.suggest.showEnums": true,

  // When enabled IntelliSense shows `event`-suggestions.
  "editor.suggest.showEvents": true,

  // When enabled IntelliSense shows `field`-suggestions.
  "editor.suggest.showFields": true,

  // When enabled IntelliSense shows `file`-suggestions.
  "editor.suggest.showFiles": true,

  // When enabled IntelliSense shows `folder`-suggestions.
  "editor.suggest.showFolders": true,

  // When enabled IntelliSense shows `function`-suggestions.
  "editor.suggest.showFunctions": true,

  // Controls whether to show or hide icons in suggestions.
  "editor.suggest.showIcons": true,

  // Controls whether suggest details show inline with the label or only in the details widget.
  "editor.suggest.showInlineDetails": true,

  // When enabled IntelliSense shows `interface`-suggestions.
  "editor.suggest.showInterfaces": true,

  // When enabled IntelliSense shows `issues`-suggestions.
  "editor.suggest.showIssues": true,

  // When enabled IntelliSense shows `keyword`-suggestions.
  "editor.suggest.showKeywords": true,

  // When enabled IntelliSense shows `method`-suggestions.
  "editor.suggest.showMethods": true,

  // When enabled IntelliSense shows `module`-suggestions.
  "editor.suggest.showModules": true,

  // When enabled IntelliSense shows `operator`-suggestions.
  "editor.suggest.showOperators": true,

  // When enabled IntelliSense shows `property`-suggestions.
  "editor.suggest.showProperties": true,

  // When enabled IntelliSense shows `reference`-suggestions.
  "editor.suggest.showReferences": true,

  // When enabled IntelliSense shows `snippet`-suggestions.
  "editor.suggest.showSnippets": true,

  // Controls the visibility of the status bar at the bottom of the suggest widget.
  "editor.suggest.showStatusBar": false,

  // When enabled IntelliSense shows `struct`-suggestions.
  "editor.suggest.showStructs": true,

  // When enabled IntelliSense shows `typeParameter`-suggestions.
  "editor.suggest.showTypeParameters": true,

  // When enabled IntelliSense shows `unit`-suggestions.
  "editor.suggest.showUnits": true,

  // When enabled IntelliSense shows `user`-suggestions.
  "editor.suggest.showUsers": true,

  // When enabled IntelliSense shows `value`-suggestions.
  "editor.suggest.showValues": true,

  // When enabled IntelliSense shows `variable`-suggestions.
  "editor.suggest.showVariables": true,

  // When enabled IntelliSense shows `text`-suggestions.
  "editor.suggest.showWords": true,

  // Controls whether an active snippet prevents quick suggestions.
  "editor.suggest.snippetsPreventQuickSuggestions": false,

  // Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
  "editor.suggestFontSize": 0,

  // Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used. The minimum value is 8.
  "editor.suggestLineHeight": 0,

  // Controls whether suggestions should automatically show up when typing trigger characters.
  "editor.suggestOnTriggerCharacters": true,

  // Controls how suggestions are pre-selected when showing the suggest list.
  //  - first: Always select the first suggestion.
  //  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
  //  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
  "editor.suggestSelection": "first",

  // Enables tab completions.
  //  - on: Tab complete will insert the best matching suggestion when pressing tab.
  //  - off: Disable tab completions.
  //  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
  "editor.tabCompletion": "off",

  // Controls whether the editor receives tabs or defers them to the workbench for navigation.
  "editor.tabFocusMode": false,

  // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 4,

  // Overrides editor syntax colors and font style from the currently selected color theme.
  "editor.tokenColorCustomizations": {
    "[*Light*]": {
      "textMateRules": [
        {
          "scope": "ref.matchtext",
          "settings": {
            "foreground": "#000"
          }
        }
      ]
    },
    "[*Dark*]": {
      "textMateRules": [
        {
          "scope": "ref.matchtext",
          "settings": {
            "foreground": "#fff"
          }
        }
      ]
    }
  },

  // Remove trailing auto inserted whitespace.
  "editor.trimAutoWhitespace": true,

  // Controls whether clicking on the empty content after a folded line will unfold the line.
  "editor.unfoldOnClickAfterEndOfLine": false,

  // Defines allowed characters that are not being highlighted.
  "editor.unicodeHighlight.allowedCharacters": {},

  // Unicode characters that are common in allowed locales are not being highlighted.
  "editor.unicodeHighlight.allowedLocales": {
    "_os": true,
    "_vscode": true
  },

  // Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.
  "editor.unicodeHighlight.ambiguousCharacters": true,

  // Controls whether characters in comments should also be subject to Unicode highlighting.
  "editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",

  // Controls whether characters in strings should also be subject to Unicode highlighting.
  "editor.unicodeHighlight.includeStrings": true,

  // Controls whether characters that just reserve space or have no width at all are highlighted.
  "editor.unicodeHighlight.invisibleCharacters": true,

  // Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.
  "editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",

  // Remove unusual line terminators that might cause problems.
  //  - auto: Unusual line terminators are automatically removed.
  //  - off: Unusual line terminators are ignored.
  //  - prompt: Unusual line terminators prompt to be removed.
  "editor.unusualLineTerminators": "prompt",

  // Spaces and tabs are inserted and deleted in alignment with tab stops.
  "editor.useTabStops": true,

  // Controls whether completions should be computed based on words in the document and from which documents they are computed.
  //  - off: Turn off Word Based Suggestions.
  //  - currentDocument: Only suggest words from the active document.
  //  - matchingDocuments: Suggest words from all open documents of the same language.
  //  - allDocuments: Suggest words from all open documents.
  "editor.wordBasedSuggestions": "matchingDocuments",

  // Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.
  //  - normal: Use the default line break rule.
  //  - keepAll: Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal.
  "editor.wordBreak": "normal",

  //
  "editor.wordSegmenterLocales": null,

  // Characters that will be used as word separators when doing word related navigations or operations.
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

  // Controls how lines should wrap.
  //  - off: Lines will never wrap.
  //  - on: Lines will wrap at the viewport width.
  //  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
  //  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
  "editor.wordWrap": "off",

  // Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
  "editor.wordWrapColumn": 80,

  // Controls the indentation of wrapped lines.
  //  - none: No indentation. Wrapped lines begin at column 1.
  //  - same: Wrapped lines get the same indentation as the parent.
  //  - indent: Wrapped lines get +1 indentation toward the parent.
  //  - deepIndent: Wrapped lines get +2 indentation toward the parent.
  "editor.wrappingIndent": "same",

  // Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.
  //  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
  //  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
  "editor.wrappingStrategy": "simple",

  // Whether pending inline chat sessions prevent saving.
  "inlineChat.acceptedOrDiscardBeforeSave": true,

  // Whether the inline chat also renders an accessible diff viewer for its changes.
  //  - auto: The accessible diff viewer is based screen reader mode being enabled.
  //  - on: The accessible diff viewer is always enabled.
  //  - off: The accessible diff viewer is never enabled.
  "inlineChat.accessibleDiffView": "auto",

  // Whether to finish an inline chat session when typing outside of changed regions.
  "inlineChat.finishOnType": false,

  // Whether holding the inline chat keybinding will automatically enable speech recognition.
  "inlineChat.holdToSpeech": true,

  // Configure if changes crafted with inline chat are applied directly to the document or are previewed first.
  //  - live: Changes are applied directly to the document, can be highlighted via inline diffs, and accepted/discarded by hunks. Ending a session will keep the changes.
  //  - preview: Changes are previewed only and need to be accepted via the apply button. Ending a session will discard the changes.
  "inlineChat.mode": "live",

  // Controls whether inline actions are always visible in the Source Control view.
  "scm.alwaysShowActions": false,

  // Controls whether repositories should always be visible in the Source Control view.
  "scm.alwaysShowRepositories": false,

  // Controls whether the Source Control view should automatically reveal and select files when opening them.
  "scm.autoReveal": true,

  // Controls the count badge on the Source Control icon on the Activity Bar.
  //  - all: Show the sum of all Source Control Provider count badges.
  //  - focused: Show the count badge of the focused Source Control Provider.
  //  - off: Disable the Source Control count badge.
  "scm.countBadge": "all",

  // Controls the default Source Control repository view mode.
  //  - tree: Show the repository changes as a tree.
  //  - list: Show the repository changes as a list.
  "scm.defaultViewMode": "list",

  // Controls the default Source Control repository changes sort order when viewed as a list.
  //  - name: Sort the repository changes by file name.
  //  - path: Sort the repository changes by path.
  //  - status: Sort the repository changes by Source Control status.
  "scm.defaultViewSortKey": "path",

  // Controls diff decorations in the editor.
  //  - all: Show the diff decorations in all available locations.
  //  - gutter: Show the diff decorations only in the editor gutter.
  //  - overview: Show the diff decorations only in the overview ruler.
  //  - minimap: Show the diff decorations only in the minimap.
  //  - none: Do not show the diff decorations.
  "scm.diffDecorations": "all",

  // Controls the behavior of Source Control diff gutter decorations.
  //  - diff: Show the inline diff Peek view on click.
  //  - none: Do nothing.
  "scm.diffDecorationsGutterAction": "diff",

  // Controls whether a pattern is used for the diff decorations in gutter.
  "scm.diffDecorationsGutterPattern": {
    "added": false,
    "modified": true
  },

  // Controls the visibility of the Source Control diff decorator in the gutter.
  //  - always: Show the diff decorator in the gutter at all times.
  //  - hover: Show the diff decorator in the gutter only on hover.
  "scm.diffDecorationsGutterVisibility": "always",

  // Controls the width(px) of diff decorations in gutter (added & modified).
  "scm.diffDecorationsGutterWidth": 3,

  // Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations.
  //  - true: Ignore leading and trailing whitespace.
  //  - false: Do not ignore leading and trailing whitespace.
  //  - inherit: Inherit from `diffEditor.ignoreTrimWhitespace`.
  "scm.diffDecorationsIgnoreTrimWhitespace": "false",

  // Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `editor.fontFamily`'s value, or a custom font family.
  "scm.inputFontFamily": "default",

  // Controls the font size for the input message in pixels.
  "scm.inputFontSize": 13,

  // Controls the maximum number of lines that the input will auto-grow to.
  "scm.inputMaxLineCount": 10,

  // Controls the minimum number of lines that the input will auto-grow from.
  "scm.inputMinLineCount": 1,

  // Controls the count badges on Source Control Provider headers. These headers appear in the Source Control view when there is more than one provider or when the `scm.alwaysShowRepositories` setting is enabled, and in the Source Control Repositories view.
  //  - hidden: Hide Source Control Provider count badges.
  //  - auto: Only show count badge for Source Control Provider when non-zero.
  //  - visible: Show Source Control Provider count badges.
  "scm.providerCountBadge": "hidden",

  // Controls the sort order of the repositories in the source control repositories view.
  //  - discovery time: Repositories in the Source Control Repositories view are sorted by discovery time. Repositories in the Source Control view are sorted in the order that they were selected.
  //  - name: Repositories in the Source Control Repositories and Source Control views are sorted by repository name.
  //  - path: Repositories in the Source Control Repositories and Source Control views are sorted by repository path.
  "scm.repositories.sortOrder": "discovery time",

  // Controls how many repositories are visible in the Source Control Repositories section. Set to 0, to be able to manually resize the view.
  "scm.repositories.visible": 10,

  // Controls whether an action button can be shown in the Source Control view.
  "scm.showActionButton": true,

  // Controls whether the All Changes entry is shown for incoming/outgoing changes in the Source Control view.
  "scm.showChangesSummary": true,

  // Controls whether incoming changes are shown in the Source Control view.
  //  - always: Always show incoming changes in the Source Control view.
  //  - never: Never show incoming changes in the Source Control view.
  //  - auto: Only show incoming changes in the Source Control view when any exist.
  "scm.showIncomingChanges": "auto",

  // Controls whether an action button can be shown in the Source Control input.
  "scm.showInputActionButton": true,

  // Controls whether outgoing changes are shown in the Source Control view.
  //  - always: Always show outgoing changes in the Source Control view.
  //  - never: Never show outgoing changes in the Source Control view.
  //  - auto: Only show outgoing changes in the Source Control view when any exist.
  "scm.showOutgoingChanges": "auto",

  // Controls the default working set to use when switching to a source control history item group that does not have a working set.
  //  - empty: Use an empty working set when switching to a source control history item group that does not have a working set.
  //  - current: Use the current working set when switching to a source control history item group that does not have a working set.
  "scm.workingSets.default": "current",

  // Controls whether to store editor working sets when switching between source control history item groups.
  "scm.workingSets.enabled": false,

  // If enabled, a dialog will ask for confirmation whenever a local file or workspace is about to open through a protocol handler.
  "security.promptForLocalFileProtocolHandling": true,

  // If enabled, a dialog will ask for confirmation whenever a remote file or workspace is about to open through a protocol handler.
  "security.promptForRemoteFileProtocolHandling": true,

  // Controls when the restricted mode banner is shown.
  //  - always: Show the banner every time an untrusted workspace is open.
  //  - untilDismissed: Show the banner when an untrusted workspace is opened until dismissed.
  //  - never: Do not show the banner when an untrusted workspace is open.
  "security.workspace.trust.banner": "untilDismissed",

  // Controls whether or not the empty window is trusted by default within VS Code. When used with `security.workspace.trust.untrustedFiles`, you can enable the full functionality of VS Code without prompting in an empty window.
  "security.workspace.trust.emptyWindow": true,

  // Controls whether or not Workspace Trust is enabled within VS Code.
  "security.workspace.trust.enabled": true,

  // Controls when the startup prompt to trust a workspace is shown.
  //  - always: Ask for trust every time an untrusted workspace is opened.
  //  - once: Ask for trust the first time an untrusted workspace is opened.
  //  - never: Do not ask for trust when an untrusted workspace is opened.
  "security.workspace.trust.startupPrompt": "once",

  // Controls how to handle opening untrusted files in a trusted workspace. This setting also applies to opening files in an empty window which is trusted via `security.workspace.trust.emptyWindow`.
  //  - prompt: Ask how to handle untrusted files for each workspace. Once untrusted files are introduced to a trusted workspace, you will not be prompted again.
  //  - open: Always allow untrusted files to be introduced to a trusted workspace without prompting.
  //  - newWindow: Always open untrusted files in a separate window in restricted mode without prompting.
  "security.workspace.trust.untrustedFiles": "prompt",

  // Whether to dim unfocused editors and terminals, which makes it more clear where typed input will go to. This works with the majority of editors with the notable exceptions of those that utilize iframes like notebooks and extension webview editors.
  "accessibility.dimUnfocused.enabled": false,

  // The opacity fraction (0.2 to 1.0) to use for unfocused editors and terminals. This will only take effect when `accessibility.dimUnfocused.enabled` is enabled.
  "accessibility.dimUnfocused.opacity": 0.75,

  // Controls whether the Accessible View is hidden.
  "accessibility.hideAccessibleView": false,

  // Controls the height of editor tabs. Also applies to the title control bar when `workbench.editor.showTabs` is not set to `multiple`.
  "window.density.editorTabHeight": "default",

  // Controls the behavior of clicking an Activity Bar icon in the workbench. This value is ignored when `workbench.activityBar.location` is not set to `default`.
  //  - toggle: Hide the Primary Side Bar if the clicked item is already visible.
  //  - focus: Focus the Primary Side Bar if the clicked item is already visible.
  "workbench.activityBar.iconClickBehavior": "toggle",

  // Controls the location of the Activity Bar relative to the Primary and Secondary Side Bars.
  //  - default: Show the Activity Bar on the side of the Primary Side Bar and on top of the Secondary Side Bar.
  //  - top: Show the Activity Bar on top of the Primary and Secondary Side Bars.
  //  - bottom: Show the Activity Bar at the bottom of the Primary and Secondary Side Bars.
  //  - hidden: Hide the Activity Bar in the Primary and Secondary Side Bars.
  "workbench.activityBar.location": "default",

  // Controls whether to automatically resume available working changes stored in the cloud for the current workspace.
  //  - onReload: Automatically resume available working changes from the cloud on window reload.
  //  - off: Never attempt to resume working changes from the cloud.
  "workbench.cloudChanges.autoResume": "onReload",

  // Controls whether to prompt the user to store working changes in the cloud when using Continue Working On.
  //  - prompt: Prompt the user to sign in to store working changes in the cloud with Continue Working On.
  //  - off: Do not store working changes in the cloud with Continue Working On unless the user has already turned on Cloud Changes.
  "workbench.cloudChanges.continueOn": "prompt",

  // Overrides colors from the currently selected color theme.
  "workbench.colorCustomizations": {},

  // Specifies the color theme used in the workbench when `window.autoDetectColorScheme` is not enabled.
  "workbench.colorTheme": "Default Dark Modern",

  // Controls where the command palette should ask chat questions.
  //  - chatView: Ask chat questions in the Chat view.
  //  - quickChat: Ask chat questions in Quick Chat.
  "workbench.commandPalette.experimental.askChatLocation": "chatView",

  // Controls whether the command palette should include similar commands. You must have an extension installed that provides Natural Language support.
  "workbench.commandPalette.experimental.enableNaturalLanguageSearch": true,

  // Controls whether the command palette should have a list of commonly used commands.
  "workbench.commandPalette.experimental.suggestCommands": false,

  // Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
  "workbench.commandPalette.history": 50,

  // Controls whether the last typed input to the command palette should be restored when opening it the next time.
  "workbench.commandPalette.preserveInput": false,

  // Controls whether to always show the editor actions, even when the editor group is not active.
  "workbench.editor.alwaysShowEditorActions": false,

  // If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by a user gesture (for example drag and drop), but not by default. Consequently, the active editor in a locked group is less likely to be replaced accidentally with a different editor.
  "workbench.editor.autoLockGroups": {
    "default": false,
    "workbench.editor.chatSession": false,
    "workbench.editorinputs.searchEditorInput": false,
    "workbench.editors.gettingStartedInput": false,
    "terminalEditor": true,
    "imagePreview.previewEditor": false,
    "vscode.audioPreview": false,
    "vscode.videoPreview": false,
    "jsProfileVisualizer.cpuprofile.table": false,
    "jsProfileVisualizer.heapprofile.table": false,
    "jsProfileVisualizer.heapsnapshot.table": false,
    "gitlens.rebase": false,
    "latex-workshop-pdf-hook": false,
    "jupyter-notebook": false,
    "workbench.input.interactive": false,
    "mainThreadWebview-markdown.preview": false,
    "mainThreadWebview-simpleBrowser.view": true,
    "mainThreadWebview-browserPreview": true
  },

  // Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
  "workbench.editor.centeredLayoutAutoResize": true,

  // Controls whether the centered layout tries to maintain constant width when the window is resized.
  "workbench.editor.centeredLayoutFixedWidth": false,

  // Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
  "workbench.editor.closeEmptyGroups": true,

  // Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.
  "workbench.editor.closeOnFileDelete": false,

  // Controls whether the custom workbench editor labels should be applied.
  "workbench.editor.customLabels.enabled": true,

  // Controls the rendering of the editor label. Each __Item__ is a pattern that matches a file path. Both relative and absolute file paths are supported. The relative path must include the WORKSPACE_FOLDER (e.g `WORKSPACE_FOLDER/src/**.tsx` or `*/src/**.tsx`). Absolute patterns must start with a `/`. In case multiple patterns match, the longest matching path will be picked. Each __Value__ is the template for the rendered editor when the __Item__ matches. Variables are substituted based on the context:
  // - `${dirname}`: name of the folder in which the file is located (e.g. `WORKSPACE_FOLDER/folder/file.txt -> folder`).
  // - `${dirname(N)}`: name of the nth parent folder in which the file is located (e.g. `N=2: WORKSPACE_FOLDER/static/folder/file.txt -> WORKSPACE_FOLDER`). Folders can be picked from the start of the path by using negative numbers (e.g. `N=-1: WORKSPACE_FOLDER/folder/file.txt -> WORKSPACE_FOLDER`). If the __Item__ is an absolute pattern path, the first folder (`N=-1`) refers to the first folder in the absoulte path, otherwise it corresponds to the workspace folder.
  // - `${filename}`: name of the file without the file extension (e.g. `WORKSPACE_FOLDER/folder/file.txt -> file`).
  // - `${extname}`: the file extension (e.g. `WORKSPACE_FOLDER/folder/file.txt -> txt`).
  //
  // Example: `"**/static/**/*.html": "${filename} - ${dirname} (${extname})"` will render a file `WORKSPACE_FOLDER/static/folder/file.html` as `file - folder (html)`.
  "workbench.editor.customLabels.patterns": {},

  // Controls whether editor file decorations should use badges.
  "workbench.editor.decorations.badges": true,

  // Controls whether editor file decorations should use colors.
  "workbench.editor.decorations.colors": true,

  // The default editor for files detected as binary. If undefined, the user will be presented with a picker.
  "workbench.editor.defaultBinaryEditor": "",

  // Controls how the editor group is resized when double clicking on a tab. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  //  - maximize: All other editor groups are hidden and the current editor group is maximized to take up the entire editor area.
  //  - expand: The editor group takes as much space as possible by making all other editor groups as small as possible.
  //  - off: No editor group is resized when double clicking on a tab.
  "workbench.editor.doubleClickTabToToggleEditorGroupSizes": "expand",

  // Controls if editors can be dragged out of the window to open them in a new window. Press and hold the `Alt` key while dragging to toggle this dynamically.
  "workbench.editor.dragToOpenWindow": true,

  // Controls where the editor actions are shown.
  //  - default: Show editor actions in the window title bar when `workbench.editor.showTabs` is set to `none`. Otherwise, editor actions are shown in the editor tab bar.
  //  - titleBar: Show editor actions in the window title bar. If `window.customTitleBarVisibility` is set to `never`, editor actions are hidden.
  //  - hidden: Editor actions are not shown.
  "workbench.editor.editorActionsLocation": "default",

  // Controls if the empty editor text hint should be visible in the editor.
  "workbench.editor.empty.hint": "text",

  // Controls whether opened editors show as preview editors. Preview editors do not stay open, are reused until explicitly set to be kept open (via double-click or editing), and show file names in italics.
  "workbench.editor.enablePreview": true,

  // Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double-click or editing). This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  "workbench.editor.enablePreviewFromCodeNavigation": false,

  // Controls whether editors opened from Quick Open show as preview editors. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double-click or editing). When enabled, hold Ctrl before selection to open an editor as a non-preview. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  "workbench.editor.enablePreviewFromQuickOpen": false,

  // Controls whether editors are closed in most recently used order or from left to right.
  "workbench.editor.focusRecentEditorAfterClose": true,

  // Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `workbench.editor.showTabs` is not set to multiple.
  "workbench.editor.highlightModifiedTabs": false,

  // Enables use of editor history in language detection. This causes automatic language detection to favor languages that have been recently opened and allows for automatic language detection to operate with smaller inputs.
  "workbench.editor.historyBasedLanguageDetection": true,

  // Controls the format of the label for an editor.
  //  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
  //  - short: Show the name of the file followed by its directory name.
  //  - medium: Show the name of the file followed by its path relative to the workspace folder.
  //  - long: Show the name of the file followed by its absolute path.
  "workbench.editor.labelFormat": "default",

  // Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.
  "workbench.editor.languageDetection": true,

  // When enabled, shows a Status bar Quick Fix when the editor language doesn't match detected content language.
  "workbench.editor.languageDetectionHints": {
    "untitledEditors": true,
    "notebookEditors": true
  },

  // Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.
  "workbench.editor.limit.enabled": false,

  // Controls if the maximum number of opened editors should exclude dirty editors for counting towards the configured limit.
  "workbench.editor.limit.excludeDirty": false,

  // Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
  "workbench.editor.limit.perEditorGroup": false,

  // Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
  "workbench.editor.limit.value": 10,

  // Enables the use of mouse buttons four and five for commands 'Go Back' and 'Go Forward'.
  "workbench.editor.mouseBackForwardToNavigate": true,

  // Controls the scope of history navigation in editors for commands such as 'Go Back' and 'Go Forward'.
  //  - default: Navigate across all opened editors and editor groups.
  //  - editorGroup: Navigate only in editors of the active editor group.
  //  - editor: Navigate only in the active editor.
  "workbench.editor.navigationScope": "default",

  // Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
  "workbench.editor.openPositioning": "right",

  // Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
  "workbench.editor.openSideBySideDirection": "right",

  // Controls the size of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  //  - normal: A pinned tab inherits the look of non pinned tabs.
  //  - compact: A pinned tab will show in a compact form with only icon or first letter of the editor name.
  //  - shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
  "workbench.editor.pinnedTabSizing": "normal",

  // When enabled, displays pinned tabs in a separate row above all other tabs. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  "workbench.editor.pinnedTabsOnSeparateRow": false,

  // When enabled, a language detection model that takes into account editor history will be given higher precedence.
  "workbench.editor.preferHistoryBasedLanguageDetection": false,

  // Controls whether pinned editors should close when keyboard or middle mouse click is used for closing.
  //  - keyboardAndMouse: Always prevent closing the pinned editor when using mouse middle click or keyboard.
  //  - keyboard: Prevent closing the pinned editor when using the keyboard.
  //  - mouse: Prevent closing the pinned editor when using mouse middle click.
  //  - never: Never prevent closing a pinned editor.
  "workbench.editor.preventPinnedEditorClose": "keyboardAndMouse",

  // Restores the last editor view state (such as scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the `workbench.editor.sharedViewState` setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.
  "workbench.editor.restoreViewState": true,

  // Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, such as when forcing an editor to open in a specific group or to the side of the currently active group.
  "workbench.editor.revealIfOpen": false,

  // Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  "workbench.editor.scrollToSwitchTabs": false,

  // Preserves the most recent editor view state (such as scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group.
  "workbench.editor.sharedViewState": false,

  // Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
  "workbench.editor.showIcons": true,

  // Controls whether opened editors should show as individual tabs, one single large tab or if the title area should not be shown.
  //  - multiple: Each editor is displayed as a tab in the editor title area.
  //  - single: The active editor is displayed as a single large tab in the editor title area.
  //  - none: The editor title area is not displayed.
  "workbench.editor.showTabs": "multiple",

  // Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.
  //  - vertical: Editors are positioned from top to bottom.
  //  - horizontal: Editors are positioned from left to right.
  "workbench.editor.splitInGroupLayout": "horizontal",

  // Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.
  "workbench.editor.splitOnDragAndDrop": true,

  // Controls the size of editor groups when splitting them.
  //  - auto: Splits the active editor group to equal parts, unless all editor groups are already in equal parts. In that case, splits all the editor groups to equal parts.
  //  - distribute: Splits all the editor groups to equal parts.
  //  - split: Splits the active editor group to equal parts.
  "workbench.editor.splitSizing": "auto",

  // Controls the visibility of the tab close action button.
  "workbench.editor.tabActionCloseVisibility": true,

  // Controls the position of the editor's tabs action buttons (close, unpin). This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  "workbench.editor.tabActionLocation": "right",

  // Controls the visibility of the tab unpin action button.
  "workbench.editor.tabActionUnpinVisibility": true,

  // Controls the size of editor tabs. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  //  - fit: Always keep tabs large enough to show the full editor label.
  //  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
  //  - fixed: Make all tabs the same size, while allowing them to get smaller when the available space is not enough to show all tabs at once.
  "workbench.editor.tabSizing": "fit",

  // Controls the maximum width of tabs when `workbench.editor.tabSizing` size is set to `fixed`.
  "workbench.editor.tabSizingFixedMaxWidth": 160,

  // Controls the minimum width of tabs when `workbench.editor.tabSizing` size is set to `fixed`.
  "workbench.editor.tabSizingFixedMinWidth": 50,

  // Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
  //  - default: The default size.
  //  - large: Increases the size, so it can be grabbed more easily with the mouse.
  "workbench.editor.titleScrollbarSizing": "default",

  // Controls the format of the label for an untitled editor.
  //  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
  //  - name: The name of the untitled file is not derived from the contents of the file.
  "workbench.editor.untitled.labelFormat": "content",

  // Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `workbench.editor.showTabs` is not set to '`multiple`'.
  "workbench.editor.wrapTabs": false,

  // Configure [glob patterns](https://aka.ms/vscode-glob-patterns) to editors (for example `"*.hex": "hexEditor.hexedit"`). These have precedence over the default behavior.
  "workbench.editorAssociations": {},

  // Controls the minimum size of a file in MB before asking for confirmation when opening in the editor. Note that this setting may not apply to all editor types and environments.
  "workbench.editorLargeFileConfirmation": 1024,

  // Fetches experiments to run from a Microsoft online service.
  "workbench.enableExperiments": true,

  // Controls whether to automatically store available working changes in the cloud for the current workspace. This setting has no effect in the web.
  //  - onShutdown: Automatically store current working changes in the cloud on window close.
  //  - off: Never attempt to automatically store working changes in the cloud.
  "workbench.experimental.cloudChanges.autoStore": "off",

  // Controls whether to surface cloud changes which partially match the current session.
  "workbench.experimental.cloudChanges.partialMatches.enabled": false,

  // Controls whether to render the Share action next to the command center when `window.commandCenter` is `true`.
  "workbench.experimental.share.enabled": false,

  // Configure the opener to use for external URIs (http, https).
  "workbench.externalUriOpeners": {},

  // Controls font aliasing method in the workbench.
  //  - default: Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text.
  //  - antialiased: Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall.
  //  - none: Disables font smoothing. Text will show with jagged sharp edges.
  //  - auto: Applies `default` or `antialiased` automatically based on the DPI of displays.
  "workbench.fontAliasing": "default",

  // Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.
  "workbench.hover.delay": 1500,

  // Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
  //  - null: No file icons
  //  - vs-minimal
  //  - vs-seti
  //  - verdandi
  //  - macos-modern-big-sur-icon-theme
  //  - macos-modern-legit-finder-icon-theme
  //  - macos-modern-legit-xcode-icon-theme
  //  - macos-modern-minimal-finder-icon-theme
  //  - macos-modern-minimal-xcode-icon-theme
  //  - macos-modern-minimal-mono-icon-theme
  //  - material-icon-theme
  "workbench.iconTheme": "vs-seti",

  // Controls whether the layout control is shown in the custom title bar. This setting only has an effect when `window.customTitleBarVisibility` is not set to `never`.
  "workbench.layoutControl.enabled": true,

  // Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles.
  //  - menu: Shows a single button with a dropdown of layout options.
  //  - toggles: Shows several buttons for toggling the visibility of the panels and side bar.
  //  - both: Shows both the dropdown and toggle buttons.
  "workbench.layoutControl.type": "both",

  // Controls the type of matching used when searching lists and trees in the workbench.
  //  - fuzzy: Use fuzzy matching when searching.
  //  - contiguous: Use contiguous matching when searching.
  "workbench.list.defaultFindMatchType": "fuzzy",

  // Controls the default find mode for lists and trees in the workbench.
  //  - highlight: Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements.
  //  - filter: Filter elements when searching.
  "workbench.list.defaultFindMode": "highlight",

  // Scrolling speed multiplier when pressing `Alt`.
  "workbench.list.fastScrollSensitivity": 5,

  // Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
  "workbench.list.horizontalScrolling": false,

  // Please use 'workbench.list.defaultFindMode' and	'workbench.list.typeNavigationMode' instead.
  // Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
  //  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
  //  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
  //  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
  "workbench.list.keyboardNavigation": "highlight",

  // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
  "workbench.list.mouseWheelScrollSensitivity": 1,

  // The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
  //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
  //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
  "workbench.list.multiSelectModifier": "ctrlCmd",

  // Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.
  "workbench.list.openMode": "singleClick",

  // Controls whether clicks in the scrollbar scroll page by page.
  "workbench.list.scrollByPage": false,

  // Controls whether lists and trees have smooth scrolling.
  "workbench.list.smoothScrolling": false,

  // Controls how type navigation works in lists and trees in the workbench. When set to `trigger`, type navigation begins once the `list.triggerTypeNavigation` command is run.
  "workbench.list.typeNavigationMode": "automatic",

  // Controls whether local file history is enabled. When enabled, the file contents of an editor that is saved will be stored to a backup location to be able to restore or review the contents later. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.enabled": true,

  // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files from the local file history. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.exclude": {},

  // Controls the maximum number of local file history entries per file. When the number of local file history entries exceeds this number for a file, the oldest entries will be discarded.
  "workbench.localHistory.maxFileEntries": 50,

  // Controls the maximum size of a file (in KB) to be considered for local file history. Files that are larger will not be added to the local file history. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.maxFileSize": 256,

  // Configure an interval in seconds during which the last entry in local file history is replaced with the entry that is being added. This helps reduce the overall number of entries that are added, for example when auto save is enabled. This setting is only applied to entries that have the same source of origin. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.mergeWindow": 10,

  // Controls the default location of the panel (Terminal, Debug Console, Output, Problems) in a new workspace. It can either show at the bottom, right, or left of the editor area.
  "workbench.panel.defaultLocation": "bottom",

  // Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.
  //  - always: Always maximize the panel when opening it.
  //  - never: Never maximize the panel when opening it. The panel will open un-maximized.
  //  - preserve: Open the panel to the state that it was in, before it was closed.
  "workbench.panel.opensMaximized": "preserve",

  // Specifies the color theme when system color mode is dark and `window.autoDetectColorScheme` is enabled.
  "workbench.preferredDarkColorTheme": "Default Dark Modern",

  // Specifies the color theme when in high contrast dark mode and `window.autoDetectHighContrast` is enabled.
  "workbench.preferredHighContrastColorTheme": "Default High Contrast",

  // Specifies the color theme when in high contrast light mode and `window.autoDetectHighContrast` is enabled.
  "workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",

  // Specifies the color theme when system color mode is light and `window.autoDetectColorScheme` is enabled.
  "workbench.preferredLightColorTheme": "Default Light Modern",

  // Specifies the product icon theme used.
  //  - Default: Default
  //  - macos-modern
  "workbench.productIconTheme": "Default",

  // Controls whether Quick Open should close automatically once it loses focus.
  "workbench.quickOpen.closeOnFocusLost": true,

  // Controls whether the last typed input to Quick Open should be restored when opening it the next time.
  "workbench.quickOpen.preserveInput": false,

  // Controls whether the workbench should render with fewer animations.
  //  - on: Always render with reduced motion.
  //  - off: Do not render with reduced motion
  //  - auto: Render with reduced motion based on OS configuration.
  "workbench.reduceMotion": "auto",

  // When enabled, remote extensions recommendations will be shown in the Remote Indicator menu.
  "workbench.remoteIndicator.showExtensionRecommendations": true,

  // Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.
  "workbench.sash.hoverDelay": 300,

  // Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.
  "workbench.sash.size": 4,

  // Configure settings to be applied for all profiles.
  "workbench.settings.applyToAllProfiles": [],

  // Determines which settings editor to use by default.
  //  - ui: Use the settings UI editor.
  //  - json: Use the JSON file editor.
  "workbench.settings.editor": "ui",

  // Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
  "workbench.settings.enableNaturalLanguageSearch": true,

  // Controls whether opening keybinding settings also opens an editor showing all default keybindings.
  "workbench.settings.openDefaultKeybindings": false,

  // Controls whether opening settings also opens an editor showing all default settings.
  "workbench.settings.openDefaultSettings": false,

  // Controls the behavior of the Settings editor Table of Contents while searching. If this setting is being changed in the Settings editor, the setting will take effect after the search query is modified.
  //  - hide: Hide the Table of Contents while searching.
  //  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking on a category will filter the results to that category.
  "workbench.settings.settingsSearchTocBehavior": "filter",

  // Controls whether to use the split JSON editor when editing settings as JSON.
  "workbench.settings.useSplitJSON": false,

  // Controls the location of the primary side bar and activity bar. They can either show on the left or right of the workbench. The secondary side bar will show on the opposite side of the workbench.
  "workbench.sideBar.location": "left",

  // Controls which editor is shown at startup, if none are restored from the previous session.
  //  - none: Start without an editor.
  //  - welcomePage: Open the Welcome page, with content to aid in getting started with VS Code and extensions.
  //  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.
  //  - newUntitledFile: Open a new untitled text file (only applies when opening an empty window).
  //  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
  //  - terminal: Open a new terminal in the editor area.
  "workbench.startupEditor": "welcomePage",

  // Controls the visibility of the status bar at the bottom of the workbench.
  "workbench.statusBar.visible": true,

  // When enabled, will show the watermark tips when no editor is open.
  "workbench.tips.enabled": true,

  // Controls whether sticky scrolling is enabled in trees.
  "workbench.tree.enableStickyScroll": true,

  // Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.
  "workbench.tree.expandMode": "singleClick",

  // Controls tree indentation in pixels.
  "workbench.tree.indent": 8,

  // Controls whether the tree should render indent guides.
  "workbench.tree.renderIndentGuides": "onHover",

  // Controls the number of sticky elements displayed in the tree when `workbench.tree.enableStickyScroll` is enabled.
  "workbench.tree.stickyScrollMaxItemCount": 7,

  // When enabled, trusted domain prompts will appear when opening links in trusted workspaces.
  "workbench.trustedDomains.promptInTrustedWorkspace": false,

  // Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
  "workbench.view.alwaysShowHeaderActions": false,

  // Deprecated, use the global `workbench.reduceMotion`.
  // When enabled, reduce motion in welcome page.
  "workbench.welcomePage.preferReducedMotion": false,

  // When enabled, an extension's walkthrough will open upon install of the extension.
  "workbench.welcomePage.walkthroughs.openOnInstall": true,

  // If enabled, will automatically select a color theme based on the system color mode. If the system color mode is dark, `workbench.preferredDarkColorTheme#` is used, else `#workbench.preferredLightColorTheme`.
  "window.autoDetectColorScheme": false,

  // If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by `workbench.preferredHighContrastColorTheme#` and `#workbench.preferredHighContrastLightColorTheme`.
  "window.autoDetectHighContrast": true,

  // If enabled, clicking on an inactive window will both activate the window and trigger the element under the mouse if it is clickable. If disabled, clicking anywhere on an inactive window will activate it only and a second click is required on the element.
  "window.clickThroughInactive": true,

  // Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
  "window.closeWhenEmpty": false,

  // Show command launcher together with the window title. This setting only has an effect when `window.customTitleBarVisibility` is not set to `never`.
  "window.commandCenter": true,

  // Controls whether to show a confirmation dialog before closing a window or quitting the application.
  //  - always: Always ask for confirmation.
  //  - keyboardOnly: Only ask for confirmation if a keybinding was used.
  //  - never: Never explicitly ask for confirmation.
  "window.confirmBeforeClose": "never",

  // Controls whether a confirmation dialog shows asking to save or discard an opened untitled workspace in the window when switching to another workspace. Disabling the confirmation dialog will always discard the untitled workspace.
  "window.confirmSaveUntitledWorkspace": true,

  // Adjust when the custom title bar should be shown. The custom title bar can be hidden when in full screen mode with `windowed`. The custom title bar can only be hidden in none full screen mode with `never` when `window.titleBarStyle` is set to `native`.
  //  - auto: Automatically changes custom title bar visibility.
  //  - windowed: Hide custom titlebar in full screen. When not in full screen, automatically change custom title bar visibility.
  //  - never: Hide custom titlebar when `window.titleBarStyle` is set to `native`.
  "window.customTitleBarVisibility": "auto",

  // Adjust the appearance of dialog windows.
  "window.dialogStyle": "native",

  // If enabled, this setting will close the window when the application icon in the title bar is double-clicked. The window will not be able to be dragged by the icon. This setting is effective only if `window.titleBarStyle` is set to `custom`.
  "window.doubleClickIconToClose": false,

  // Controls if native full-screen should be used on macOS. Disable this option to prevent macOS from creating a new space when going full-screen.
  "window.nativeFullScreen": true,

  // Enables macOS Sierra window tabs. Note that changes require a full restart to apply and that native tabs will disable a custom title bar style if configured.
  "window.nativeTabs": false,

  // Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
  //  - default: Open new windows in the center of the screen.
  //  - inherit: Open new windows with same dimension as last active one.
  //  - offset: Open new windows with same dimension as last active one with an offset position.
  //  - maximized: Open new windows maximized.
  //  - fullscreen: Open new windows in full screen mode.
  "window.newWindowDimensions": "default",

  // Specifies the profile to use when opening a new window. If a profile name is provided, the new window will use that profile. If no profile name is provided, the new window will use the profile of the active window or the default profile if no active window exists.
  "window.newWindowProfile": null,

  // Controls whether files should open in a new window when using a command line or file dialog.
  // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
  //  - on: Files will open in a new window.
  //  - off: Files will open in the window with the files' folder open or the last active window.
  //  - default: Files will open in the window with the files' folder open or the last active window unless opened via the Dock or from Finder.
  "window.openFilesInNewWindow": "off",

  // Controls whether folders should open in a new window or replace the last active window.
  // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
  //  - on: Folders will open in a new window.
  //  - off: Folders will replace the last active window.
  //  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
  "window.openFoldersInNewWindow": "default",

  // Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
  // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
  //  - on: Open a new empty window.
  //  - off: Focus the last active running instance.
  "window.openWithoutArgumentsInNewWindow": "off",

  // Controls whether a window should restore to full screen mode if it was exited in full screen mode.
  "window.restoreFullscreen": false,

  // Controls how windows and editors within are being restored when opening.
  //  - preserve: Always reopen all windows. If a folder or workspace is opened (e.g. from the command line) it opens as a new window unless it was opened before. If files are opened they will open in one of the restored windows together with editors that were previously opened.
  //  - all: Reopen all windows unless a folder, workspace or file is opened (e.g. from the command line). If a file is opened, it will replace any of the editors that were previously opened in a window.
  //  - folders: Reopen all windows that had folders or workspaces opened unless a folder, workspace or file is opened (e.g. from the command line). If a file is opened, it will replace any of the editors that were previously opened in a window.
  //  - one: Reopen the last active window unless a folder, workspace or file is opened (e.g. from the command line). If a file is opened, it will replace any of the editors that were previously opened in a window.
  //  - none: Never reopen a window. Unless a folder or workspace is opened (e.g. from the command line), an empty window will appear.
  "window.restoreWindows": "all",

  // Controls the window title based on the current context such as the opened workspace or active editor. Variables are substituted based on the context:
  // - `${activeEditorShort}`: the file name (e.g. myFile.txt).
  // - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
  // - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
  // - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
  // - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
  // - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
  // - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
  // - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
  // - `${rootName}`: name of the workspace with optional remote name and workspace indicator if applicable (e.g. myFolder, myRemoteFolder [SSH] or myWorkspace (Workspace)).
  // - `${rootNameShort}`: shortened name of the workspace without suffixes (e.g. myFolder, myRemoteFolder or myWorkspace).
  // - `${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).
  // - `${profileName}`: name of the profile in which the workspace is opened (e.g. Data Science (Profile)). Ignored if default profile is used.
  // - `${appName}`: e.g. VS Code.
  // - `${remoteName}`: e.g. SSH
  // - `${dirty}`: an indicator for when the active editor has unsaved changes.
  // - `${focusedView}`: the name of the view that is currently focused.
  // - `${activeRepositoryName}`: the name of the active repository (e.g. vscode).
  // - `${activeRepositoryBranchName}`: the name of the active branch in the active repository (e.g. main).
  // - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
  "window.title": "${activeEditorShort}${separator}${rootName}${separator}${profileName}",

  // Adjust the appearance of the window title bar to be native by the OS or custom. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.
  "window.titleBarStyle": "custom",

  // Separator used by `window.title`.
  "window.titleSeparator": " — ",

  // Adjust the default zoom level for all windows. Each increment above `0` (e.g. `1`) or below (e.g. `-1`) represents zooming `20%` larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity. See `window.zoomPerWindow` for configuring if the 'Zoom In' and 'Zoom Out' commands apply the zoom level to all windows or only the active window.
  "window.zoomLevel": 0,

  // Controls if the 'Zoom In' and 'Zoom Out' commands apply the zoom level to all windows or only the active window. See `window.zoomLevel` for configuring a default zoom level for all windows.
  "window.zoomPerWindow": true,

  // Configure [glob patterns](https://aka.ms/vscode-glob-patterns) of file associations to languages (for example `"*.extension": "html"`). Patterns will match on the absolute path of a file if they contain a path separator and will match on the name of the file otherwise. These have precedence over the default associations of the languages installed.
  "files.associations": {},

  // When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only `files.encoding` is respected.
  "files.autoGuessEncoding": false,

  // Controls [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors that have unsaved changes.
  //  - off: An editor with changes is never automatically saved.
  //  - afterDelay: An editor with changes is automatically saved after the configured `files.autoSaveDelay`.
  //  - onFocusChange: An editor with changes is automatically saved when the editor loses focus.
  //  - onWindowChange: An editor with changes is automatically saved when the window loses focus.
  "files.autoSave": "off",

  // Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
  "files.autoSaveDelay": 1000,

  // When enabled, will limit [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors to files that have no errors reported in them at the time the auto save is triggered. Only applies when `files.autoSave` is enabled.
  "files.autoSaveWhenNoErrors": false,

  // When enabled, will limit [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors to files that are inside the opened workspace. Only applies when `files.autoSave` is enabled.
  "files.autoSaveWorkspaceFilesOnly": false,

  // The default language identifier that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language identifier of the currently active text editor if any.
  "files.defaultLanguage": "",

  // Default path for file dialogs, overriding user's home path. Only used in the absence of a context-specific path, such as most recently opened file or folder.
  "files.dialog.defaultPath": "",

  // Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
  "files.enableTrash": true,

  // The default character set encoding to use when reading and writing files. This setting can also be configured per language.
  //  - utf8: UTF-8
  //  - utf8bom: UTF-8 with BOM
  //  - utf16le: UTF-16 LE
  //  - utf16be: UTF-16 BE
  //  - windows1252: Western (Windows 1252)
  //  - iso88591: Western (ISO 8859-1)
  //  - iso88593: Western (ISO 8859-3)
  //  - iso885915: Western (ISO 8859-15)
  //  - macroman: Western (Mac Roman)
  //  - cp437: DOS (CP 437)
  //  - windows1256: Arabic (Windows 1256)
  //  - iso88596: Arabic (ISO 8859-6)
  //  - windows1257: Baltic (Windows 1257)
  //  - iso88594: Baltic (ISO 8859-4)
  //  - iso885914: Celtic (ISO 8859-14)
  //  - windows1250: Central European (Windows 1250)
  //  - iso88592: Central European (ISO 8859-2)
  //  - cp852: Central European (CP 852)
  //  - windows1251: Cyrillic (Windows 1251)
  //  - cp866: Cyrillic (CP 866)
  //  - iso88595: Cyrillic (ISO 8859-5)
  //  - koi8r: Cyrillic (KOI8-R)
  //  - koi8u: Cyrillic (KOI8-U)
  //  - iso885913: Estonian (ISO 8859-13)
  //  - windows1253: Greek (Windows 1253)
  //  - iso88597: Greek (ISO 8859-7)
  //  - windows1255: Hebrew (Windows 1255)
  //  - iso88598: Hebrew (ISO 8859-8)
  //  - iso885910: Nordic (ISO 8859-10)
  //  - iso885916: Romanian (ISO 8859-16)
  //  - windows1254: Turkish (Windows 1254)
  //  - iso88599: Turkish (ISO 8859-9)
  //  - windows1258: Vietnamese (Windows 1258)
  //  - gbk: Simplified Chinese (GBK)
  //  - gb18030: Simplified Chinese (GB18030)
  //  - cp950: Traditional Chinese (Big5)
  //  - big5hkscs: Traditional Chinese (Big5-HKSCS)
  //  - shiftjis: Japanese (Shift JIS)
  //  - eucjp: Japanese (EUC-JP)
  //  - euckr: Korean (EUC-KR)
  //  - windows874: Thai (Windows 874)
  //  - iso885911: Latin/Thai (ISO 8859-11)
  //  - koi8ru: Cyrillic (KOI8-RU)
  //  - koi8t: Tajik (KOI8-T)
  //  - gb2312: Simplified Chinese (GB 2312)
  //  - cp865: Nordic DOS (CP 865)
  //  - cp850: Western European DOS (CP 850)
  "files.encoding": "utf8",

  // The default end of line character.
  //  - \n: LF
  //  - \r\n: CRLF
  //  - auto: Uses operating system specific end of line character.
  "files.eol": "auto",

  // Configure [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files and folders. For example, the File Explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude#` setting to define search-specific excludes. Refer to the `#explorer.excludeGitIgnore` setting for ignoring files based on your `.gitignore`.
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true,
    "**/Thumbs.db": true
  },

  // [Hot Exit](https://aka.ms/vscode-hot-exit) controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
  //  - off: Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.
  //  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
  //  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
  "files.hotExit": "onExit",

  // When enabled, insert a final new line at the end of the file when saving it.
  "files.insertFinalNewline": false,

  // Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.
  "files.participants.timeout": 60000,

  // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to exclude from being marked as read-only if they match as a result of the `files.readonlyInclude` setting. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. Files from readonly file system providers will always be read-only independent of this setting.
  "files.readonlyExclude": {},

  // Marks files as read-only when their file permissions indicate as such. This can be overridden via `files.readonlyInclude#` and `#files.readonlyExclude` settings.
  "files.readonlyFromPermissions": false,

  // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to mark as read-only. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. You can exclude matching paths via the `files.readonlyExclude` setting. Files from readonly file system providers will always be read-only independent of this setting.
  "files.readonlyInclude": {},

  // Controls if files that were part of a refactoring are saved automatically
  "files.refactoring.autoSave": true,

  // Restore the undo stack when a file is reopened.
  "files.restoreUndoStack": true,

  // A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
  //  - askUser: Will refuse to save and ask for resolving the save conflict manually.
  //  - overwriteFileOnDisk: Will resolve the save conflict by overwriting the file on disk with the changes in the editor.
  "files.saveConflictResolution": "askUser",

  // Enables the simple file dialog for opening and saving files and folders. The simple file dialog replaces the system file dialog when enabled.
  "files.simpleDialog.enable": false,

  // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
  "files.trimFinalNewlines": false,

  // When enabled, will trim trailing whitespace when saving a file.
  "files.trimTrailingWhitespace": false,

  // When enabled, trailing whitespace will be removed from multiline strings and regexes will be removed on save or when executing 'editor.action.trimTrailingWhitespace'. This can cause whitespace to not be trimmed from lines when there isn't up-to-date token information.
  "files.trimTrailingWhitespaceInRegexAndStrings": true,

  // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to exclude from file watching. Paths can either be relative to the watched folder or absolute. Glob patterns are matched relative from the watched folder. When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders).
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/*/**": true,
    "**/.hg/store/**": true
  },

  // Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace.
  "files.watcherInclude": [],

  // Controls the font size (in pixels) of the screencast mode keyboard.
  "screencastMode.fontSize": 56,

  // Options for customizing the keyboard overlay in screencast mode.
  "screencastMode.keyboardOptions": {
    "showKeys": true,
    "showKeybindings": true,
    "showCommands": true,
    "showCommandGroups": false,
    "showSingleEditorCursorMoves": true
  },

  // Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.
  "screencastMode.keyboardOverlayTimeout": 800,

  // Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.
  "screencastMode.mouseIndicatorColor": "#FF0000",

  // Controls the size (in pixels) of the mouse indicator in screencast mode.
  "screencastMode.mouseIndicatorSize": 20,

  // Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
  "screencastMode.verticalOffset": 20,

  // Controls whether turning on Zen Mode also centers the layout.
  "zenMode.centerLayout": true,

  // Controls whether turning on Zen Mode also puts the workbench into full screen mode.
  "zenMode.fullScreen": true,

  // Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.
  "zenMode.hideActivityBar": true,

  // Controls whether turning on Zen Mode also hides the editor line numbers.
  "zenMode.hideLineNumbers": true,

  // Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
  "zenMode.hideStatusBar": true,

  // Controls whether a window should restore to Zen Mode if it was exited in Zen Mode.
  "zenMode.restore": true,

  // Controls whether turning on Zen Mode should show multiple editor tabs, a single editor tab, or hide the editor title area completely.
  //  - multiple: Each editor is displayed as a tab in the editor title area.
  //  - single: The active editor is displayed as a single large tab in the editor title area.
  //  - none: The editor title area is not displayed.
  "zenMode.showTabs": "multiple",

  // Controls whether notifications do not disturb mode should be enabled while in Zen Mode. If true, only error notifications will pop out.
  "zenMode.silentNotifications": true,

  // Controls whether the Explorer should automatically reveal and select files when opening them.
  //  - true: Files will be revealed and selected.
  //  - false: Files will not be revealed and selected.
  //  - focusNoScroll: Files will not be scrolled into view, but will still be focused.
  "explorer.autoReveal": true,

  // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files and folders from being revealed and selected in the Explorer when they are opened. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths.
  "explorer.autoRevealExclude": {
    "**/node_modules": true,
    "**/bower_components": true
  },

  // Controls whether the Explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
  "explorer.compactFolders": true,

  // Controls whether the Explorer should ask for confirmation when deleting a file via the trash.
  "explorer.confirmDelete": true,

  // Controls whether the Explorer should ask for confirmation to move files and folders via drag and drop.
  "explorer.confirmDragAndDrop": true,

  // Controls whether the Explorer should ask for confirmation when pasting native files and folders.
  "explorer.confirmPasteNative": true,

  // Controls whether the Explorer should ask for confirmation when undoing.
  //  - verbose: Explorer will prompt before all undo operations.
  //  - default: Explorer will prompt before destructive undo operations.
  //  - light: Explorer will not prompt before undo operations when focused.
  "explorer.confirmUndo": "default",

  // The path separation character used when copying relative file paths.
  //  - /: Use slash as path separation character.
  //  - \: Use backslash as path separation character.
  //  - auto: Uses operating system specific path separation character.
  "explorer.copyRelativePathSeparator": "auto",

  // Controls whether file decorations should use badges.
  "explorer.decorations.badges": true,

  // Controls whether file decorations should use colors.
  "explorer.decorations.colors": true,

  // Controls whether the Explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the Explorer.
  "explorer.enableDragAndDrop": true,

  // Controls whether the Explorer should support undoing file and folder operations.
  "explorer.enableUndo": true,

  // Controls whether entries in .gitignore should be parsed and excluded from the Explorer. Similar to `files.exclude`.
  "explorer.excludeGitIgnore": false,

  // Controls whether the Explorer should expand multi-root workspaces containing only one folder during initialization
  "explorer.expandSingleFolderWorkspaces": true,

  // Controls whether file nesting is enabled in the Explorer. File nesting allows for related files in a directory to be visually grouped together under a single parent file.
  "explorer.fileNesting.enabled": false,

  // Controls whether file nests are automatically expanded. `explorer.fileNesting.enabled` must be set for this to take effect.
  "explorer.fileNesting.expand": true,

  // Controls nesting of files in the Explorer. `explorer.fileNesting.enabled` must be set for this to take effect. Each __Item__ represents a parent pattern and may contain a single `*` character that matches any string. Each __Value__ represents a comma separated list of the child patterns that should be shown nested under a given parent. Child patterns may contain several special tokens:
  // - `${capture}`: Matches the resolved value of the `*` from the parent pattern
  // - `${basename}`: Matches the parent file's basename, the `file` in `file.ts`
  // - `${extname}`: Matches the parent file's extension, the `ts` in `file.ts`
  // - `${dirname}`: Matches the parent file's directory name, the `src` in `src/file.ts`
  // - `*`:  Matches any string, may only be used once per child pattern
  "explorer.fileNesting.patterns": {
    "*.ts": "${capture}.js",
    "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
    "*.jsx": "${capture}.js",
    "*.tsx": "${capture}.ts",
    "tsconfig.json": "tsconfig.*.json",
    "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, bun.lockb"
  },

  // Controls which naming strategy to use when giving a new name to a duplicated Explorer item on paste.
  //  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number.
  //  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number.
  //  - disabled: Disables incremental naming. If two files with the same name exist you will be prompted to overwrite the existing file.
  "explorer.incrementalNaming": "simple",

  // The minimum number of editor slots pre-allocated in the Open Editors pane. If set to 0 the Open Editors pane will dynamically resize based on the number of editors.
  "explorer.openEditors.minVisible": 0,

  // Controls the sorting order of editors in the Open Editors pane.
  //  - editorOrder: Editors are ordered in the same order editor tabs are shown.
  //  - alphabetical: Editors are ordered alphabetically by tab name inside each editor group.
  //  - fullPath: Editors are ordered alphabetically by full path inside each editor group.
  "explorer.openEditors.sortOrder": "editorOrder",

  // The initial maximum number of editors shown in the Open Editors pane. Exceeding this limit will show a scroll bar and allow resizing the pane to display more items.
  "explorer.openEditors.visible": 9,

  // Controls the property-based sorting of files and folders in the Explorer. When `explorer.fileNesting.enabled` is enabled, also controls sorting of nested files.
  //  - default: Files and folders are sorted by their names. Folders are displayed before files.
  //  - mixed: Files and folders are sorted by their names. Files are interwoven with folders.
  //  - filesFirst: Files and folders are sorted by their names. Files are displayed before folders.
  //  - type: Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.
  //  - modified: Files and folders are sorted by last modified date in descending order. Folders are displayed before files.
  //  - foldersNestsFiles: Files and folders are sorted by their names. Folders are displayed before files. Files with nested children are displayed before other files.
  "explorer.sortOrder": "default",

  // Controls the lexicographic sorting of file and folder names in the Explorer.
  //  - default: Uppercase and lowercase names are mixed together.
  //  - upper: Uppercase names are grouped together before lowercase names.
  //  - lower: Lowercase names are grouped together before uppercase names.
  //  - unicode: Names are sorted in Unicode order.
  "explorer.sortOrderLexicographicOptions": "default",

  // Specifies how to format absolute dates (e.g. using the `${date}` token) for the inline blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
  "gitlens.currentLine.dateFormat": null,

  // Specifies whether to provide an inline blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window
  "gitlens.currentLine.enabled": true,

  // Specifies the font family of the inline blame annotation
  "gitlens.currentLine.fontFamily": "",

  // Specifies the font size of the inline blame annotation
  "gitlens.currentLine.fontSize": 0,

  // Specifies the font style of the inline blame annotation
  "gitlens.currentLine.fontStyle": "normal",

  // Specifies the font weight of the inline blame annotation
  "gitlens.currentLine.fontWeight": "normal",

  // Specifies the format of the inline blame annotation. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting
  "gitlens.currentLine.format": "${author, }${agoOrDate}${' via 'pullRequest}${ • message|50?}",

  // Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the inline blame annotation. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.currentLine.pullRequests.enabled": true,

  // Specifies whether the inline blame annotation can be scrolled into view when it is outside the viewport. **NOTE**: Setting this to `false` will inhibit the hovers from showing over the annotation; Set `gitlens.hovers.currentLine.over` to `line` to enable the hovers to show anywhere over the line.
  "gitlens.currentLine.scrollable": true,

  // Specifies the uncommitted changes format of the inline blame annotation. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting.
  //
  // **NOTE**: Setting this to an empty string will disable inline blame annotations for uncommitted changes.
  "gitlens.currentLine.uncommittedChangesFormat": null,

  // Specifies the command to be executed when an _authors_ CodeLens is clicked
  //  - false: Disables click interaction
  //  - gitlens.toggleFileBlame: Toggles file blame
  //  - gitlens.toggleFileHeatmap: Toggles file heatmap
  //  - gitlens.toggleFileChanges: Toggles file changes since before the commit
  //  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
  //  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
  //  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
  //  - gitlens.showCommitsInView: Searches for commits within the range
  //  - gitlens.showQuickCommitDetails: Shows an Inspect quick pick menu
  //  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
  //  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
  //  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
  //  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
  //  - gitlens.copyRemoteCommitUrl: Copies the remote commit URL to the clipboard (when available)
  //  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
  //  - gitlens.copyRemoteFileUrl: Copies the remote file URL to the clipboard (when available)
  "gitlens.codeLens.authors.command": "gitlens.toggleFileBlame",

  // Specifies whether to provide an _authors_ CodeLens, showing number of authors of the file or code block and the most prominent author (if there is more than one)
  "gitlens.codeLens.authors.enabled": true,

  // Specifies how to format absolute dates in the Git CodeLens. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
  "gitlens.codeLens.dateFormat": null,

  // Specifies whether to provide any Git CodeLens, by default. Use the `Toggle Git CodeLens` command (`gitlens.toggleCodeLens`) to toggle the Git CodeLens on and off for the current window
  "gitlens.codeLens.enabled": true,

  // Specifies whether to provide any Git CodeLens on symbols that span only a single line
  "gitlens.codeLens.includeSingleLineSymbols": false,

  // Specifies the command to be executed when a _recent change_ CodeLens is clicked
  //  - false: Disables click interaction
  //  - gitlens.toggleFileBlame: Toggles file blame
  //  - gitlens.toggleFileHeatmap: Toggles file heatmap
  //  - gitlens.toggleFileChanges: Toggles file changes since before the commit
  //  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
  //  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
  //  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
  //  - gitlens.showCommitsInView: Shows the Inspect
  //  - gitlens.showQuickCommitDetails: Shows an Inspect quick pick menu
  //  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
  //  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
  //  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
  //  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
  //  - gitlens.copyRemoteCommitUrl: Copies the remote commit URL to the clipboard (when available)
  //  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
  //  - gitlens.copyRemoteFileUrl: Copies the remote file URL to the clipboard (when available)
  "gitlens.codeLens.recentChange.command": "gitlens.showQuickCommitFileDetails",

  // Specifies whether to provide a _recent change_ CodeLens, showing the author and date of the most recent commit for the file or code block
  "gitlens.codeLens.recentChange.enabled": true,

  // Specifies where Git CodeLens will be shown in the document
  //  - document: Adds CodeLens at the top of the document
  //  - containers: Adds CodeLens at the start of container-like symbols (modules, classes, interfaces, etc)
  //  - blocks: Adds CodeLens at the start of block-like symbols (functions, methods, etc) lines
  "gitlens.codeLens.scopes": ["document", "containers"],

  // Deprecated. Use the per-language `gitlens.codeLens.scopes#` and `#gitlens.codeLens.symbolScopes` settings instead
  //
  "gitlens.codeLens.scopesByLanguage": null,

  // Specifies a set of document symbols where Git CodeLens will or will not be shown in the document. Prefix with `!` to avoid providing a Git CodeLens for the symbol. Must be a member of `SymbolKind`
  "gitlens.codeLens.symbolScopes": [],

  // Specifies the string to be shown in place of the _authors_ CodeLens when there are unsaved changes
  "gitlens.strings.codeLens.unsavedChanges.authorsOnly": "$(ellipsis)",

  // Specifies the string to be shown in place of both the _recent change_ and _authors_ CodeLens when there are unsaved changes
  "gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": "$(ellipsis)",

  // Specifies the string to be shown in place of the _recent change_ CodeLens when there are unsaved changes
  "gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": "$(ellipsis)",

  // Specifies the blame alignment in the status bar
  //  - left: Aligns to the left
  //  - right: Aligns to the right
  "gitlens.statusBar.alignment": "right",

  // Specifies the command to be executed when the blame status bar item is clicked
  //  - gitlens.toggleFileBlame: Toggles file blame
  //  - gitlens.toggleFileHeatmap: Toggles file heatmap
  //  - gitlens.toggleFileChanges: Toggles file changes since before the commit
  //  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
  //  - gitlens.toggleCodeLens: Toggles Git CodeLens
  //  - gitlens.diffWithPrevious: Compares the current line commit with the previous
  //  - gitlens.diffWithWorking: Compares the current line commit with the working tree
  //  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
  //  - gitlens.showCommitsInView: Shows the Inspect
  //  - gitlens.showQuickCommitDetails: Shows an Inspect quick pick menu
  //  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
  //  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
  //  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
  //  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
  //  - gitlens.copyRemoteCommitUrl: Copies the remote commit URL to the clipboard (when available)
  //  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
  //  - gitlens.copyRemoteFileUrl: Copies the remote file URL to the clipboard (when available)
  "gitlens.statusBar.command": "gitlens.showQuickCommitDetails",

  // Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
  "gitlens.statusBar.dateFormat": null,

  // Specifies whether to provide blame information in the status bar
  "gitlens.statusBar.enabled": true,

  // Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.statusBar.dateFormat` setting
  "gitlens.statusBar.format": "${author}, ${agoOrDate}${' via 'pullRequest}",

  // Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the status bar. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.statusBar.pullRequests.enabled": true,

  // Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar "flashing"
  "gitlens.statusBar.reduceFlicker": true,

  // Specifies the format (in markdown) of hover shown over the blame information in the status bar. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.statusBar.tooltipFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}\n\n${commands}",

  // Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations
  "gitlens.hovers.annotations.changes": true,

  // Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations
  "gitlens.hovers.annotations.details": true,

  // Specifies whether to provide any hovers when showing blame annotations
  "gitlens.hovers.annotations.enabled": true,

  // Specifies when to trigger hovers when showing blame annotations
  //  - annotation: Only shown when hovering over the line annotation
  //  - line: Shown when hovering anywhere over the line
  "gitlens.hovers.annotations.over": "line",

  // Specifies whether to automatically link external resources in commit messages
  "gitlens.hovers.autolinks.enabled": true,

  // Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.hovers.autolinks.enhanced": true,

  // Specifies whether to show avatar images in hovers
  "gitlens.hovers.avatars": true,

  // Specifies the size of the avatar images in hovers
  "gitlens.hovers.avatarSize": 32,

  // Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover
  //  - line: Shows only the changes to the line
  //  - hunk: Shows the set of related changes
  "gitlens.hovers.changesDiff": "line",

  // Specifies whether to provide a _changes (diff)_ hover for the current line
  "gitlens.hovers.currentLine.changes": true,

  // Specifies whether to provide a _commit details_ hover for the current line
  "gitlens.hovers.currentLine.details": true,

  // Specifies whether to provide any hovers for the current line
  "gitlens.hovers.currentLine.enabled": true,

  // Specifies when to trigger hovers for the current line
  //  - annotation: Only shown when hovering over the line annotation
  //  - line: Shown when hovering anywhere over the line
  "gitlens.hovers.currentLine.over": "annotation",

  // Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.hovers.detailsMarkdownFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}\n\n${commands}",

  // Specifies whether to provide any hovers
  "gitlens.hovers.enabled": true,

  // Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the hovers. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.hovers.pullRequests.enabled": true,

  // Controls the positioning of the actionbar on rows in the search view.
  //  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
  //  - right: Always position the actionbar to the right.
  "search.actionsPosition": "right",

  // Controls whether the search results will be collapsed or expanded.
  //  - auto: Files with less than 10 results are expanded. Others are collapsed.
  //  - alwaysCollapse
  //  - alwaysExpand
  "search.collapseResults": "alwaysExpand",

  // Controls whether search file decorations should use badges.
  "search.decorations.badges": true,

  // Controls whether search file decorations should use colors.
  "search.decorations.colors": true,

  // Controls the default search result view mode.
  //  - tree: Shows search results as a tree.
  //  - list: Shows search results as a list.
  "search.defaultViewMode": "list",

  // Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders in fulltext searches and file search in quick open. To exclude files from the recently opened list in quick open, patterns must be absolute (for example `**/node_modules/**`). Inherits all glob patterns from the `files.exclude` setting.
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true,
    "**/*.code-search": true
  },

  // Show notebook editor rich content results for closed notebooks. Please refresh your search results after changing this setting.
  "search.experimental.closedNotebookRichContentResults": false,

  // Controls whether to follow symlinks while searching.
  "search.followSymlinks": true,

  // Controls whether the search view should read or modify the shared find clipboard on macOS.
  "search.globalFindClipboard": false,

  // This setting is deprecated. You can drag the search icon to a new location instead.
  // Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
  "search.location": "sidebar",

  // The search cache is kept in the extension host which never shuts down, so this setting is no longer needed.
  // When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
  "search.maintainFileSearchCache": false,

  // Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.
  "search.maxResults": 20000,

  // Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the search view, or in a search editor.
  //  - view: Search in the search view, either in the panel or side bars.
  //  - reuseEditor: Search in an existing search editor if present, otherwise in a new search editor.
  //  - newEditor: Search in a new search editor.
  "search.mode": "view",

  // Controls whether the last typed input to Quick Search should be restored when opening it the next time.
  "search.quickAccess.preserveInput": false,

  // Controls sorting order of editor history in quick open when filtering.
  //  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
  //  - recency: History entries are sorted by recency. More recently opened entries appear first.
  "search.quickOpen.history.filterSortOrder": "default",

  // Whether to include results from recently opened files in the file results for Quick Open.
  "search.quickOpen.includeHistory": true,

  // Whether to include results from a global symbol search in the file results for Quick Open.
  "search.quickOpen.includeSymbols": false,

  // The default number of surrounding context lines to use when creating new Search Editors. If using `search.searchEditor.reusePriorSearchConfiguration`, this can be set to `null` (empty) to use the prior Search Editor's configuration.
  "search.searchEditor.defaultNumberOfContextLines": 1,

  // Configure effect of double-clicking a result in a search editor.
  //  - selectWord: Double-clicking selects the word under the cursor.
  //  - goToLocation: Double-clicking opens the result in the active editor group.
  //  - openLocationToSide: Double-clicking opens the result in the editor group to the side, creating one if it does not yet exist.
  "search.searchEditor.doubleClickBehaviour": "goToLocation",

  // When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.
  "search.searchEditor.reusePriorSearchConfiguration": false,

  // Configure effect of single-clicking a result in a search editor.
  //  - default: Single-clicking does nothing.
  //  - peekDefinition: Single-clicking opens a Peek Definition window.
  "search.searchEditor.singleClickBehaviour": "default",

  // Search all files as you type.
  "search.searchOnType": true,

  // When `search.searchOnType#` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `#search.searchOnType` is disabled.
  "search.searchOnTypeDebouncePeriod": 300,

  // Update the search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
  "search.seedOnFocus": false,

  // Enable seeding search from the word nearest the cursor when the active editor has no selection.
  "search.seedWithNearestWord": false,

  // Controls whether to show line numbers for search results.
  "search.showLineNumbers": false,

  // Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
  "search.smartCase": false,

  // Controls sorting order of search results.
  //  - default: Results are sorted by folder and file names, in alphabetical order.
  //  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
  //  - type: Results are sorted by file extensions, in alphabetical order.
  //  - modified: Results are sorted by file last modified date, in descending order.
  //  - countDescending: Results are sorted by count per file, in descending order.
  //  - countAscending: Results are sorted by count per file, in ascending order.
  "search.sortOrder": "default",

  // Controls whether to use your global gitignore file (for example, from `$HOME/.config/git/ignore`) when searching for files. Requires `search.useIgnoreFiles` to be enabled.
  "search.useGlobalIgnoreFiles": false,

  // Controls whether to use `.gitignore` and `.ignore` files when searching for files.
  "search.useIgnoreFiles": true,

  // Controls whether to use `.gitignore` and `.ignore` files in parent directories when searching for files. Requires `search.useIgnoreFiles` to be enabled.
  "search.useParentIgnoreFiles": false,

  // Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.
  // Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
  "search.usePCRE2": false,

  // Controls whether to open Replace Preview when selecting or replacing a match.
  "search.useReplacePreview": true,

  // Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
  // This setting is deprecated and now falls back on "search.usePCRE2".
  "search.useRipgrep": true,

  // Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit but before it is saved. Use 0 to specify an infinite wait. Only applies if the file is under the `gitlens.advanced.sizeThresholdAfterEdit`
  "gitlens.advanced.blame.delayAfterEdit": 5000,

  // Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum
  "gitlens.advanced.blame.sizeThresholdAfterEdit": 5000,

  // Specifies whether the file annotations button in the editor title shows a menu or immediately toggles the specified file annotations
  //  - null: Shows a menu to choose which file annotations to toggle
  //  - blame: Toggles file blame annotations
  //  - heatmap: Toggles file heatmap annotations
  //  - changes: Toggles file changes annotations
  "gitlens.fileAnnotations.command": null,

  // Specifies whether pressing the `ESC` key dismisses the active file annotations
  "gitlens.fileAnnotations.dismissOnEscape": true,

  // Specifies whether file annotations will be preserved while editing. Use `gitlens.advanced.blame.delayAfterEdit` to control how long to wait before the annotation will update while the file is still dirty
  "gitlens.fileAnnotations.preserveWhileEditing": true,

  // Specifies whether to show avatar images in the file blame annotations
  "gitlens.blame.avatars": true,

  // Specifies whether to compact (deduplicate) matching adjacent file blame annotations
  "gitlens.blame.compact": true,

  // Specifies how to format absolute dates (e.g. using the `${date}` token) in file blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
  "gitlens.blame.dateFormat": null,

  // Specifies the font family of the file blame annotations
  "gitlens.blame.fontFamily": "",

  // Specifies the font size of the file blame annotations
  "gitlens.blame.fontSize": 0,

  // Specifies the font style of the file blame annotations
  "gitlens.blame.fontStyle": "normal",

  // Specifies the font weight of the file blame annotations
  "gitlens.blame.fontWeight": "normal",

  // Specifies the format of the file blame annotations. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.blame.dateFormat` setting
  "gitlens.blame.format": "${message|50?} ${agoOrDate|14-}",

  // Specifies whether to provide a heatmap indicator in the file blame annotations
  "gitlens.blame.heatmap.enabled": true,

  // Specifies where the heatmap indicators will be shown in the file blame annotations
  //  - left: Adds a heatmap indicator on the left edge of the file blame annotations
  //  - right: Adds a heatmap indicator on the right edge of the file blame annotations
  "gitlens.blame.heatmap.location": "right",

  // Specifies whether to highlight lines associated with the current line
  "gitlens.blame.highlight.enabled": true,

  // Specifies where the associated line highlights will be shown
  //  - gutter: Adds an indicator to the gutter
  //  - line: Adds a full-line highlight background color
  //  - overview: Adds an indicator to the scroll bar
  "gitlens.blame.highlight.locations": ["gutter", "line", "overview"],

  // Specifies whether file blame annotations will be separated by a small gap
  "gitlens.blame.separateLines": true,

  // Specifies how the file blame annotations will be toggled
  //  - file: Toggles each file individually
  //  - window: Toggles the window, i.e. all files at once
  "gitlens.blame.toggleMode": "file",

  // Controls whether experimental loading of CA certificates from the OS should be enabled. This uses a more general approach than the default implemenation.
  "http.experimental.systemCertificatesV2": false,

  // The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.
  "http.proxy": "",

  // The value to send as the `Proxy-Authorization` header for every network request.
  "http.proxyAuthorization": null,

  // Overrides the principal service name for Kerberos authentication with the HTTP proxy. A default based on the proxy hostname is used when this is not set.
  "http.proxyKerberosServicePrincipal": "",

  // Controls whether the proxy server certificate should be verified against the list of supplied CAs.
  "http.proxyStrictSSL": true,

  // Use the proxy support for extensions.
  //  - off: Disable proxy support for extensions.
  //  - on: Enable proxy support for extensions.
  //  - fallback: Enable proxy support for extensions, fall back to request options, when no proxy found.
  //  - override: Enable proxy support for extensions, override request options.
  "http.proxySupport": "override",

  // Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)
  "http.systemCertificates": true,

  // Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.
  "keyboard.dispatch": "code",

  // Enables the macOS touchbar buttons on the keyboard if available.
  "keyboard.touchbar.enabled": true,

  // A set of identifiers for entries in the touchbar that should not show up (for example `workbench.action.navigateBack`).
  "keyboard.touchbar.ignored": [],

  // This setting is deprecated, please use 'update.mode' instead.
  // Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
  "update.channel": "default",

  // Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
  //  - none: Disable updates.
  //  - manual: Disable automatic background update checks. Updates will be available if you manually check for updates.
  //  - start: Check for updates only on startup. Disable automatic background update checks.
  //  - default: Enable automatic update checks. Code will check for updates automatically and periodically.
  "update.mode": "default",

  // Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
  "update.showReleaseNotes": true,

  // Specifies where the indicators of the file changes annotations will be shown
  //  - gutter: Adds an indicator to the gutter
  //  - line: Adds a full-line highlight background color
  //  - overview: Adds an indicator to the scroll bar
  "gitlens.changes.locations": ["gutter", "line", "overview"],

  // Specifies how the file changes annotations will be toggled
  //  - file: Toggles each file individually
  //  - window: Toggles the window, i.e. all files at once
  "gitlens.changes.toggleMode": "file",

  // Specifies the age of the most recent change (in days) after which the file heatmap annotations will be cold rather than hot (i.e. will use `gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor`)
  "gitlens.heatmap.ageThreshold": 90,

  // Specifies the base color of the file heatmap annotations when the most recent change is older (cold) than the `gitlens.heatmap.ageThreshold` value
  "gitlens.heatmap.coldColor": "#0a60f6",

  // Specifies the whether to fade out older lines
  "gitlens.heatmap.fadeLines": true,

  // Specifies the base color of the file heatmap annotations when the most recent change is newer (hot) than the `gitlens.heatmap.ageThreshold` value
  "gitlens.heatmap.hotColor": "#f66a0a",

  // Specifies where the indicators of the file heatmap annotations will be shown
  //  - gutter: Adds an indicator to the gutter
  //  - line: Adds a full-line highlight background color
  //  - overview: Adds an indicator to the scroll bar
  "gitlens.heatmap.locations": ["gutter", "overview"],

  // Specifies how the file heatmap annotations will be toggled
  //  - file: Toggles each file individually
  //  - window: Toggles the window, i.e. all files at once
  "gitlens.heatmap.toggleMode": "file",

  // Controls whether the comment thread should collapse when the thread is resolved.
  "comments.collapseOnResolve": true,

  // Controls whether the comments widget scrolls or expands.
  "comments.maxHeight": true,

  // This setting is deprecated in favor of `comments.openView`.
  // Controls when the comments panel should open.
  "comments.openPanel": "openOnSessionStartWithComments",

  // Controls when the comments view should open.
  //  - never: The comments view will never be opened.
  //  - file: The comments view will open when a file with comments is active.
  //  - firstFile: If the comments view has not been opened yet during this session it will open the first time during a session that a file with comments is active.
  //  - firstFileUnresolved: If the comments view has not been opened yet during this session and the comment is not resolved, it will open the first time during a session that a file with comments is active.
  "comments.openView": "firstFile",

  // Determines if relative time will be used in comment timestamps (ex. '1 day ago').
  "comments.useRelativeTime": true,

  // Controls the visibility of the comments bar and comment threads in editors that have commenting ranges and comments. Comments are still accessible via the Comments view and will cause commenting to be toggled on in the same way running the command "Comments: Toggle Editor Commenting" toggles comments.
  "comments.visible": true,

  // Allow setting breakpoints in any file.
  "debug.allowBreakpointsEverywhere": false,

  // Automatically show values for variables that are lazily resolved by the debugger, such as getters.
  "debug.autoExpandLazyVariables": false,

  // At the end of a debug session, all the read-only tabs associated with that session will be closed
  "debug.closeReadonlyTabsOnEnd": false,

  // Controls whether to confirm when the window closes if there are active debug sessions.
  //  - never: Never confirm.
  //  - always: Always confirm if there are debug sessions.
  "debug.confirmOnExit": "never",

  // Controls whether suggestions should be accepted on Enter in the Debug Console. Enter is also used to evaluate whatever is typed in the Debug Console.
  "debug.console.acceptSuggestionOnEnter": "off",

  // Controls if the Debug Console should be automatically closed when the debug session ends.
  "debug.console.closeOnEnd": false,

  // Controls if the Debug Console should collapse identical lines and show a number of occurrences with a badge.
  "debug.console.collapseIdenticalLines": true,

  // Controls the font family in the Debug Console.
  "debug.console.fontFamily": "default",

  // Controls the font size in pixels in the Debug Console.
  "debug.console.fontSize": 12,

  // Controls if the Debug Console should suggest previously typed input.
  "debug.console.historySuggestions": true,

  // Controls the line height in pixels in the Debug Console. Use 0 to compute the line height from the font size.
  "debug.console.lineHeight": 0,

  // Controls if the lines should wrap in the Debug Console.
  "debug.console.wordWrap": true,

  // Show Source Code in Disassembly View.
  "debug.disassemblyView.showSourceCode": true,

  // Color of the Status bar when debugger is active.
  "debug.enableStatusBarColor": true,

  // Controls whether the editor should be focused when the debugger breaks.
  "debug.focusEditorOnBreak": true,

  // Controls whether the workbench window should be focused when the debugger breaks.
  "debug.focusWindowOnBreak": true,

  // Controls the action to perform when clicking the editor gutter with the middle mouse button.
  //  - logpoint: Add Logpoint.
  //  - conditionalBreakpoint: Add Conditional Breakpoint.
  //  - triggeredBreakpoint: Add Triggered Breakpoint.
  //  - none: Don't perform any action.
  "debug.gutterMiddleClickAction": "logpoint",

  // Hide 'Start Debugging' control in title bar of 'Run and Debug' view while debugging is active. Only relevant when `debug.toolBarLocation` is not `docked`.
  "debug.hideLauncherWhileDebugging": false,

  // Show variable values inline in editor while debugging.
  //  - on: Always show variable values inline in editor while debugging.
  //  - off: Never show variable values inline in editor while debugging.
  //  - auto: Show variable values inline in editor while debugging when the language supports inline value locations.
  "debug.inlineValues": "auto",

  // Controls when the internal Debug Console should open.
  "debug.internalConsoleOptions": "openOnFirstSessionStart",

  // Controls what to do when errors are encountered after running a preLaunchTask.
  //  - debugAnyway: Ignore task errors and start debugging.
  //  - showErrors: Show the Problems view and do not start debugging.
  //  - prompt: Prompt user.
  //  - abort: Cancel debugging.
  "debug.onTaskErrors": "prompt",

  // Controls when the debug view should open.
  "debug.openDebug": "openOnDebugBreak",

  // Automatically open the explorer view at the end of a debug session.
  "debug.openExplorerOnEnd": false,

  // Controls what editors to save before starting a debug session.
  //  - allEditorsInActiveGroup: Save all editors in the active group before starting a debug session.
  //  - nonUntitledEditorsInActiveGroup: Save all editors in the active group except untitled ones before starting a debug session.
  //  - none: Don't save any editors before starting a debug session.
  "debug.saveBeforeStart": "allEditorsInActiveGroup",

  // Controls whether breakpoints should be shown in the overview ruler.
  "debug.showBreakpointsInOverviewRuler": false,

  // Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.
  "debug.showInlineBreakpointCandidates": true,

  // Controls when the debug Status bar should be visible.
  //  - never: Never show debug in Status bar
  //  - always: Always show debug in Status bar
  //  - onFirstSessionStart: Show debug in Status bar only after debug was started for the first time
  "debug.showInStatusBar": "onFirstSessionStart",

  // Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
  "debug.showSubSessionsInToolBar": false,

  // Before starting a new debug session in an integrated or external terminal, clear the terminal.
  "debug.terminal.clearBeforeReusing": false,

  // Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, `commandCenter` (requires `window.commandCenter`), or `hidden`.
  //  - floating: Show debug toolbar in all views.
  //  - docked: Show debug toolbar only in debug views.
  //  - commandCenter: `(Experimental)` Show debug toolbar in the command center.
  //  - hidden: Do not show debug toolbar.
  "debug.toolBarLocation": "floating",

  // Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
  "launch": {
    "configurations": [],
    "compounds": []
  },

  // Enable/disable autoclosing of HTML tags.
  "html.autoClosingTags": true,

  // Enable/disable auto creation of quotes for HTML attribute assignment. The type of quotes can be configured by `html.completion.attributeDefaultValue`.
  "html.autoCreateQuotes": true,

  // Controls the default value for attributes when completion is accepted.
  //  - doublequotes: Attribute value is set to "".
  //  - singlequotes: Attribute value is set to ''.
  //  - empty: Attribute value is not set.
  "html.completion.attributeDefaultValue": "doublequotes",

  // A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
  //
  // VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
  //
  // The file paths are relative to workspace and only workspace folder settings are considered.
  "html.customData": [],

  // List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
  "html.format.contentUnformatted": "pre,code,textarea",

  // Enable/disable default HTML formatter.
  "html.format.enable": true,

  // List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
  "html.format.extraLiners": "head, body, /html",

  // Format and indent `{{#foo}}` and `{{/foo}}`.
  "html.format.indentHandlebars": false,

  // Indent `<head>` and `<body>` sections.
  "html.format.indentInnerHtml": false,

  // Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
  "html.format.maxPreserveNewLines": null,

  // Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
  "html.format.preserveNewLines": true,

  // Honor django, erb, handlebars and php templating language tags.
  "html.format.templating": false,

  // List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
  "html.format.unformatted": "wbr",

  // Keep text content together between this string.
  "html.format.unformattedContentDelimiter": "",

  // Wrap attributes.
  //  - auto: Wrap attributes only when line length is exceeded.
  //  - force: Wrap each attribute except first.
  //  - force-aligned: Wrap each attribute except first and keep aligned.
  //  - force-expand-multiline: Wrap each attribute.
  //  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
  //  - preserve: Preserve wrapping of attributes.
  //  - preserve-aligned: Preserve wrapping of attributes but align.
  "html.format.wrapAttributes": "auto",

  // Indent wrapped attributes to after N characters. Use `null` to use the default indent size. Ignored if `html.format.wrapAttributes` is set to `aligned`.
  "html.format.wrapAttributesIndentSize": null,

  // Maximum amount of characters per line (0 = disable).
  "html.format.wrapLineLength": 120,

  // Show tag and attribute documentation in hover.
  "html.hover.documentation": true,

  // Show references to MDN in hover.
  "html.hover.references": true,

  // Deprecated in favor of `editor.linkedEditing`
  // Enable/disable mirroring cursor on matching HTML tag.
  "html.mirrorCursorOnMatchingTag": false,

  // Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
  "html.suggest.html5": true,

  // Traces the communication between VS Code and the HTML language server.
  "html.trace.server": "off",

  // Controls whether the built-in HTML language support validates embedded scripts.
  "html.validate.scripts": true,

  // Controls whether the built-in HTML language support validates embedded styles.
  "html.validate.styles": true,

  // The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
  // Enables or disables color decorators
  "json.colorDecorators.enable": true,

  // Enable/disable default JSON formatter
  "json.format.enable": true,

  // Keep all existing new lines when formatting.
  "json.format.keepLines": false,

  // The maximum number of outline symbols and folding regions computed (limited for performance reasons).
  "json.maxItemsComputed": 5000,

  // When enabled, JSON schemas can be fetched from http and https locations.
  "json.schemaDownload.enable": true,

  // Associate schemas to JSON files in the current project.
  "json.schemas": [],

  // Traces the communication between VS Code and the JSON language server.
  "json.trace.server": "off",

  // Enable/disable JSON validation.
  "json.validate.enable": true,

  // Configures the path and file name of files created by copy/paste or drag and drop. This is a map of globs that match against a Markdown document path to the destination path where the new file should be created.
  //
  // The destination path may use the following variables:
  //
  // - `${documentDirName}` — Absolute parent directory path of the Markdown document, e.g. `/Users/me/myProject/docs`.
  // - `${documentRelativeDirName}` — Relative parent directory path of the Markdown document, e.g. `docs`. This is the same as `${documentDirName}` if the file is not part of a workspace.
  // - `${documentFileName}` — The full filename of the Markdown document, e.g. `README.md`.
  // - `${documentBaseName}` — The basename of the Markdown document, e.g. `README`.
  // - `${documentExtName}` — The extension of the Markdown document, e.g. `md`.
  // - `${documentFilePath}` — Absolute path of the Markdown document, e.g. `/Users/me/myProject/docs/README.md`.
  // - `${documentRelativeFilePath}` — Relative path of the Markdown document, e.g. `docs/README.md`. This is the same as `${documentFilePath}` if the file is not part of a workspace.
  // - `${documentWorkspaceFolder}` — The workspace folder for the Markdown document, e.g. `/Users/me/myProject`. This is the same as `${documentDirName}` if the file is not part of a workspace.
  // - `${fileName}` — The file name of the dropped file, e.g. `image.png`.
  // - `${fileExtName}` — The extension of the dropped file, e.g. `png`.
  "markdown.copyFiles.destination": {},

  // Controls if files created by drop or paste should overwrite existing files.
  //  - nameIncrementally: If a file with the same name already exists, append a number to the file name, for example: `image.png` becomes `image-1.png`.
  //  - overwrite: If a file with the same name already exists, overwrite it.
  "markdown.copyFiles.overwriteBehavior": "nameIncrementally",

  // Controls if files outside of the workspace that are dropped into a Markdown editor should be copied into the workspace.
  //
  // Use `markdown.copyFiles.destination` to configure where copied dropped files should be created
  //  - mediaFiles: Try to copy external image and video files into the workspace.
  //  - never: Do not copy external files into the workspace.
  "markdown.editor.drop.copyIntoWorkspace": "mediaFiles",

  // Enable dropping files into a Markdown editor while holding Shift. Requires enabling `editor.dropIntoEditor.enabled`.
  //  - always: Always insert Markdown links.
  //  - smart: Smartly create Markdown links by default when not dropping into a code block or other special element. Use the drop widget to switch between pasting as plain text or as Markdown links.
  //  - never: Never create Markdown links.
  "markdown.editor.drop.enabled": "smart",

  // Snippet used when adding audio to Markdown. This snippet can use the following variables:
  // - `${src}` — The resolved path of the audio  file.
  // - `${title}` — The title used for the audio. A snippet placeholder will automatically be created for this variable.
  "markdown.editor.filePaste.audioSnippet": "<audio controls src=\"${src}\" title=\"${title}\"></audio>",

  // Controls if files outside of the workspace that are pasted into a Markdown editor should be copied into the workspace.
  //
  // Use `markdown.copyFiles.destination` to configure where copied files should be created.
  //  - mediaFiles: Try to copy external image and video files into the workspace.
  //  - never: Do not copy external files into the workspace.
  "markdown.editor.filePaste.copyIntoWorkspace": "mediaFiles",

  // Enable pasting files into a Markdown editor to create Markdown links. Requires enabling `editor.pasteAs.enabled`.
  //  - always: Always insert Markdown links.
  //  - smart: Smartly create Markdown links by default when not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.
  //  - never: Never create Markdown links.
  "markdown.editor.filePaste.enabled": "smart",

  // Snippet used when adding videos to Markdown. This snippet can use the following variables:
  // - `${src}` — The resolved path of the video file.
  // - `${title}` — The title used for the video. A snippet placeholder will automatically be created for this variable.
  "markdown.editor.filePaste.videoSnippet": "<video controls src=\"${src}\" title=\"${title}\"></video>",

  // Controls if Markdown links are created when URLs are pasted into a Markdown editor. Requires enabling `editor.pasteAs.enabled`.
  //  - always: Always insert Markdown links.
  //  - smart: Smartly create Markdown links by default when not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.
  //  - smartWithSelection: Smartly create Markdown links by default when you have selected text and are not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.
  //  - never: Never create Markdown links.
  "markdown.editor.pasteUrlAsFormattedLink.enabled": "smartWithSelection",

  // Enable/disable automatic updating of links in text that is copied and pasted from one Markdown editor to another.
  "markdown.experimental.updateLinksOnPaste": false,

  // Controls where links in Markdown files should be opened.
  //  - currentGroup: Open links in the active editor group.
  //  - beside: Open links beside the active editor.
  "markdown.links.openLocation": "currentGroup",

  // Enable highlighting link occurrences in the current document.
  "markdown.occurrencesHighlight.enabled": false,

  // Controls if file extensions (for example `.md`) are added or not for links to Markdown files. This setting is used when file paths are added by tooling such as path completions or file renames.
  //  - auto: For existing paths, try to maintain the file extension style. For new paths, add file extensions.
  //  - includeExtension: Prefer including the file extension. For example, path completions to a file named `file.md` will insert `file.md`.
  //  - removeExtension: Prefer removing the file extension. For example, path completions to a file named `file.md` will insert `file` without the `.md`.
  "markdown.preferredMdPathExtensionStyle": "auto",

  // Sets how line-breaks are rendered in the Markdown preview. Setting it to `true` creates a `<br>` for newlines inside paragraphs.
  "markdown.preview.breaks": false,

  // Double-click in the Markdown preview to switch to the editor.
  "markdown.preview.doubleClickToSwitchToEditor": true,

  // Controls the font family used in the Markdown preview.
  "markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

  // Controls the font size in pixels used in the Markdown preview.
  "markdown.preview.fontSize": 14,

  // Controls the line height used in the Markdown preview. This number is relative to the font size.
  "markdown.preview.lineHeight": 1.6,

  // Convert URL-like text to links in the Markdown preview.
  "markdown.preview.linkify": true,

  // Mark the current editor selection in the Markdown preview.
  "markdown.preview.markEditorSelection": true,

  // Controls how links to other Markdown files in the Markdown preview should be opened.
  //  - inPreview: Try to open links in the Markdown preview.
  //  - inEditor: Try to open links in the editor.
  "markdown.preview.openMarkdownLinks": "inPreview",

  // When a Markdown preview is scrolled, update the view of the editor.
  "markdown.preview.scrollEditorWithPreview": true,

  // When a Markdown editor is scrolled, update the view of the preview.
  "markdown.preview.scrollPreviewWithEditor": true,

  // Enable some language-neutral replacement and quotes beautification in the Markdown preview.
  "markdown.preview.typographer": false,

  // Controls the logging level of the Markdown language server.
  "markdown.server.log": "off",

  // A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the Explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\' need to be written as '\\'.
  "markdown.styles": [],

  // Enable path suggestions while writing links in Markdown files.
  "markdown.suggest.paths.enabled": true,

  // Enable suggestions for headers in other Markdown files in the current workspace. Accepting one of these suggestions inserts the full path to header in that file, for example: `[link text](/path/to/file.md#header)`.
  //  - never: Disable workspace header suggestions.
  //  - onDoubleHash: Enable workspace header suggestions after typing `#` in a path, for example: `[link text](#`.
  //  - onSingleOrDoubleHash: Enable workspace header suggestions after typing either `#` or `#` in a path, for example: `[link text](#` or `[link text](#`.
  "markdown.suggest.paths.includeWorkspaceHeaderCompletions": "onDoubleHash",

  // Enable debug logging for the Markdown extension.
  "markdown.trace.extension": "off",

  // Traces the communication between VS Code and the Markdown language server.
  "markdown.trace.server": "off",

  // Try to update links in Markdown files when a file is renamed/moved in the workspace. Use `markdown.updateLinksOnFileMove.include` to configure which files trigger link updates.
  //  - prompt: Prompt on each file move.
  //  - always: Always update links automatically.
  //  - never: Never try to update link and don't prompt.
  "markdown.updateLinksOnFileMove.enabled": "never",

  // Enable updating links when a directory is moved or renamed in the workspace.
  "markdown.updateLinksOnFileMove.enableForDirectories": true,

  // Glob patterns that specifies files that trigger automatic link updates. See `markdown.updateLinksOnFileMove.enabled` for details about this feature.
  "markdown.updateLinksOnFileMove.include": [
    "**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
    "**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
  ],

  // Validate duplicated definitions in the current file.
  "markdown.validate.duplicateLinkDefinitions.enabled": "warning",

  // Enable all error reporting in Markdown files.
  "markdown.validate.enabled": false,

  // Validate links to other files in Markdown files, for example `[link](/path/to/file.md)`. This checks that the target files exists. Requires enabling `markdown.validate.enabled`.
  "markdown.validate.fileLinks.enabled": "warning",

  // Validate the fragment part of links to headers in other files in Markdown files, for example: `[link](/path/to/file.md#header)`. Inherits the setting value from `markdown.validate.fragmentLinks.enabled` by default.
  "markdown.validate.fileLinks.markdownFragmentLinks": "inherit",

  // Validate fragment links to headers in the current Markdown file, for example: `[link](#header)`. Requires enabling `markdown.validate.enabled`.
  "markdown.validate.fragmentLinks.enabled": "warning",

  // Configure links that should not be validated. For example adding `/about` would not validate the link `[about](/about)`, while the glob `/assets/**/*.svg` would let you skip validation for any link to `.svg` files under the `assets` directory.
  "markdown.validate.ignoredLinks": [],

  // Validate reference links in Markdown files, for example: `[link][ref]`. Requires enabling `markdown.validate.enabled`.
  "markdown.validate.referenceLinks.enabled": "warning",

  // Validate link definitions that are unused in the current file.
  "markdown.validate.unusedLinkDefinitions.enabled": "hint",

  // Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
  "php.suggest.basic": true,

  // Enable/disable built-in PHP validation.
  "php.validate.enable": true,

  // Points to the PHP executable.
  "php.validate.executablePath": null,

  // Whether the linter is run on save or on type.
  "php.validate.run": "onSave",

  // Enable/disable automatic closing of JSX tags.
  "javascript.autoClosingTags": true,

  // Automatically update imports when pasting code. Requires TypeScript 5.5+.
  "javascript.experimental.updateImportsOnPaste": false,

  // Enable/disable default JavaScript formatter.
  "javascript.format.enable": true,

  // Defines space handling after a comma delimiter.
  "javascript.format.insertSpaceAfterCommaDelimiter": true,

  // Defines space handling after the constructor keyword.
  "javascript.format.insertSpaceAfterConstructor": false,

  // Defines space handling after function keyword for anonymous functions.
  "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // Defines space handling after keywords in a control flow statement.
  "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // Defines space handling after opening and before closing empty braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

  // Defines space handling after opening and before closing JSX expression braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // Defines space handling after opening and before closing non-empty braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // Defines space handling after opening and before closing non-empty brackets.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // Defines space handling after opening and before closing non-empty parenthesis.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // Defines space handling after opening and before closing template string braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // Defines space handling after a semicolon in a for statement.
  "javascript.format.insertSpaceAfterSemicolonInForStatements": true,

  // Defines space handling after a binary operator.
  "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // Defines space handling before function argument parentheses.
  "javascript.format.insertSpaceBeforeFunctionParenthesis": false,

  // Defines whether an open brace is put onto a new line for control blocks or not.
  "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // Defines whether an open brace is put onto a new line for functions or not.
  "javascript.format.placeOpenBraceOnNewLineForFunctions": false,

  // Defines handling of optional semicolons.
  //  - ignore: Don't insert or remove any semicolons.
  //  - insert: Insert semicolons at statement ends.
  //  - remove: Remove unnecessary semicolons.
  "javascript.format.semicolons": "ignore",

  // This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.
  // Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "javascript.implicitProjectConfig.checkJs": false,

  // This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.
  // Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "javascript.implicitProjectConfig.experimentalDecorators": false,

  // Enable/disable inlay hints for member values in enum declarations:
  // ```typescript
  //
  // enum MyValue {
  // 	A /* = 0 */;
  // 	B /* = 1 */;
  // }
  //
  // ```
  "javascript.inlayHints.enumMemberValues.enabled": false,

  // Enable/disable inlay hints for implicit return types on function signatures:
  // ```typescript
  //
  // function foo() /* :number */ {
  // 	return Date.now();
  // }
  //
  // ```
  "javascript.inlayHints.functionLikeReturnTypes.enabled": false,

  // Enable/disable inlay hints for parameter names:
  // ```typescript
  //
  // parseInt(/* str: */ '123', /* radix: */ 8)
  //
  // ```
  //  - none: Disable parameter name hints.
  //  - literals: Enable parameter name hints only for literal arguments.
  //  - all: Enable parameter name hints for literal and non-literal arguments.
  "javascript.inlayHints.parameterNames.enabled": "none",

  // Suppress parameter name hints on arguments whose text is identical to the parameter name.
  "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

  // Enable/disable inlay hints for implicit parameter types:
  // ```typescript
  //
  // el.addEventListener('click', e /* :MouseEvent */ => ...)
  //
  // ```
  "javascript.inlayHints.parameterTypes.enabled": false,

  // Enable/disable inlay hints for implicit types on property declarations:
  // ```typescript
  //
  // class Foo {
  // 	prop /* :number */ = Date.now();
  // }
  //
  // ```
  "javascript.inlayHints.propertyDeclarationTypes.enabled": false,

  // Enable/disable inlay hints for implicit variable types:
  // ```typescript
  //
  // const foo /* :number */ = Date.now();
  //
  // ```
  "javascript.inlayHints.variableTypes.enabled": false,

  // Suppress type hints on variables whose name is identical to the type name.
  "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

  // Specify glob patterns of files to exclude from auto imports. Relative paths are resolved relative to the workspace root. Patterns are evaluated using tsconfig.json [`exclude`](https://www.typescriptlang.org/tsconfig#exclude) semantics.
  "javascript.preferences.autoImportFileExcludePatterns": [],

  // Preferred path style for auto imports.
  //  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
  //  - relative: Prefers a relative path to the imported file location.
  //  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
  //  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.
  "javascript.preferences.importModuleSpecifier": "shortest",

  // Preferred path ending for auto imports.
  //  - auto: Use project settings to select a default.
  //  - minimal: Shorten `./component/index.js` to `./component`.
  //  - index: Shorten `./component/index.js` to `./component/index`.
  //  - js: Do not shorten path endings; include the `.js` or `.ts` extension.
  "javascript.preferences.importModuleSpecifierEnding": "auto",

  // Preferred style for JSX attribute completions.
  //  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `javascript.preferences.quoteStyle` to control the type of quotes used for string attributes.
  //  - braces: Insert `={}` after attribute names.
  //  - none: Only insert attribute names.
  "javascript.preferences.jsxAttributeCompletionStyle": "auto",

  // Preferred quote style to use for Quick Fixes.
  //  - auto: Infer quote type from existing code
  //  - single: Always use single quotes: `'`
  //  - double: Always use double quotes: `"`
  "javascript.preferences.quoteStyle": "auto",

  // When on a JSX tag, try to rename the matching tag instead of renaming the symbol. Requires using TypeScript 5.1+ in the workspace.
  "javascript.preferences.renameMatchingJsxTags": true,

  // The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
  // Enable/disable introducing aliases for object shorthand properties during renames.
  "javascript.preferences.renameShorthandProperties": true,

  // Enable/disable introducing aliases for object shorthand properties during renames.
  "javascript.preferences.useAliasesForRenames": true,

  // Makes Go to Definition avoid type declaration files when possible by triggering Go to Source Definition instead. This allows Go to Source Definition to be triggered with the mouse gesture.
  "javascript.preferGoToSourceDefinition": false,

  // Enable/disable references CodeLens in JavaScript files.
  "javascript.referencesCodeLens.enabled": false,

  // Enable/disable references CodeLens on all functions in JavaScript files.
  "javascript.referencesCodeLens.showOnAllFunctions": false,

  // Enable/disable auto import suggestions.
  "javascript.suggest.autoImports": true,

  // Enable/disable snippet completions for class members.
  "javascript.suggest.classMemberSnippets.enabled": true,

  // Complete functions with their parameter signature.
  "javascript.suggest.completeFunctionCalls": false,

  // Enable/disable suggestion to complete JSDoc comments.
  "javascript.suggest.completeJSDocs": true,

  // Enabled/disable autocomplete suggestions.
  "javascript.suggest.enabled": true,

  // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.
  "javascript.suggest.includeAutomaticOptionalChainCompletions": true,

  // Enable/disable auto-import-style completions on partially-typed import statements.
  "javascript.suggest.includeCompletionsForImportStatements": true,

  // Enable/disable generating `@returns` annotations for JSDoc templates.
  "javascript.suggest.jsdoc.generateReturns": true,

  // Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
  "javascript.suggest.names": true,

  // Enable/disable suggestions for paths in import statements and require calls.
  "javascript.suggest.paths": true,

  // Enable/disable suggestion diagnostics for JavaScript files in the editor.
  "javascript.suggestionActions.enabled": true,

  // Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
  //  - prompt: Prompt on each rename.
  //  - always: Always update paths automatically.
  //  - never: Never rename paths and don't prompt.
  "javascript.updateImportsOnFileMove.enabled": "prompt",

  // Enable/disable JavaScript validation.
  "javascript.validate.enable": true,

  // Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "js/ts.implicitProjectConfig.checkJs": false,

  // Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "js/ts.implicitProjectConfig.experimentalDecorators": false,

  // Sets the module system for the program. See more: https://www.typescriptlang.org/tsconfig#module.
  "js/ts.implicitProjectConfig.module": "ESNext",

  // Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "js/ts.implicitProjectConfig.strictFunctionTypes": true,

  // Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "js/ts.implicitProjectConfig.strictNullChecks": true,

  // Set target JavaScript language version for emitted JavaScript and include library declarations. See more: https://www.typescriptlang.org/tsconfig#target.
  "js/ts.implicitProjectConfig.target": "ES2020",

  // Enable/disable automatic closing of JSX tags.
  "typescript.autoClosingTags": true,

  // Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
  "typescript.check.npmIsInstalled": true,

  // Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
  "typescript.disableAutomaticTypeAcquisition": false,

  // Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.
  "typescript.enablePromptUseWorkspaceTsdk": false,

  // Automatically update imports when pasting code. Requires TypeScript 5.5+.
  "typescript.experimental.updateImportsOnPaste": false,

  // Enable/disable default TypeScript formatter.
  "typescript.format.enable": true,

  // Indent case clauses in switch statements. Requires using TypeScript 5.1+ in the workspace.
  "typescript.format.indentSwitchCase": true,

  // Defines space handling after a comma delimiter.
  "typescript.format.insertSpaceAfterCommaDelimiter": true,

  // Defines space handling after the constructor keyword.
  "typescript.format.insertSpaceAfterConstructor": false,

  // Defines space handling after function keyword for anonymous functions.
  "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // Defines space handling after keywords in a control flow statement.
  "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // Defines space handling after opening and before closing empty braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

  // Defines space handling after opening and before closing JSX expression braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // Defines space handling after opening and before closing non-empty braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // Defines space handling after opening and before closing non-empty brackets.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // Defines space handling after opening and before closing non-empty parenthesis.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // Defines space handling after opening and before closing template string braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // Defines space handling after a semicolon in a for statement.
  "typescript.format.insertSpaceAfterSemicolonInForStatements": true,

  // Defines space handling after type assertions in TypeScript.
  "typescript.format.insertSpaceAfterTypeAssertion": false,

  // Defines space handling after a binary operator.
  "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // Defines space handling before function argument parentheses.
  "typescript.format.insertSpaceBeforeFunctionParenthesis": false,

  // Defines whether an open brace is put onto a new line for control blocks or not.
  "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // Defines whether an open brace is put onto a new line for functions or not.
  "typescript.format.placeOpenBraceOnNewLineForFunctions": false,

  // Defines handling of optional semicolons.
  //  - ignore: Don't insert or remove any semicolons.
  //  - insert: Insert semicolons at statement ends.
  //  - remove: Remove unnecessary semicolons.
  "typescript.format.semicolons": "ignore",

  // Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
  "typescript.implementationsCodeLens.enabled": false,

  // Enable/disable implementations CodeLens on interface methods.
  "typescript.implementationsCodeLens.showOnInterfaceMethods": false,

  // Enable/disable inlay hints for member values in enum declarations:
  // ```typescript
  //
  // enum MyValue {
  // 	A /* = 0 */;
  // 	B /* = 1 */;
  // }
  //
  // ```
  "typescript.inlayHints.enumMemberValues.enabled": false,

  // Enable/disable inlay hints for implicit return types on function signatures:
  // ```typescript
  //
  // function foo() /* :number */ {
  // 	return Date.now();
  // }
  //
  // ```
  "typescript.inlayHints.functionLikeReturnTypes.enabled": false,

  // Enable/disable inlay hints for parameter names:
  // ```typescript
  //
  // parseInt(/* str: */ '123', /* radix: */ 8)
  //
  // ```
  //  - none: Disable parameter name hints.
  //  - literals: Enable parameter name hints only for literal arguments.
  //  - all: Enable parameter name hints for literal and non-literal arguments.
  "typescript.inlayHints.parameterNames.enabled": "none",

  // Suppress parameter name hints on arguments whose text is identical to the parameter name.
  "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

  // Enable/disable inlay hints for implicit parameter types:
  // ```typescript
  //
  // el.addEventListener('click', e /* :MouseEvent */ => ...)
  //
  // ```
  "typescript.inlayHints.parameterTypes.enabled": false,

  // Enable/disable inlay hints for implicit types on property declarations:
  // ```typescript
  //
  // class Foo {
  // 	prop /* :number */ = Date.now();
  // }
  //
  // ```
  "typescript.inlayHints.propertyDeclarationTypes.enabled": false,

  // Enable/disable inlay hints for implicit variable types:
  // ```typescript
  //
  // const foo /* :number */ = Date.now();
  //
  // ```
  "typescript.inlayHints.variableTypes.enabled": false,

  // Suppress type hints on variables whose name is identical to the type name.
  "typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

  // Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.
  //  - auto: Use VS Code's configured display language
  //  - de: Deutsch
  //  - es: español
  //  - en: English
  //  - fr: français
  //  - it: italiano
  //  - ja: 日本語
  //  - ko: 한국어
  //  - ru: русский
  //  - zh-CN: 中文(简体)
  //  - zh-TW: 中文(繁體)
  "typescript.locale": "auto",

  // Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
  "typescript.npm": "",

  // Specify glob patterns of files to exclude from auto imports. Relative paths are resolved relative to the workspace root. Patterns are evaluated using tsconfig.json [`exclude`](https://www.typescriptlang.org/tsconfig#exclude) semantics.
  "typescript.preferences.autoImportFileExcludePatterns": [],

  // Preferred path style for auto imports.
  //  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
  //  - relative: Prefers a relative path to the imported file location.
  //  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
  //  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.
  "typescript.preferences.importModuleSpecifier": "shortest",

  // Preferred path ending for auto imports.
  //  - auto: Use project settings to select a default.
  //  - minimal: Shorten `./component/index.js` to `./component`.
  //  - index: Shorten `./component/index.js` to `./component/index`.
  //  - js: Do not shorten path endings; include the `.js` or `.ts` extension.
  "typescript.preferences.importModuleSpecifierEnding": "auto",

  // Enable/disable searching `package.json` dependencies for available auto imports.
  //  - auto: Search dependencies based on estimated performance impact.
  //  - on: Always search dependencies.
  //  - off: Never search dependencies.
  "typescript.preferences.includePackageJsonAutoImports": "auto",

  // Preferred style for JSX attribute completions.
  //  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `typescript.preferences.quoteStyle` to control the type of quotes used for string attributes.
  //  - braces: Insert `={}` after attribute names.
  //  - none: Only insert attribute names.
  "typescript.preferences.jsxAttributeCompletionStyle": "auto",

  // Include the `type` keyword in auto-imports whenever possible. Requires using TypeScript 5.3+ in the workspace.
  "typescript.preferences.preferTypeOnlyAutoImports": false,

  // Preferred quote style to use for Quick Fixes.
  //  - auto: Infer quote type from existing code
  //  - single: Always use single quotes: `'`
  //  - double: Always use double quotes: `"`
  "typescript.preferences.quoteStyle": "auto",

  // When on a JSX tag, try to rename the matching tag instead of renaming the symbol. Requires using TypeScript 5.1+ in the workspace.
  "typescript.preferences.renameMatchingJsxTags": true,

  // The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
  // Enable/disable introducing aliases for object shorthand properties during renames.
  "typescript.preferences.renameShorthandProperties": true,

  // Enable/disable introducing aliases for object shorthand properties during renames.
  "typescript.preferences.useAliasesForRenames": true,

  // Makes Go to Definition avoid type declaration files when possible by triggering Go to Source Definition instead. This allows Go to Source Definition to be triggered with the mouse gesture.
  "typescript.preferGoToSourceDefinition": false,

  // Enable/disable references CodeLens in TypeScript files.
  "typescript.referencesCodeLens.enabled": false,

  // Enable/disable references CodeLens on all functions in TypeScript files.
  "typescript.referencesCodeLens.showOnAllFunctions": false,

  // Report style checks as warnings.
  "typescript.reportStyleChecksAsWarnings": true,

  // Enable/disable auto import suggestions.
  "typescript.suggest.autoImports": true,

  // Enable/disable snippet completions for class members.
  "typescript.suggest.classMemberSnippets.enabled": true,

  // Complete functions with their parameter signature.
  "typescript.suggest.completeFunctionCalls": false,

  // Enable/disable suggestion to complete JSDoc comments.
  "typescript.suggest.completeJSDocs": true,

  // Enabled/disable autocomplete suggestions.
  "typescript.suggest.enabled": true,

  // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.
  "typescript.suggest.includeAutomaticOptionalChainCompletions": true,

  // Enable/disable auto-import-style completions on partially-typed import statements.
  "typescript.suggest.includeCompletionsForImportStatements": true,

  // Enable/disable generating `@returns` annotations for JSDoc templates.
  "typescript.suggest.jsdoc.generateReturns": true,

  // Enable/disable snippet completions for methods in object literals.
  "typescript.suggest.objectLiteralMethodSnippets.enabled": true,

  // Enable/disable suggestions for paths in import statements and require calls.
  "typescript.suggest.paths": true,

  // Enable/disable suggestion diagnostics for TypeScript files in the editor.
  "typescript.suggestionActions.enabled": true,

  // Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
  "typescript.surveys.enabled": true,

  // Controls auto detection of tsc tasks.
  //  - on: Create both build and watch tasks.
  //  - off: Disable this feature.
  //  - build: Only create single run compile tasks.
  //  - watch: Only create compile and watch tasks.
  "typescript.tsc.autoDetect": "on",

  // Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.
  //
  // - When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
  // - When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.
  //
  // See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.
  "typescript.tsdk": "",

  // Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
  "typescript.tsserver.enableTracing": false,

  // (Experimental) Enables project wide error reporting.
  "typescript.tsserver.experimental.enableProjectDiagnostics": false,

  // Use VS Code's file watchers instead of TypeScript's. Requires using TypeScript 5.4+ in the workspace.
  "typescript.tsserver.experimental.useVsCodeWatcher": true,

  // Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
  "typescript.tsserver.log": "off",

  // The maximum amount of memory (in MB) to allocate to the TypeScript server process. To use a memory limit greater than 4 GB, use `typescript.tsserver.nodePath` to run TS Server with a custom Node installation.
  "typescript.tsserver.maxTsServerMemory": 3072,

  // Run TS Server on a custom Node installation. This can be a path to a Node executable, or 'node' if you want VS Code to detect a Node installation.
  "typescript.tsserver.nodePath": "",

  // Additional paths to discover TypeScript Language Service plugins.
  "typescript.tsserver.pluginPaths": [],

  // This setting has been deprecated in favor of `typescript.tsserver.useSyntaxServer`.
  // Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols.
  "typescript.tsserver.useSeparateSyntaxServer": true,

  // Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.
  //  - always: Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.
  //  - never: Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.
  //  - auto: Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.
  "typescript.tsserver.useSyntaxServer": "auto",

  // Configure which watching strategies should be used to keep track of files and directories.
  "typescript.tsserver.watchOptions": {},

  // Enable/disable project-wide IntelliSense on web. Requires that VS Code is running in a trusted context.
  "typescript.tsserver.web.projectWideIntellisense.enabled": true,

  // Suppresses semantic errors on web even when project wide IntelliSense is enabled. This is always on when project wide IntelliSense is not enabled or available. See `typescript.tsserver.web.projectWideIntellisense.enabled`
  "typescript.tsserver.web.projectWideIntellisense.suppressSemanticErrors": true,

  // Enable/disable package acquisition on the web. This enables IntelliSense for imported packages. Requires `typescript.tsserver.web.projectWideIntellisense.enabled`. Currently not supported for Safari.
  "typescript.tsserver.web.typeAcquisition.enabled": false,

  // Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
  //  - prompt: Prompt on each rename.
  //  - always: Always update paths automatically.
  //  - never: Never rename paths and don't prompt.
  "typescript.updateImportsOnFileMove.enabled": "prompt",

  // Enable/disable TypeScript validation.
  "typescript.validate.enable": true,

  // Exclude symbols that come from library files in Go to Symbol in Workspace results. Requires using TypeScript 5.3+ in the workspace.
  "typescript.workspaceSymbols.excludeLibrarySymbols": true,

  // Controls which files are searched by [Go to Symbol in Workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
  //  - allOpenProjects: Search all open JavaScript or TypeScript projects for symbols.
  //  - currentProject: Only search for symbols in the current JavaScript or TypeScript project.
  "typescript.workspaceSymbols.scope": "allOpenProjects",

  // Specifies whether to try to collapse the opened worktrees into a single (common) repository in the views when possible
  "gitlens.views.collapseWorktreesWhenPossible": true,

  // Deprecated. Use `gitlens.views.formats.commits.description` instead
  //
  "gitlens.views.commitDescriptionFormat": null,

  // Deprecated. Use `gitlens.views.formats.files.description` instead
  //
  "gitlens.views.commitFileDescriptionFormat": null,

  // Deprecated. Use `gitlens.views.formats.files.label` instead
  //
  "gitlens.views.commitFileFormat": null,

  // Deprecated. Use `gitlens.views.commits.files.label` instead
  //
  "gitlens.views.commitFormat": null,

  // Specifies the default number of items to show in a view list. Use 0 to specify no limit
  "gitlens.views.defaultItemLimit": 10,

  // Specifies the description format of commits in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.views.formats.commits.description": "${author, }${agoOrDate}",

  // Specifies the format of commits in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.views.formats.commits.label": "${❰ tips|11? ❱➤  }${message}",

  // Specifies the tooltip format (in markdown) of commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.views.formats.commits.tooltip": "${link}${'&nbsp;&nbsp;•&nbsp;&nbsp;'changesDetail}${'&nbsp;&nbsp;&nbsp;&nbsp;'tips} \\\n${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}",

  // Specifies the tooltip format (in markdown) of "file" commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.views.formats.commits.tooltipWithStatus": "${link}${' via 'pullRequest}&nbsp;&nbsp;•&nbsp;&nbsp;{{slot-status}}${'&nbsp;&nbsp;•&nbsp;&nbsp;'changesDetail}${'&nbsp;&nbsp;&nbsp;&nbsp;'tips}\n\n${avatar} &nbsp;__${author}__, ${ago} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}",

  // Specifies the description format of a file in the views. See [_File Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
  "gitlens.views.formats.files.description": "${directory}${  ←  originalPath}",

  // Specifies the format of a file in the views. See [_File Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
  "gitlens.views.formats.files.label": "${working  }${file}",

  // Specifies the description format of stashes in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.views.formats.stashes.description": "${stashOnRef, }${agoOrDate}",

  // Specifies the format of stashes in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.views.formats.stashes.label": "${message}",

  // Specifies the tooltip format (in markdown) of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.views.formats.stashes.tooltip": "${link}${' on `'stashOnRef`}${'&nbsp;&nbsp;•&nbsp;&nbsp;'changesDetail} \\\n&nbsp;&nbsp;${ago} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}",

  // Specifies whether to open multiple changes in the multi-diff editor (single tab) or in individual diff editors (multiple tabs)
  "gitlens.views.openChangesInMultiDiffEditor": true,

  // Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit
  "gitlens.views.pageItemLimit": 40,

  // Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views
  "gitlens.views.showRelativeDateMarkers": true,

  // Deprecated. Use `gitlens.views.formats.stashes.description` instead
  //
  "gitlens.views.stashDescriptionFormat": null,

  // Deprecated. Use `gitlens.views.formats.files.description` instead
  //
  "gitlens.views.stashFileDescriptionFormat": null,

  // Deprecated. Use `gitlens.views.formats.files.label` instead
  //
  "gitlens.views.stashFileFormat": null,

  // Deprecated. Use `gitlens.views.stashes.files.label` instead
  //
  "gitlens.views.stashFormat": null,

  // Deprecated. Use `gitlens.views.formats.files.description` instead
  //
  "gitlens.views.statusFileDescriptionFormat": null,

  // Deprecated. Use `gitlens.views.formats.files.label` instead
  //
  "gitlens.views.statusFileFormat": null,

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Commits_ view
  "gitlens.views.commits.avatars": true,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `tree` or `auto`
  "gitlens.views.commits.files.compact": true,

  // Specifies how the _Commits_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.commits.files.icon": "type",

  // Specifies how the _Commits_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.commits.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.commits.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `auto`
  "gitlens.views.commits.files.threshold": 5,

  // Specifies whether to query for pull requests associated with the current branch and commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.commits.pullRequests.enabled": true,

  // Specifies whether to show pull requests (if any) associated with the current branch in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.commits.pullRequests.showForBranches": true,

  // Specifies whether to show pull requests (if any) associated with commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.commits.pullRequests.showForCommits": true,

  // Specifies whether to reveal commits in the _Commits_ view, otherwise they revealed in the _Repositories_ view
  "gitlens.views.commits.reveal": true,

  // Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag, etc) in the _Commits_ view
  //  - false: Hides the branch comparison
  //  - branch: Compares the current branch with a user-selected reference
  //  - working: Compares the working tree with a user-selected reference
  "gitlens.views.commits.showBranchComparison": "working",

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Pull Request_ view
  "gitlens.views.pullRequest.avatars": true,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Pull Request_ view. Only applies when `gitlens.views.pullRequest.files.layout` is set to `tree` or `auto`
  "gitlens.views.pullRequest.files.compact": true,

  // Specifies how the _Pull Request_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.pullRequest.files.icon": "type",

  // Specifies how the _Pull Request_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.pullRequest.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.pullRequest.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Pull Request_ view. Only applies when `gitlens.views.pullRequest.files.layout` is set to `auto`
  "gitlens.views.pullRequest.files.threshold": 5,

  // Always reveal the executed test when `testing.followRunningTest` is on. If this setting is turned off, only failed tests will be revealed.
  "testing.alwaysRevealTestOnStateChange": false,

  // Configures when the error Peek view is automatically opened.
  //  - failureAnywhere: Open automatically no matter where the failure is.
  //  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
  //  - never: Never automatically open.
  "testing.automaticallyOpenPeekView": "failureInVisibleDocument",

  // Controls whether to automatically open the Peek view during continuous run mode.
  "testing.automaticallyOpenPeekViewDuringAutoRun": false,

  // How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.
  "testing.autoRun.delay": 1000,

  // Controls the count badge on the Testing icon on the Activity Bar.
  //  - failed: Show the number of failed tests
  //  - off: Disable the testing count badge
  //  - passed: Show the number of passed tests
  //  - skipped: Show the number of skipped tests
  "testing.countBadge": "failed",

  // Configures the colors used for percentages in test coverage bars.
  "testing.coverageBarThresholds": {
    "red": 0,
    "yellow": 60,
    "green": 90
  },

  // Controls whether the coverage toolbar is shown in the editor.
  "testing.coverageToolbarEnabled": false,

  // Controls the action to take when left-clicking on a test decoration in the gutter.
  //  - run: Run the test.
  //  - debug: Debug the test.
  //  - runWithCoverage: Run the test with coverage.
  //  - contextMenu: Open the context menu for more options.
  "testing.defaultGutterClickAction": "run",

  // Configures what percentage is displayed by default for test coverage.
  //  - totalCoverage: A calculation of the combined statement, function, and branch coverage.
  //  - statement: The statement coverage.
  //  - minimum: The minimum of statement, function, and branch coverage.
  "testing.displayedCoveragePercent": "totalCoverage",

  // Controls whether the running test should be followed in the Test Explorer view.
  "testing.followRunningTest": true,

  // Controls whether test decorations are shown in the editor gutter.
  "testing.gutterEnabled": true,

  // Controls when the testing view should open.
  //  - neverOpen: Never automatically open the testing views
  //  - openOnTestStart: Open the test results view when tests start
  //  - openOnTestFailure: Open the test result view on any test failure
  //  - openExplorerOnTestStart: Open the test explorer when tests start
  "testing.openTesting": "openOnTestStart",

  // Control whether save all dirty editors before running a test.
  "testing.saveBeforeTest": true,

  // Controls whether to show messages from all test runs.
  "testing.showAllMessages": false,

  // Whether test coverage should be down in the File Explorer view.
  "testing.showCoverageInExplorer": true,

  // Insert semicolon at end of line when completing CSS properties.
  "css.completion.completePropertyWithSemicolon": true,

  // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
  "css.completion.triggerPropertyValueCompletion": true,

  // A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
  //
  // VS Code loads custom data on startup to enhance its CSS support for CSS custom properties (variables), at-rules, pseudo-classes, and pseudo-elements you specify in the JSON files.
  //
  // The file paths are relative to workspace and only workspace folder settings are considered.
  "css.customData": [],

  // Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
  "css.format.braceStyle": "collapse",

  // Enable/disable default CSS formatter.
  "css.format.enable": true,

  // Maximum number of line breaks to be preserved in one chunk, when `css.format.preserveNewLines` is enabled.
  "css.format.maxPreserveNewLines": null,

  // Separate rulesets by a blank line.
  "css.format.newlineBetweenRules": true,

  // Separate selectors with a new line.
  "css.format.newlineBetweenSelectors": true,

  // Whether existing line breaks before elements should be preserved.
  "css.format.preserveNewLines": true,

  // Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
  "css.format.spaceAroundSelectorSeparator": false,

  // Show property and value documentation in CSS hovers.
  "css.hover.documentation": true,

  // Show references to MDN in CSS hovers.
  "css.hover.references": true,

  // Invalid number of parameters.
  "css.lint.argumentsInColorFunction": "error",

  // Do not use `width` or `height` when using `padding` or `border`.
  "css.lint.boxModel": "ignore",

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
  "css.lint.compatibleVendorPrefixes": "ignore",

  // Do not use duplicate style definitions.
  "css.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets.
  "css.lint.emptyRules": "warning",

  // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "css.lint.float": "ignore",

  // `@font-face` rule must define `src` and `font-family` properties.
  "css.lint.fontFaceProperties": "warning",

  // Hex colors must consist of 3, 4, 6 or 8 hex numbers.
  "css.lint.hexColorLength": "error",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "css.lint.idSelector": "ignore",

  // IE hacks are only necessary when supporting IE7 and older.
  "css.lint.ieHack": "ignore",

  // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "css.lint.important": "ignore",

  // Import statements do not load in parallel.
  "css.lint.importStatement": "ignore",

  // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
  "css.lint.propertyIgnoredDueToDisplay": "warning",

  // The universal selector (`*`) is known to be slow.
  "css.lint.universalSelector": "ignore",

  // Unknown at-rule.
  "css.lint.unknownAtRules": "warning",

  // Unknown property.
  "css.lint.unknownProperties": "warning",

  // Unknown vendor specific property.
  "css.lint.unknownVendorSpecificProperties": "ignore",

  // A list of properties that are not validated against the `unknownProperties` rule.
  "css.lint.validProperties": [],

  // When using a vendor-specific prefix, also include the standard property.
  "css.lint.vendorPrefix": "warning",

  // No unit for zero needed.
  "css.lint.zeroUnits": "ignore",

  // Traces the communication between VS Code and the CSS language server.
  "css.trace.server": "off",

  // Enables or disables all validations.
  "css.validate": true,

  // Specifies whether to automatically link external resources in commit messages
  "gitlens.views.commitDetails.autolinks.enabled": true,

  // Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.commitDetails.autolinks.enhanced": true,

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Commit Details_ view
  "gitlens.views.commitDetails.avatars": true,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Commit Details_ view. Only applies when `gitlens.views.commitDetails.files.layout` is set to `tree` or `auto`
  "gitlens.views.commitDetails.files.compact": true,

  // Specifies how the _Commit Details_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.commitDetails.files.icon": "type",

  // Specifies how the _Commit Details_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.commitDetails.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.commitDetails.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commit Details_ view. Only applies when `gitlens.views.commitDetails.files.layout` is set to `auto`
  "gitlens.views.commitDetails.files.threshold": 5,

  // Specifies whether to query for associated pull requests. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.commitDetails.pullRequests.enabled": true,

  // Insert semicolon at end of line when completing CSS properties.
  "less.completion.completePropertyWithSemicolon": true,

  // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
  "less.completion.triggerPropertyValueCompletion": true,

  // Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
  "less.format.braceStyle": "collapse",

  // Enable/disable default LESS formatter.
  "less.format.enable": true,

  // Maximum number of line breaks to be preserved in one chunk, when `less.format.preserveNewLines` is enabled.
  "less.format.maxPreserveNewLines": null,

  // Separate rulesets by a blank line.
  "less.format.newlineBetweenRules": true,

  // Separate selectors with a new line.
  "less.format.newlineBetweenSelectors": true,

  // Whether existing line breaks before elements should be preserved.
  "less.format.preserveNewLines": true,

  // Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
  "less.format.spaceAroundSelectorSeparator": false,

  // Show property and value documentation in LESS hovers.
  "less.hover.documentation": true,

  // Show references to MDN in LESS hovers.
  "less.hover.references": true,

  // Invalid number of parameters.
  "less.lint.argumentsInColorFunction": "error",

  // Do not use `width` or `height` when using `padding` or `border`.
  "less.lint.boxModel": "ignore",

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
  "less.lint.compatibleVendorPrefixes": "ignore",

  // Do not use duplicate style definitions.
  "less.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets.
  "less.lint.emptyRules": "warning",

  // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "less.lint.float": "ignore",

  // `@font-face` rule must define `src` and `font-family` properties.
  "less.lint.fontFaceProperties": "warning",

  // Hex colors must consist of 3, 4, 6 or 8 hex numbers.
  "less.lint.hexColorLength": "error",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "less.lint.idSelector": "ignore",

  // IE hacks are only necessary when supporting IE7 and older.
  "less.lint.ieHack": "ignore",

  // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "less.lint.important": "ignore",

  // Import statements do not load in parallel.
  "less.lint.importStatement": "ignore",

  // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
  "less.lint.propertyIgnoredDueToDisplay": "warning",

  // The universal selector (`*`) is known to be slow.
  "less.lint.universalSelector": "ignore",

  // Unknown at-rule.
  "less.lint.unknownAtRules": "warning",

  // Unknown property.
  "less.lint.unknownProperties": "warning",

  // Unknown vendor specific property.
  "less.lint.unknownVendorSpecificProperties": "ignore",

  // A list of properties that are not validated against the `unknownProperties` rule.
  "less.lint.validProperties": [],

  // When using a vendor-specific prefix, also include the standard property.
  "less.lint.vendorPrefix": "warning",

  // No unit for zero needed.
  "less.lint.zeroUnits": "ignore",

  // Enables or disables all validations.
  "less.validate": true,

  // Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes
  "gitlens.views.repositories.autoRefresh": true,

  // Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files
  "gitlens.views.repositories.autoReveal": true,

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view
  "gitlens.views.repositories.avatars": true,

  // Specifies how the _Repositories_ view will display branches
  //  - list: Displays branches as a list
  //  - tree: Displays branches as a tree when branch names contain slashes `/`
  "gitlens.views.repositories.branches.layout": "tree",

  // Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag, etc) under each branch in the _Repositories_ view
  //  - false: Hides the branch comparison
  //  - branch: Compares the branch with a user-selected reference
  "gitlens.views.repositories.branches.showBranchComparison": "branch",

  // Specifies whether to show the _Repositories_ view in a compact display density
  "gitlens.views.repositories.compact": false,

  // Deprecated. This setting is no longer used
  //
  "gitlens.views.repositories.enabled": null,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `tree` or `auto`
  "gitlens.views.repositories.files.compact": true,

  // Specifies how the _Repositories_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.repositories.files.icon": "type",

  // Specifies how the _Repositories_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.repositories.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.repositories.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `auto`
  "gitlens.views.repositories.files.threshold": 5,

  // Specifies whether to include working tree file status for each repository in the _Repositories_ view
  "gitlens.views.repositories.includeWorkingTree": false,

  // Specifies whether to query for pull requests associated with branches and commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.repositories.pullRequests.enabled": true,

  // Specifies whether to show pull requests (if any) associated with branches in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.repositories.pullRequests.showForBranches": true,

  // Specifies whether to show pull requests (if any) associated with commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.repositories.pullRequests.showForCommits": true,

  // Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag, etc) in the _Repositories_ view
  //  - false: Hides the branch comparison
  //  - branch: Compares the current branch with a user-selected reference
  //  - working: Compares the working tree with a user-selected reference
  "gitlens.views.repositories.showBranchComparison": "working",

  // Specifies whether to show the branches for each repository in the _Repositories_ view
  "gitlens.views.repositories.showBranches": true,

  // Specifies whether to show the commits on the current branch for each repository in the _Repositories_ view
  "gitlens.views.repositories.showCommits": true,

  // Specifies whether to show the contributors for each repository in the _Repositories_ view
  "gitlens.views.repositories.showContributors": true,

  // Specifies whether to show the experimental incoming activity for each repository in the _Repositories_ view
  "gitlens.views.repositories.showIncomingActivity": false,

  // Specifies whether to show the remotes for each repository in the _Repositories_ view
  "gitlens.views.repositories.showRemotes": true,

  // Specifies whether to show the stashes for each repository in the _Repositories_ view
  "gitlens.views.repositories.showStashes": true,

  // Specifies whether to show the tags for each repository in the _Repositories_ view
  "gitlens.views.repositories.showTags": true,

  // Specifies whether to show the upstream status of the current branch for each repository in the _Repositories_ view
  "gitlens.views.repositories.showUpstreamStatus": true,

  // Specifies whether to show the worktrees for each repository in the _Repositories_ view
  "gitlens.views.repositories.showWorktrees": true,

  // Specifies whether file histories will follow renames
  "gitlens.advanced.fileHistoryFollowsRenames": true,

  // Specifies whether file histories will show commits from all branches
  "gitlens.advanced.fileHistoryShowAllBranches": false,

  // Specifies whether file histories will show merge commits
  "gitlens.advanced.fileHistoryShowMergeCommits": false,

  // Specifies whether to show avatar images instead of status icons in the _File History_ view
  "gitlens.views.fileHistory.avatars": true,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _File History_ view. Only applies when `gitlens.views.fileHistory.files.layout` is set to `tree` or `auto`
  "gitlens.views.fileHistory.files.compact": true,

  // Specifies how the _File History_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.fileHistory.files.icon": "type",

  // Specifies how the _File History_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.fileHistory.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.fileHistory.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _File History_ view. Only applies when `gitlens.views.fileHistory.files.layout` is set to `auto`
  "gitlens.views.fileHistory.files.threshold": 5,

  // Specifies whether to query for pull requests associated with commits in the _File History_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.fileHistory.pullRequests.enabled": true,

  // Specifies whether to show pull requests (if any) associated with commits in the _File History_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.fileHistory.pullRequests.showForCommits": true,

  // Insert semicolon at end of line when completing CSS properties.
  "scss.completion.completePropertyWithSemicolon": true,

  // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
  "scss.completion.triggerPropertyValueCompletion": true,

  // Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
  "scss.format.braceStyle": "collapse",

  // Enable/disable default SCSS formatter.
  "scss.format.enable": true,

  // Maximum number of line breaks to be preserved in one chunk, when `scss.format.preserveNewLines` is enabled.
  "scss.format.maxPreserveNewLines": null,

  // Separate rulesets by a blank line.
  "scss.format.newlineBetweenRules": true,

  // Separate selectors with a new line.
  "scss.format.newlineBetweenSelectors": true,

  // Whether existing line breaks before elements should be preserved.
  "scss.format.preserveNewLines": true,

  // Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
  "scss.format.spaceAroundSelectorSeparator": false,

  // Show property and value documentation in SCSS hovers.
  "scss.hover.documentation": true,

  // Show references to MDN in SCSS hovers.
  "scss.hover.references": true,

  // Invalid number of parameters.
  "scss.lint.argumentsInColorFunction": "error",

  // Do not use `width` or `height` when using `padding` or `border`.
  "scss.lint.boxModel": "ignore",

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
  "scss.lint.compatibleVendorPrefixes": "ignore",

  // Do not use duplicate style definitions.
  "scss.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets.
  "scss.lint.emptyRules": "warning",

  // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "scss.lint.float": "ignore",

  // `@font-face` rule must define `src` and `font-family` properties.
  "scss.lint.fontFaceProperties": "warning",

  // Hex colors must consist of 3, 4, 6 or 8 hex numbers.
  "scss.lint.hexColorLength": "error",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "scss.lint.idSelector": "ignore",

  // IE hacks are only necessary when supporting IE7 and older.
  "scss.lint.ieHack": "ignore",

  // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "scss.lint.important": "ignore",

  // Import statements do not load in parallel.
  "scss.lint.importStatement": "ignore",

  // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
  "scss.lint.propertyIgnoredDueToDisplay": "warning",

  // The universal selector (`*`) is known to be slow.
  "scss.lint.universalSelector": "ignore",

  // Unknown at-rule.
  "scss.lint.unknownAtRules": "warning",

  // Unknown property.
  "scss.lint.unknownProperties": "warning",

  // Unknown vendor specific property.
  "scss.lint.unknownVendorSpecificProperties": "ignore",

  // A list of properties that are not validated against the `unknownProperties` rule.
  "scss.lint.validProperties": [],

  // When using a vendor-specific prefix, also include the standard property.
  "scss.lint.vendorPrefix": "warning",

  // No unit for zero needed.
  "scss.lint.zeroUnits": "ignore",

  // Enables or disables all validations.
  "scss.validate": true,

  // Specifies whether to show avatar images instead of status icons in the _Line History_ view
  "gitlens.views.lineHistory.avatars": true,

  // Deprecated. This setting is no longer used
  //
  "gitlens.views.lineHistory.enabled": null,

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Branches_ view
  "gitlens.views.branches.avatars": true,

  // Specifies how the _Branches_ view will display branches
  //  - list: Displays branches as a list
  //  - tree: Displays branches as a tree when branch names contain slashes `/`
  "gitlens.views.branches.branches.layout": "tree",

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `tree` or `auto`
  "gitlens.views.branches.files.compact": true,

  // Specifies how the _Branches_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.branches.files.icon": "type",

  // Specifies how the _Branches_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.branches.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.branches.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `auto`
  "gitlens.views.branches.files.threshold": 5,

  // Specifies whether to query for pull requests associated with each branch and commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.branches.pullRequests.enabled": true,

  // Specifies whether to show pull requests (if any) associated with each branch in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.branches.pullRequests.showForBranches": true,

  // Specifies whether to show pull requests (if any) associated with commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.branches.pullRequests.showForCommits": true,

  // Specifies whether to reveal branches in the _Branches_ view, otherwise they revealed in the _Repositories_ view
  "gitlens.views.branches.reveal": true,

  // Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag, etc) in the _Branches_ view
  //  - false: Hides the branch comparison
  //  - branch: Compares the branch with a user-selected reference
  "gitlens.views.branches.showBranchComparison": "branch",

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Remotes_ view
  "gitlens.views.remotes.avatars": true,

  // Specifies how the _Remotes_ view will display branches
  //  - list: Displays branches as a list
  //  - tree: Displays branches as a tree when branch names contain slashes `/`
  "gitlens.views.remotes.branches.layout": "tree",

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `tree` or `auto`
  "gitlens.views.remotes.files.compact": true,

  // Specifies how the _Remotes_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.remotes.files.icon": "type",

  // Specifies how the _Remotes_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.remotes.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.remotes.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `auto`
  "gitlens.views.remotes.files.threshold": 5,

  // Specifies whether to query for pull requests associated with each branch and commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.remotes.pullRequests.enabled": true,

  // Specifies whether to show pull requests (if any) associated with each branch in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.remotes.pullRequests.showForBranches": true,

  // Specifies whether to show pull requests (if any) associated with commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.remotes.pullRequests.showForCommits": true,

  // Specifies whether to reveal remotes in the _Remotes_ view, otherwise they revealed in the _Repositories_ view
  "gitlens.views.remotes.reveal": true,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `tree` or `auto`
  "gitlens.views.stashes.files.compact": true,

  // Specifies how the _Stashes_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.stashes.files.icon": "type",

  // Specifies how the _Stashes_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.stashes.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.stashes.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `auto`
  "gitlens.views.stashes.files.threshold": 5,

  // Specifies whether to reveal stashes in the _Stashes_ view, otherwise they revealed in the _Repositories_ view
  "gitlens.views.stashes.reveal": true,

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Tags_ view
  "gitlens.views.tags.avatars": true,

  // Specifies how the _Tags_ view will display tags
  //  - list: Displays tags as a list
  //  - tree: Displays tags as a tree when tags names contain slashes `/`
  "gitlens.views.tags.branches.layout": "tree",

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `tree` or `auto`
  "gitlens.views.tags.files.compact": true,

  // Specifies how the _Tags_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.tags.files.icon": "type",

  // Specifies how the _Tags_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.tags.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.tags.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `auto`
  "gitlens.views.tags.files.threshold": 5,

  // Specifies whether to reveal tags in the _Tags_ view, otherwise they revealed in the _Repositories_ view
  "gitlens.views.tags.reveal": true,

  // When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
  "extensions.autoCheckUpdates": true,

  // Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service.
  //  - true: Download and install updates automatically for all extensions except for those updates are ignored.
  //  - onlyEnabledExtensions: Download and install updates automatically only for enabled extensions except for those updates are ignored. Disabled extensions are not updated automatically.
  //  - onlySelectedExtensions: Download and install updates automatically only for selected extensions.
  //  - false: Extensions are not automatically updated.
  "extensions.autoUpdate": true,

  // When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
  "extensions.closeExtensionDetailsOnViewChange": false,

  // When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.
  "extensions.confirmedUriHandlerExtensionIds": [],

  // Configure an extension to execute in a different extension host process.
  "extensions.experimental.affinity": {},

  // When enabled, extensions which declare the `onStartupFinished` activation event will be activated after a timeout.
  "extensions.experimental.deferredStartupFinishedActivation": false,

  // When enabled, extensions can be searched for via Quick Access and report issues from there.
  "extensions.experimental.issueQuickAccess": true,

  // When enabled, the notifications for extension recommendations will not be shown.
  "extensions.ignoreRecommendations": false,

  // This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default.
  //
  "extensions.showRecommendationsOnlyOnDemand": false,

  // Override the untrusted workspace support of an extension. Extensions using `true` will always be enabled. Extensions using `limited` will always be enabled, and the extension will hide functionality that requires trust. Extensions using `false` will only be enabled only when the workspace is trusted.
  "extensions.supportUntrustedWorkspaces": {},

  // Override the virtual workspaces support of an extension.
  "extensions.supportVirtualWorkspaces": {},

  // Enable web worker extension host.
  //  - true: The Web Worker Extension Host will always be launched.
  //  - false: The Web Worker Extension Host will never be launched.
  //  - auto: The Web Worker Extension Host will be launched when a web extension needs it.
  "extensions.webWorker": "auto",

  // Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.
  "output.smartScroll.enabled": true,

  // List of extensions to be ignored while synchronizing. The identifier of an extension is always `${publisher}.${name}`. For example: `vscode.csharp`.
  "settingsSync.ignoredExtensions": [],

  // Configure settings to be ignored while synchronizing.
  "settingsSync.ignoredSettings": [],

  // Synchronize keybindings for each platform.
  "settingsSync.keybindingsPerPlatform": true,

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Worktrees_ view
  "gitlens.views.worktrees.avatars": true,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Worktrees_ view. Only applies when `gitlens.views.worktrees.files.layout` is set to `tree` or `auto`
  "gitlens.views.worktrees.files.compact": true,

  // Specifies how the _Worktrees_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.worktrees.files.icon": "type",

  // Specifies how the _Worktrees_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.worktrees.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.worktrees.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Worktrees_ view. Only applies when `gitlens.views.worktrees.files.layout` is set to `auto`
  "gitlens.views.worktrees.files.threshold": 5,

  // Specifies whether to query for pull requests associated with the worktree branch and commits in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.worktrees.pullRequests.enabled": true,

  // Specifies whether to show pull requests (if any) associated with the worktree branch in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.worktrees.pullRequests.showForBranches": true,

  // Specifies whether to show pull requests (if any) associated with commits in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.worktrees.pullRequests.showForCommits": true,

  // Specifies whether to reveal worktrees in the _Worktrees_ view, otherwise they revealed in the _Repositories_ view
  "gitlens.views.worktrees.reveal": true,

  // Specifies whether to show a comparison of the worktree branch with a user-selected reference (branch, tag, etc) in the _Worktrees_ view
  //  - false: Hides the branch comparison
  //  - branch: Compares the worktree branch with a user-selected reference
  "gitlens.views.worktrees.showBranchComparison": "working",

  // Specifies the default path in which new worktrees will be created
  "gitlens.worktrees.defaultLocation": null,

  // Specifies how and when to open a worktree after it is created
  //  - always: Always open the new worktree in the current window
  //  - alwaysNewWindow: Always open the new worktree in a new window
  //  - onlyWhenEmpty: Only open the new worktree in the current window when no folder is opened
  //  - never: Never open the new worktree
  //  - prompt: Always prompt to open the new worktree
  "gitlens.worktrees.openAfterCreate": "prompt",

  // Specifies whether to prompt for a path when creating new worktrees
  "gitlens.worktrees.promptForLocation": true,

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Contributors_ view
  "gitlens.views.contributors.avatars": true,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `tree` or `auto`
  "gitlens.views.contributors.files.compact": true,

  // Specifies how the _Contributors_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.contributors.files.icon": "type",

  // Specifies how the _Contributors_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.contributors.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.contributors.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `auto`
  "gitlens.views.contributors.files.threshold": 5,

  // Specifies whether to query for pull requests associated with branches and commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.contributors.pullRequests.enabled": true,

  // Specifies whether to show pull requests (if any) associated with commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.contributors.pullRequests.showForCommits": true,

  // Specifies whether to reveal contributors in the _Contributors_ view, otherwise they revealed in the _Repositories_ view
  "gitlens.views.contributors.reveal": true,

  // Specifies whether to show commits from all branches in the _Contributors_ view
  "gitlens.views.contributors.showAllBranches": false,

  // Specifies whether to show contributor statistics in the _Contributors_ view. This can take a while to compute depending on the repository size
  "gitlens.views.contributors.showStatistics": false,

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Search & Compare_ view
  "gitlens.views.searchAndCompare.avatars": true,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `tree` or `auto`
  "gitlens.views.searchAndCompare.files.compact": true,

  // Specifies how the _Search & Compare_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.searchAndCompare.files.icon": "type",

  // Specifies how the _Search & Compare_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.searchAndCompare.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.searchAndCompare.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `auto`
  "gitlens.views.searchAndCompare.files.threshold": 5,

  // Specifies whether to query for pull requests associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.searchAndCompare.pullRequests.enabled": true,

  // Specifies whether to show pull requests (if any) associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.searchAndCompare.pullRequests.showForCommits": true,

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Cloud Patches_ view
  "gitlens.views.drafts.avatars": true,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Cloud Patches_ view. Only applies when `gitlens.views.drafts.files.layout` is set to `tree` or `auto`
  "gitlens.views.drafts.files.compact": true,

  // Specifies how the _Cloud Patches_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.drafts.files.icon": "type",

  // Specifies how the _Cloud Patches_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.drafts.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.drafts.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Cloud Patches_ view. Only applies when `gitlens.views.drafts.files.layout` is set to `auto`
  "gitlens.views.drafts.files.threshold": 5,

  // Specifies whether to show avatar images instead of commit (or status) icons in the _GitKraken Workspaces_ view
  "gitlens.views.workspaces.avatars": true,

  // Specifies how the _GitKraken Workspaces_ view will display branches
  //  - list: Displays branches as a list
  //  - tree: Displays branches as a tree when branch names contain slashes `/`
  "gitlens.views.workspaces.branches.layout": "tree",

  // Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag, etc) under each branch in the _GitKraken Workspaces_ view
  //  - false: Hides the branch comparison
  //  - branch: Compares the branch with a user-selected reference
  "gitlens.views.workspaces.branches.showBranchComparison": "branch",

  // Specifies whether to show the _GitKraken Workspaces_ view in a compact display density
  "gitlens.views.workspaces.compact": false,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _GitKraken Workspaces_ view. Only applies when `gitlens.views.workspaces.files.layout` is set to `tree` or `auto`
  "gitlens.views.workspaces.files.compact": true,

  // Specifies how the _GitKraken Workspaces_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.workspaces.files.icon": "type",

  // Specifies how the _GitKraken Workspaces_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.workspaces.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.workspaces.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _GitKraken Workspaces_ view. Only applies when `gitlens.views.workspaces.files.layout` is set to `auto`
  "gitlens.views.workspaces.files.threshold": 5,

  // Specifies whether to include working tree file status for each repository in the _GitKraken Workspaces_ view
  "gitlens.views.workspaces.includeWorkingTree": false,

  // Specifies whether to query for pull requests associated with branches and commits in the _GitKraken Workspaces_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.workspaces.pullRequests.enabled": true,

  // Specifies whether to show pull requests (if any) associated with branches in the _GitKraken Workspaces_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.workspaces.pullRequests.showForBranches": true,

  // Specifies whether to show pull requests (if any) associated with commits in the _GitKraken Workspaces_ view. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.views.workspaces.pullRequests.showForCommits": true,

  // Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag, etc) in the _GitKraken Workspaces_ view
  //  - false: Hides the branch comparison
  //  - branch: Compares the current branch with a user-selected reference
  //  - working: Compares the working tree with a user-selected reference
  "gitlens.views.workspaces.showBranchComparison": "working",

  // Specifies whether to show the branches for each repository in the _GitKraken Workspaces_ view
  "gitlens.views.workspaces.showBranches": true,

  // Specifies whether to show the commits on the current branch for each repository in the _GitKraken Workspaces_ view
  "gitlens.views.workspaces.showCommits": true,

  // Specifies whether to show the contributors for each repository in the _GitKraken Workspaces_ view
  "gitlens.views.workspaces.showContributors": true,

  // Specifies whether to show the experimental incoming activity for each repository in the _GitKraken Workspaces_ view
  "gitlens.views.workspaces.showIncomingActivity": false,

  // Specifies whether to show the remotes for each repository in the _GitKraken Workspaces_ view
  "gitlens.views.workspaces.showRemotes": true,

  // Specifies whether to show the stashes for each repository in the _GitKraken Workspaces_ view
  "gitlens.views.workspaces.showStashes": true,

  // Specifies whether to show the tags for each repository in the _GitKraken Workspaces_ view
  "gitlens.views.workspaces.showTags": true,

  // Specifies whether to show the upstream status of the current branch for each repository in the _GitKraken Workspaces_ view
  "gitlens.views.workspaces.showUpstreamStatus": true,

  // Specifies whether to show the worktrees for each repository in the _GitKraken Workspaces_ view
  "gitlens.views.workspaces.showWorktrees": true,

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Patch Details_ view
  "gitlens.views.patchDetails.avatars": true,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Patch Details_ view. Only applies when `gitlens.views.patchDetails.files.layout` is set to `tree` or `auto`
  "gitlens.views.patchDetails.files.compact": true,

  // Specifies how the _Patch Details_ view will display file icons
  //  - status: Shows the file's status as the icon
  //  - type: Shows the file's type (theme icon) as the icon
  "gitlens.views.patchDetails.files.icon": "type",

  // Specifies how the _Patch Details_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.patchDetails.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.patchDetails.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Patch Details_ view. Only applies when `gitlens.views.patchDetails.files.layout` is set to `auto`
  "gitlens.views.patchDetails.files.threshold": 5,

  // Controls whether code cells in the interactive window are collapsed by default.
  "interactiveWindow.collapseCellInputCode": "fromEditor",

  // The limit of notebook output size in kilobytes (KB) where notebook files will no longer be backed up for hot reload. Use 0 for unlimited.
  "notebook.backup.sizeLimit": 10000,

  // When enabled, notebook breadcrumbs contain code cells.
  "notebook.breadcrumbs.showCodeCells": true,

  // Show available diagnostics for cell failures.
  "notebook.cellFailureDiagnostics": true,

  // Controls where the focus indicator is rendered, either along the cell borders or on the left gutter.
  "notebook.cellFocusIndicator": "gutter",

  // Where the cell toolbar should be shown, or whether it should be hidden.
  "notebook.cellToolbarLocation": {
    "default": "right"
  },

  // Whether the cell toolbar should appear on hover or click.
  "notebook.cellToolbarVisibility": "click",

  // Run a series of Code Actions for a notebook on save. Code Actions must be specified, the file must not be saved after delay, and the editor must not be shutting down. Example: `"notebook.source.organizeImports": "explicit"`
  "notebook.codeActionsOnSave": {},

  // Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width.
  "notebook.compactView": true,

  // Control whether a confirmation prompt is required to delete a running cell.
  "notebook.confirmDeleteRunningCell": true,

  // Control whether outputs action should be rendered in the output toolbar.
  "notebook.consolidatedOutputButton": true,

  // Control whether extra actions are shown in a dropdown next to the run button.
  "notebook.consolidatedRunButton": false,

  // Defines a default notebook formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
  //  - null: None
  //  - formulahendry.auto-close-tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
  //  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
  //  - njpwerner.autodocstring: Generates python docstrings automatically
  //  - aaron-bond.better-comments: Improve your code commenting by annotating with alert, informational, TODOs, and more!
  //  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML, Zig, Mojo, Erlang, SPWN, Pkl, Gleam
  //  - GitHub.copilot: Your AI pair programmer
  //  - GitHub.copilot-chat: AI chat features powered by Copilot
  //  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
  //  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
  //  - figma.figma-vscode-extension: Bring Figma into the text editor. Inspect designs, receive notifications, and get code suggestions.
  //  - golang.go: Rich Go language support for Visual Studio Code
  //  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
  //  - solnurkarim.html-to-css-autocompletion: Provides completion suggestions for classes and ids from markup documents to stylesheets.
  //  - vscode.json-language-features: Provides rich language support for JSON files.
  //  - James-Yu.latex-workshop: Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.
  //  - vscode.markdown-language-features: Provides rich language support for Markdown.
  //  - vscode.markdown-math: Adds math support to Markdown in notebooks.
  //  - mongodb.mongodb-vscode: Connect to MongoDB and Atlas directly from your VS Code environment, navigate your databases and collections, inspect your schema and use playgrounds to prototype queries and aggregations.
  //  - zobo.php-intellisense: Advanced Autocompletion and Refactoring support for PHP
  //  - vscode.php-language-features: Provides rich language support for PHP files.
  //  - esbenp.prettier-vscode: Code formatter using prettier
  //  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
  //  - donjayamanne.python-environment-manager: View and manage Python environments & packages.
  //  - mechatroner.rainbow-csv: Highlight CSV and TSV files, Run SQL-like queries
  //  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
  //  - KevinRose.vsc-python-indent: Correct Python indentation
  //  - mike-lischke.vscode-antlr4: Language support for ANTLR4 grammar files
  //  - batisteo.vscode-django: Beautiful syntax and scoped snippets for perfectionists with deadlines
  //  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
  //  - bmewburn.vscode-intelephense-client: PHP code intelligence for Visual Studio Code
  //  - mgmcdermott.vscode-language-babel: VSCode syntax highlighting for today's JavaScript
  //  - mathematic.vscode-latex: LaTeX language support for Visual Studio Code.
  //  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
  //  - mrmlnc.vscode-scss: Advanced autocompletion and refactoring support for SCSS
  //  - styled-components.vscode-styled-components: Syntax highlighting for styled-components
  //  - rangav.vscode-thunder-client: Lightweight Rest API Client for VS Code
  //  - shalldie.background: Bring background images to your vscode
  //  - alefragnani.Bookmarks: Mark lines and jump to them
  //  - twxs.cmake: CMake langage support for Visual Studio Code
  //  - ms-vscode.cmake-tools: Extended CMake support in Visual Studio Code
  //  - naumovs.color-highlight: Highlight web colors in your editor
  //  - bierner.color-info: Provides quick information about css colors
  //  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
  //  - ms-vscode.cpptools-extension-pack: Popular extensions for C++ development in Visual Studio Code.
  //  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
  //  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
  //  - ms-python.debugpy: Python Debugger extension using debugpy.
  //  - EditorConfig.EditorConfig: EditorConfig Support for Visual Studio Code
  //  - vscode.emmet: Emmet support for VS Code
  //  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
  //  - vscode.git: Git SCM Integration
  //  - vscode.git-base: Git static contributions and pickers.
  //  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
  //  - vscode.github: GitHub features for VS Code
  //  - vscode.github-authentication: GitHub Authentication Provider
  //  - eamodio.gitlens: Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more
  //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
  //  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
  //  - vincaslt.highlight-matching-tag: Highlights matching closing and opening tags
  //  - bradgashler.htmltagwrap: Wraps selected code with HTML tags
  //  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
  //  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
  //  - vscode.jake: Extension to add Jake capabilities to VS Code.
  //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
  //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
  //  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
  //  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
  //  - mjpvs.latex-previewer: Preview a typeset LaTeX document in VS Code
  //  - negokaz.live-server-preview: Preview your HTML file with localhost server live-reloading enabled
  //  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
  //  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
  //  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
  //  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
  //  - vscode.microsoft-authentication: Microsoft authentication provider
  //  - ChirtleLovesDolls.nebula-theme: 🌌🌸 Fresh colors on a dark, cold slate. An almost-material theme for Visual Studio Code.
  //  - vscode.npm: Extension to add task support for npm scripts.
  //  - xdebug.php-debug: Debug support for PHP with Xdebug
  //  - brapifra.phpserver: Serve your Project with PHP
  //  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
  //  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
  //  - vscode.simple-browser: A very basic built-in webview for displaying web content.
  //  - yasht.terminal-all-in-one: Enhance your integrated terminal with themes, scripts, keybindings, and commands.
  //  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
  //  - ChakrounAnas.turbo-console-log: Automating the process of writing meaningful log messages.
  //  - anseki.vscode-color: Helper with GUI to generate color codes such as CSS color notations.
  //  - kisstkondoros.vscode-gutter-preview: Shows image preview in the gutter and on hover
  //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
  //  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
  //  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
  //  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
  //  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
  "notebook.defaultFormatter": null,

  // Whether to use the enhanced text diff editor for notebook.
  "notebook.diff.enablePreview": true,

  // Hide Metadata Differences
  "notebook.diff.ignoreMetadata": false,

  // Hide Outputs Differences
  "notebook.diff.ignoreOutputs": false,

  // Whether to render the overview ruler in the diff editor for notebook.
  "notebook.diff.overviewRuler": false,

  // Priority list for output mime types
  "notebook.displayOrder": [],

  // Control whether the notebook editor should allow moving cells through drag and drop.
  "notebook.dragAndDropEnabled": true,

  // Settings for code editors used in notebooks. This can be used to customize most editor.* settings.
  "notebook.editorOptionsCustomizations": {},

  // Enable experimental floating chat widget in notebooks.
  "notebook.experimental.cellChat": false,

  // Enables the user to search within a selection of cells in the notebook. When enabled, the user will see a "Find in Cell Selection" icon in the notebook find widget.
  "notebook.experimental.find.scope.enabled": false,

  // Enable experimental generate action to create code cell with inline chat enabled.
  "notebook.experimental.generate": false,

  // Enables the incremental saving of notebooks between processes and across Remote connections. When enabled, only the changes to the notebook are sent to the extension host, improving performance for large notebooks and slow network connections.
  "notebook.experimental.remoteSave": false,

  // Enable the experimental notebook variables view within the debug panel.
  "notebook.experimental.variablesView": false,

  // Customize the Find Widget behavior for searching within notebook cells. When both markup source and markup preview are enabled, the Find Widget will search either the source code or preview based on the current state of the cell.
  "notebook.find.filters": {
    "markupSource": true,
    "markupPreview": true,
    "codeSource": true,
    "codeOutput": true
  },

  // Format a notebook cell upon execution. A formatter must be available.
  "notebook.formatOnCellExecution": false,

  // Format a notebook on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
  "notebook.formatOnSave.enabled": false,

  // Control whether to render a global toolbar inside the notebook editor.
  "notebook.globalToolbar": true,

  // Control whether the actions on the notebook toolbar should render label or not.
  "notebook.globalToolbarShowLabel": "always",

  // When enabled, the Go to Symbol Quick Pick will display full code symbols from the notebook, as well as Markdown headers.
  "notebook.gotoSymbols.showAllSymbols": true,

  // When enabled, insert a final new line into the end of code cells when saving a notebook.
  "notebook.insertFinalNewline": false,

  // Control where the insert cell actions should appear.
  //  - betweenCells: A toolbar that appears on hover between cells.
  //  - notebookToolbar: The toolbar at the top of the notebook editor.
  //  - both: Both toolbars.
  //  - hidden: The insert actions don't appear anywhere.
  "notebook.insertToolbarLocation": "both",

  // Controls the display of line numbers in the cell editor.
  "notebook.lineNumbers": "off",

  // Controls the line height in pixels of markdown cells in notebooks. When set to `0`, `normal` will be used
  "notebook.markdown.lineHeight": 0,

  // Controls the font size in pixels of rendered markup in notebooks. When set to `0`, 120% of `editor.fontSize` is used.
  "notebook.markup.fontSize": 0,

  // When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line.
  "notebook.navigation.allowNavigateToSurroundingCells": true,

  // When enabled, notebook outline shows code cells.
  "notebook.outline.showCodeCells": false,

  // When enabled, notebook outline shows code cell symbols. Relies on `notebook.outline.showCodeCells` being enabled.
  "notebook.outline.showCodeCellSymbols": true,

  // When enabled, notebook outline will show only markdown cells containing a header.
  "notebook.outline.showMarkdownHeadersOnly": true,

  // The font family of the output text within notebook cells. When set to empty, the `editor.fontFamily` is used.
  "notebook.output.fontFamily": "",

  // Font size for the output text within notebook cells. When set to 0, `editor.fontSize` is used.
  "notebook.output.fontSize": 0,

  // Line height of the output text within notebook cells.
  //  - When set to 0, editor line height is used.
  //  - Values between 0 and 8 will be used as a multiplier with the font size.
  //  - Values greater than or equal to 8 will be used as effective values.
  "notebook.output.lineHeight": 0,

  // Control whether to disable filepath links in the output of notebook cells.
  "notebook.output.linkifyFilePaths": true,

  // Control whether to render error output in a minimal style.
  "notebook.output.minimalErrorRendering": false,

  // Initially render notebook outputs in a scrollable region when longer than the limit.
  "notebook.output.scrolling": false,

  // Controls how many lines of text are displayed in a text output. If `notebook.output.scrolling` is enabled, this setting is used to determine the scroll height of the output.
  "notebook.output.textLineLimit": 30,

  // Controls whether the lines in output should wrap.
  "notebook.output.wordWrap": false,

  // How far to scroll when revealing the next cell upon running notebook.cell.executeAndSelectBelow.
  //  - fullCell: Scroll to fully reveal the next cell.
  //  - firstLine: Scroll to reveal the first line of the next cell.
  //  - none: Do not scroll.
  "notebook.scrolling.revealNextCellOnExecute": "fullCell",

  // Whether the cell status bar should be shown.
  //  - hidden: The cell Status bar is always hidden.
  //  - visible: The cell Status bar is always visible.
  //  - visibleAfterExecute: The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status.
  "notebook.showCellStatusBar": "visible",

  // Controls when the Markdown header folding arrow is shown.
  //  - always: The folding controls are always visible.
  //  - never: Never show the folding controls and reduce the gutter size.
  //  - mouseover: The folding controls are visible only on mouseover.
  "notebook.showFoldingControls": "mouseover",

  // Experimental. Control whether to render notebook Sticky Scroll headers in the notebook editor.
  "notebook.stickyScroll.enabled": false,

  // Control whether nested sticky lines appear to stack flat or indented.
  //  - flat: Nested sticky lines appear flat.
  //  - indented: Nested sticky lines appear indented.
  "notebook.stickyScroll.mode": "indented",

  // Whether to use separate undo/redo stack for each cell.
  "notebook.undoRedoPerCell": true,

  // Automatically scroll the interactive window to show the output of the last statement executed. If this value is false, the window will only scroll if the last cell was already the one scrolled to.
  "interactiveWindow.alwaysScrollOnNewCell": true,

  // Execute the interactive window (REPL) input box with shift+enter, so that enter can be used to create a newline.
  "interactiveWindow.executeWithShiftEnter": true,

  // Prompt to save the interactive window when it is closed. Only new interactive windows will be affected by this setting change.
  "interactiveWindow.promptToSaveOnClose": false,

  // When enabled slow renderers are automatically profiled
  "application.experimental.rendererProfiling": false,

  // Controls the timeout in seconds before giving up resolving the shell environment when the application is not already launched from a terminal. See our [documentation](https://go.microsoft.com/fwlink/?linkid=2149667) for more information.
  "application.shellEnvironmentResolutionTimeout": 10,

  // When enabled, available entitlements for the account will be show in the accounts menu.
  "workbench.accounts.experimental.showEntitlements": false,

  // When enabled, the chat panel welcome view will be shown.
  "workbench.chat.experimental.showWelcomeView": false,

  // When opening a file from the Explorer in a terminal, determines what kind of terminal will be launched
  //  - integrated: Use VS Code's integrated terminal.
  //  - external: Use the configured external terminal.
  //  - both: Use the other two together.
  "terminal.explorerKind": "integrated",

  // Customizes which terminal to run on Linux.
  "terminal.external.linuxExec": "xterm",

  // Customizes which terminal application to run on macOS.
  "terminal.external.osxExec": "Terminal.app",

  // Customizes which terminal to run on Windows.
  "terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe",

  // When opening a repository from the Source Control Repositories view in a terminal, determines what kind of terminal will be launched
  //  - integrated: Use VS Code's integrated terminal.
  //  - external: Use the configured external terminal.
  //  - both: Use the other two together.
  "terminal.sourceControlRepositoriesKind": "integrated",

  // Focus the terminal accessible view when a command is executed.
  "terminal.integrated.accessibleViewFocusOnCommandExecution": false,

  // Preserve the cursor position on reopen of the terminal's accessible view rather than setting it to the bottom of the buffer.
  "terminal.integrated.accessibleViewPreserveCursorPosition": false,

  // Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `terminal.integrated.commandsToSkipShell`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).
  "terminal.integrated.allowChords": true,

  // An array of strings containing the URI schemes that the terminal is allowed to open links for. By default, only a small subset of possible schemes are allowed for security reasons.
  "terminal.integrated.allowedLinkSchemes": ["file", "http", "https", "mailto", "vscode", "vscode-insiders"],

  // Whether to allow menubar mnemonics (for example Alt+F) to trigger the open of the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.
  "terminal.integrated.allowMnemonics": false,

  // If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when `editor.multiCursorModifier` is set to `'alt'` (the default value). This may not work reliably depending on your shell.
  "terminal.integrated.altClickMovesCursor": true,

  // The terminal profile to use on Linux for automation-related terminal usage like tasks and debug.
  "terminal.integrated.automationProfile.linux": null,

  // The terminal profile to use on macOS for automation-related terminal usage like tasks and debug.
  "terminal.integrated.automationProfile.osx": null,

  // The terminal profile to use for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.windows` (now deprecated) is set.
  "terminal.integrated.automationProfile.windows": null,

  // A set of messages that, when encountered in the terminal, will be automatically responded to. Provided the message is specific enough, this can help automate away common responses.
  //
  // Remarks:
  //
  // - Use `"Terminate batch job (Y/N)": "Y\r"` to automatically respond to the terminate batch job prompt on Windows.
  // - The message includes escape sequences so the reply might not happen with styled text.
  // - Each reply can only happen once every second.
  // - Use `"\r"` in the reply to mean the enter key.
  // - To unset a default key, set the value to null.
  // - Restart VS Code if new don't apply.
  "terminal.integrated.autoReplies": {},

  // The number of milliseconds to show the bell within a terminal tab when triggered.
  "terminal.integrated.bellDuration": 1000,

  // A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by VS Code. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.
  //
  // &nbsp;
  //
  // Many commands are skipped by default. To override a default and pass that command's keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.
  //
  // &nbsp;
  //
  // The following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, [open the default settings JSON](command:workbench.action.openRawDefaultSettings 'Open Default Settings (JSON)') and search for the first command from the list below.
  //
  // &nbsp;
  //
  // Default Skipped Commands:
  //
  // - editor.action.accessibilityHelp
  // - editor.action.toggleTabFocusMode
  // - notification.acceptPrimaryAction
  // - notifications.hideList
  // - notifications.hideToasts
  // - runCommands
  // - workbench.action.closeQuickOpen
  // - workbench.action.debug.continue
  // - workbench.action.debug.pause
  // - workbench.action.debug.restart
  // - workbench.action.debug.run
  // - workbench.action.debug.start
  // - workbench.action.debug.stepInto
  // - workbench.action.debug.stepOut
  // - workbench.action.debug.stepOver
  // - workbench.action.debug.stop
  // - workbench.action.firstEditorInGroup
  // - workbench.action.focusActiveEditorGroup
  // - workbench.action.focusEighthEditorGroup
  // - workbench.action.focusFifthEditorGroup
  // - workbench.action.focusFirstEditorGroup
  // - workbench.action.focusFourthEditorGroup
  // - workbench.action.focusLastEditorGroup
  // - workbench.action.focusNextPart
  // - workbench.action.focusPreviousPart
  // - workbench.action.focusSecondEditorGroup
  // - workbench.action.focusSeventhEditorGroup
  // - workbench.action.focusSixthEditorGroup
  // - workbench.action.focusThirdEditorGroup
  // - workbench.action.lastEditorInGroup
  // - workbench.action.navigateDown
  // - workbench.action.navigateLeft
  // - workbench.action.navigateRight
  // - workbench.action.navigateUp
  // - workbench.action.nextEditor
  // - workbench.action.nextEditorInGroup
  // - workbench.action.nextPanelView
  // - workbench.action.nextSideBarView
  // - workbench.action.openNextRecentlyUsedEditor
  // - workbench.action.openNextRecentlyUsedEditorInGroup
  // - workbench.action.openPreviousRecentlyUsedEditor
  // - workbench.action.openPreviousRecentlyUsedEditorInGroup
  // - workbench.action.previousEditor
  // - workbench.action.previousEditorInGroup
  // - workbench.action.previousPanelView
  // - workbench.action.previousSideBarView
  // - workbench.action.quickOpen
  // - workbench.action.quickOpenLeastRecentlyUsedEditor
  // - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
  // - workbench.action.quickOpenPreviousEditor
  // - workbench.action.quickOpenPreviousRecentlyUsedEditor
  // - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
  // - workbench.action.quickOpenView
  // - workbench.action.showCommands
  // - workbench.action.tasks.build
  // - workbench.action.tasks.reRunTask
  // - workbench.action.tasks.restartTask
  // - workbench.action.tasks.runTask
  // - workbench.action.tasks.showLog
  // - workbench.action.tasks.showTasks
  // - workbench.action.tasks.terminate
  // - workbench.action.tasks.test
  // - workbench.action.terminal.acceptSelectedSuggestion
  // - workbench.action.terminal.chat.cancel
  // - workbench.action.terminal.chat.close
  // - workbench.action.terminal.chat.discard
  // - workbench.action.terminal.chat.feedbackHelpful
  // - workbench.action.terminal.chat.feedbackReportIssue
  // - workbench.action.terminal.chat.feedbackUnhelpful
  // - workbench.action.terminal.chat.insertCommand
  // - workbench.action.terminal.chat.makeRequest
  // - workbench.action.terminal.chat.runCommand
  // - workbench.action.terminal.chat.start
  // - workbench.action.terminal.chat.viewInChat
  // - workbench.action.terminal.clear
  // - workbench.action.terminal.clearSelection
  // - workbench.action.terminal.copyAndClearSelection
  // - workbench.action.terminal.copyLastCommand
  // - workbench.action.terminal.copyLastCommandAndLastCommandOutput
  // - workbench.action.terminal.copyLastCommandOutput
  // - workbench.action.terminal.copySelection
  // - workbench.action.terminal.copySelectionAsHtml
  // - workbench.action.terminal.deleteToLineStart
  // - workbench.action.terminal.deleteWordLeft
  // - workbench.action.terminal.deleteWordRight
  // - workbench.action.terminal.findNext
  // - workbench.action.terminal.findPrevious
  // - workbench.action.terminal.focus
  // - workbench.action.terminal.focusAccessibleBuffer
  // - workbench.action.terminal.focusAtIndex1
  // - workbench.action.terminal.focusAtIndex2
  // - workbench.action.terminal.focusAtIndex3
  // - workbench.action.terminal.focusAtIndex4
  // - workbench.action.terminal.focusAtIndex5
  // - workbench.action.terminal.focusAtIndex6
  // - workbench.action.terminal.focusAtIndex7
  // - workbench.action.terminal.focusAtIndex8
  // - workbench.action.terminal.focusAtIndex9
  // - workbench.action.terminal.focusFind
  // - workbench.action.terminal.focusHover
  // - workbench.action.terminal.focusNext
  // - workbench.action.terminal.focusNextPane
  // - workbench.action.terminal.focusPrevious
  // - workbench.action.terminal.focusPreviousPane
  // - workbench.action.terminal.goToRecentDirectory
  // - workbench.action.terminal.hideFind
  // - workbench.action.terminal.hideSuggestWidget
  // - workbench.action.terminal.kill
  // - workbench.action.terminal.killEditor
  // - workbench.action.terminal.moveToEditor
  // - workbench.action.terminal.moveToLineEnd
  // - workbench.action.terminal.moveToLineStart
  // - workbench.action.terminal.moveToTerminalPanel
  // - workbench.action.terminal.new
  // - workbench.action.terminal.newInActiveWorkspace
  // - workbench.action.terminal.paste
  // - workbench.action.terminal.pasteSelection
  // - workbench.action.terminal.resizePaneDown
  // - workbench.action.terminal.resizePaneLeft
  // - workbench.action.terminal.resizePaneRight
  // - workbench.action.terminal.resizePaneUp
  // - workbench.action.terminal.runActiveFile
  // - workbench.action.terminal.runRecentCommand
  // - workbench.action.terminal.runSelectedText
  // - workbench.action.terminal.scrollDown
  // - workbench.action.terminal.scrollDownPage
  // - workbench.action.terminal.scrollToBottom
  // - workbench.action.terminal.scrollToNextCommand
  // - workbench.action.terminal.scrollToPreviousCommand
  // - workbench.action.terminal.scrollToTop
  // - workbench.action.terminal.scrollUp
  // - workbench.action.terminal.scrollUpPage
  // - workbench.action.terminal.searchWorkspace
  // - workbench.action.terminal.selectAll
  // - workbench.action.terminal.selectNextPageSuggestion
  // - workbench.action.terminal.selectNextSuggestion
  // - workbench.action.terminal.selectPrevPageSuggestion
  // - workbench.action.terminal.selectPrevSuggestion
  // - workbench.action.terminal.selectToNextCommand
  // - workbench.action.terminal.selectToNextLine
  // - workbench.action.terminal.selectToPreviousCommand
  // - workbench.action.terminal.selectToPreviousLine
  // - workbench.action.terminal.sendSequence
  // - workbench.action.terminal.sizeToContentWidth
  // - workbench.action.terminal.split
  // - workbench.action.terminal.splitInActiveWorkspace
  // - workbench.action.terminal.toggleFindCaseSensitive
  // - workbench.action.terminal.toggleFindRegex
  // - workbench.action.terminal.toggleFindWholeWord
  // - workbench.action.terminal.toggleTerminal
  // - workbench.action.toggleFullScreen
  // - workbench.action.toggleMaximizedPanel
  // - workbench.action.togglePanel
  "terminal.integrated.commandsToSkipShell": [],

  // Controls whether to confirm when the window closes if there are active terminal sessions.
  //  - never: Never confirm.
  //  - always: Always confirm if there are terminals.
  //  - hasChildProcesses: Confirm if there are any terminals that have child processes.
  "terminal.integrated.confirmOnExit": "never",

  // Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don't run their processes as child processes of the shell.
  //  - never: Never confirm.
  //  - editor: Confirm if the terminal is in the editor.
  //  - panel: Confirm if the terminal is in the panel.
  //  - always: Confirm if the terminal is either in the editor or panel.
  "terminal.integrated.confirmOnKill": "editor",

  // Controls whether text selected in the terminal will be copied to the clipboard.
  "terminal.integrated.copyOnSelection": false,

  // Controls whether the terminal cursor blinks.
  "terminal.integrated.cursorBlinking": false,

  // Controls the style of terminal cursor when the terminal is focused.
  "terminal.integrated.cursorStyle": "block",

  // Controls the style of terminal cursor when the terminal is not focused.
  "terminal.integrated.cursorStyleInactive": "outline",

  // Controls the width of the cursor when `terminal.integrated.cursorStyle` is set to `line`.
  "terminal.integrated.cursorWidth": 1,

  // Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn't work when `terminal.integrated.gpuAcceleration` is disabled.
  "terminal.integrated.customGlyphs": true,

  // An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
  "terminal.integrated.cwd": "",

  // Controls where newly created terminals will appear.
  //  - editor: Create terminals in the editor
  //  - view: Create terminals in the terminal view
  "terminal.integrated.defaultLocation": "view",

  // The default terminal profile on Linux.
  "terminal.integrated.defaultProfile.linux": null,

  // The default terminal profile on macOS.
  //  - null: Automatically detect the default
  //  - bash: $(terminal-bash) bash
  // - path: /bin/bash
  // - args: ['-l']
  //  - csh: $(terminal) csh
  // - path: /bin/csh
  //  - dash: $(terminal) dash
  // - path: /bin/dash
  //  - ksh: $(terminal) ksh
  // - path: /bin/ksh
  //  - sh: $(terminal) sh
  // - path: /bin/sh
  //  - tcsh: $(terminal) tcsh
  // - path: /bin/tcsh
  //  - zsh: $(terminal) zsh
  // - path: /bin/zsh
  // - args: ['-l']
  //  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
  // - extensionIdentifier: ms-vscode.js-debug
  "terminal.integrated.defaultProfile.osx": null,

  // The default terminal profile on Windows.
  "terminal.integrated.defaultProfile.windows": null,

  // Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.
  //  - auto: Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.
  //  - off: Do not set the `$LANG` environment variable.
  //  - on: Always set the `$LANG` environment variable.
  "terminal.integrated.detectLocale": "auto",

  // Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
  "terminal.integrated.drawBoldTextInBrightColors": true,

  // This is now deprecated. Instead use the `terminal.integrated.enableVisualBell` and `accessibility.signals.terminalBell` settings.
  //
  "terminal.integrated.enableBell": false,

  // Whether to enable file links in terminals. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.
  //  - off: Always off.
  //  - on: Always on.
  //  - notRemote: Enable only when not in a remote workspace.
  "terminal.integrated.enableFileLinks": "on",

  // Enables image support in the terminal, this will only work when `terminal.integrated.gpuAcceleration` is enabled. Both sixel and iTerm's inline image protocol are supported on Linux and macOS, Windows support will light up automatically when ConPTY passes through the sequences. Images will currently not be restored between window reloads/reconnects.
  "terminal.integrated.enableImages": false,

  // Controls whether to show a warning dialog when pasting multiple lines into the terminal.
  //  - auto: Enable the warning but do not show it when:
  //
  // - Bracketed paste mode is enabled (the shell supports multi-line paste natively)
  // - The paste is handled by the shell's readline (in the case of pwsh)
  //  - always: Always show the warning if the text contains a new line.
  //  - never: Never show the warning.
  "terminal.integrated.enableMultiLinePasteWarning": "auto",

  // Persist terminal sessions/history for the workspace across window reloads.
  "terminal.integrated.enablePersistentSessions": true,

  // Controls whether the visual terminal bell is enabled. This shows up next to the terminal's name.
  "terminal.integrated.enableVisualBell": false,

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
  "terminal.integrated.env.linux": {},

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
  "terminal.integrated.env.osx": {},

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
  "terminal.integrated.env.windows": {},

  // Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.
  //  - off: Disable the indicator.
  //  - on: Enable the indicator.
  //  - warnonly: Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension.
  "terminal.integrated.environmentChangesIndicator": "warnonly",

  // Whether to relaunch terminals automatically if extensions want to contribute to their environment and have not been interacted with yet.
  "terminal.integrated.environmentChangesRelaunch": true,

  // Scrolling speed multiplier when pressing `Alt`.
  "terminal.integrated.fastScrollSensitivity": 5,

  // Controls whether the terminal, accessible buffer, or neither will be focused after `Terminal: Run Selected Text In Active Terminal` has been run.
  //  - terminal: Always focus the terminal.
  //  - accessible-buffer: Always focus the accessible buffer.
  //  - none: Do nothing.
  "terminal.integrated.focusAfterRun": "none",

  // Controls the font family of the terminal. Defaults to `editor.fontFamily`'s value.
  "terminal.integrated.fontFamily": "",

  // Controls the font size in pixels of the terminal.
  "terminal.integrated.fontSize": 12,

  // The font weight to use within the terminal for non-bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
  "terminal.integrated.fontWeight": "normal",

  // The font weight to use within the terminal for bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
  "terminal.integrated.fontWeightBold": "bold",

  // Controls whether the terminal will leverage the GPU to do its rendering.
  //  - auto: Let VS Code detect which renderer will give the best experience.
  //  - on: Enable GPU acceleration within the terminal.
  //  - off: Disable GPU acceleration within the terminal. The terminal will render much slower when GPU acceleration is off but it should reliably work on all systems.
  "terminal.integrated.gpuAcceleration": "auto",

  // Whether to hide the terminal view on startup, avoiding creating a terminal when there are no persistent sessions.
  //  - never: Never hide the terminal view on startup.
  //  - whenEmpty: Only hide the terminal when there are no persistent sessions restored.
  //  - always: Always hide the terminal, even when there are persistent sessions restored.
  "terminal.integrated.hideOnStartup": "never",

  // Controls whether the terminal will ignore bracketed paste mode even if the terminal was put into the mode, omitting the `\x1b[200~` and `\x1b[201~` sequences when pasting. This is useful when the shell is not respecting the mode which can happen in sub-shells for example.
  "terminal.integrated.ignoreBracketedPasteMode": false,

  // A set of process names to ignore when using the `terminal.integrated.confirmOnKill` setting.
  "terminal.integrated.ignoreProcessNames": ["starship", "oh-my-posh", "bash", "zsh"],

  // Whether new shells should inherit their environment from VS Code, which may source a login shell to ensure $PATH and other development variables are initialized. This has no effect on Windows.
  "terminal.integrated.inheritEnv": true,

  // Controls if the first terminal without input will show a hint about available actions when it is focused.
  "terminal.integrated.initialHint": false,

  // Controls the letter spacing of the terminal. This is an integer value which represents the number of additional pixels to add between characters.
  "terminal.integrated.letterSpacing": 0,

  // Controls the line height of the terminal. This number is multiplied by the terminal font size to get the actual line-height in pixels.
  "terminal.integrated.lineHeight": 1,

  // When local echo should be enabled. This will override `terminal.integrated.localEchoLatencyThreshold`
  //  - on: Always enabled
  //  - off: Always disabled
  //  - auto: Enabled only for remote workspaces
  "terminal.integrated.localEchoEnabled": "auto",

  // Local echo will be disabled when any of these program names are found in the terminal title.
  "terminal.integrated.localEchoExcludePrograms": ["vim", "vi", "nano", "tmux"],

  // Length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled.
  "terminal.integrated.localEchoLatencyThreshold": 30,

  // Terminal style of locally echoed text; either a font style or an RGB color.
  "terminal.integrated.localEchoStyle": "dim",

  // Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
  "terminal.integrated.macOptionClickForcesSelection": false,

  // Controls whether to treat the option key as the meta key in the terminal on macOS.
  "terminal.integrated.macOptionIsMeta": false,

  // Controls how terminal reacts to middle click.
  //  - default: The platform default to focus the terminal. On Linux this will also paste the selection.
  //  - paste: Paste on middle click.
  "terminal.integrated.middleClickBehavior": "default",

  // When set, the foreground color of each cell will change to try meet the contrast ratio specified. Note that this will not apply to `powerline` characters per #146406. Example values:
  //
  // - 1: Do nothing and use the standard theme colors.
  // - 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (default).
  // - 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
  // - 21: White on black or black on white.
  "terminal.integrated.minimumContrastRatio": 4.5,

  // A multiplier to be used on the `deltaY` of mouse wheel scroll events.
  "terminal.integrated.mouseWheelScrollSensitivity": 1,

  // Zoom the font of the terminal when using mouse wheel and holding `Cmd`.
  "terminal.integrated.mouseWheelZoom": false,

  // When the terminal process must be shut down (for example on window or application close), this determines when the previous terminal session contents/history should be restored and processes be recreated when the workspace is next opened.
  //
  // Caveats:
  //
  // - Restoring of the process current working directory depends on whether it is supported by the shell.
  // - Time to persist the session during shutdown is limited, so it may be aborted when using high-latency remote connections.
  //  - onExit: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu).
  //  - onExitAndWindowClose: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed.
  //  - never: Never restore the terminal buffers or recreate the process.
  "terminal.integrated.persistentSessionReviveProcess": "onExit",

  // Controls the maximum amount of lines that will be restored when reconnecting to a persistent terminal session. Increasing this will restore more lines of scrollback at the cost of more memory and increase the time it takes to connect to terminals on start up. This setting requires a restart to take effect and should be set to a value less than or equal to `terminal.integrated.scrollback`.
  "terminal.integrated.persistentSessionScrollback": 100,

  // A set of terminal profile customizations for Linux which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.
  //
  // To override an existing profile use its profile name as the key, for example:
  //
  // ```json
  // "terminal.integrated.profile.linux": {
  //   "bash": null
  // }
  // ```
  //
  // [Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).
  "terminal.integrated.profiles.linux": {
    "bash": {
      "path": "bash",
      "icon": "terminal-bash"
    },
    "zsh": {
      "path": "zsh"
    },
    "fish": {
      "path": "fish"
    },
    "tmux": {
      "path": "tmux",
      "icon": "terminal-tmux"
    },
    "pwsh": {
      "path": "pwsh",
      "icon": "terminal-powershell"
    }
  },

  // A set of terminal profile customizations for Mac which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.
  //
  // To override an existing profile use its profile name as the key, for example:
  //
  // ```json
  // "terminal.integrated.profile.osx": {
  //   "bash": null
  // }
  // ```
  //
  // [Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).
  "terminal.integrated.profiles.osx": {
    "bash": {
      "path": "bash",
      "args": ["-l"],
      "icon": "terminal-bash"
    },
    "zsh": {
      "path": "zsh",
      "args": ["-l"]
    },
    "fish": {
      "path": "fish",
      "args": ["-l"]
    },
    "tmux": {
      "path": "tmux",
      "icon": "terminal-tmux"
    },
    "pwsh": {
      "path": "pwsh",
      "icon": "terminal-powershell"
    }
  },

  // A set of terminal profile customizations for Windows which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.
  //
  // To override an existing profile use its profile name as the key, for example:
  //
  // ```json
  // "terminal.integrated.profile.windows": {
  //   "bash": null
  // }
  // ```
  //
  // [Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).
  "terminal.integrated.profiles.windows": {
    "PowerShell": {
      "source": "PowerShell",
      "icon": "terminal-powershell"
    },
    "Command Prompt": {
      "path": ["${env:windir}\\Sysnative\\cmd.exe", "${env:windir}\\System32\\cmd.exe"],
      "args": [],
      "icon": "terminal-cmd"
    },
    "Git Bash": {
      "source": "Git Bash"
    }
  },

  // Whether to rescale glyphs horizontally that are a single cell wide but have glyphs that would overlap following cell(s). This typically happens for ambiguous width characters (eg. the roman numeral characters U+2160+) which aren't featured in monospace fonts. Emoji glyphs are never rescaled.
  "terminal.integrated.rescaleOverlappingGlyphs": true,

  // Controls how terminal reacts to right click.
  //  - default: Show the context menu.
  //  - copyPaste: Copy when there is a selection, otherwise paste.
  //  - paste: Paste on right click.
  //  - selectWord: Select the word under the cursor and show the context menu.
  //  - nothing: Do nothing and pass event to terminal.
  "terminal.integrated.rightClickBehavior": "selectWord",

  // Controls the maximum number of lines the terminal keeps in its buffer. We pre-allocate memory based on this value in order to ensure a smooth experience. As such, as the value increases, so will the amount of memory.
  "terminal.integrated.scrollback": 1000,

  // Dispatches most keybindings to the terminal instead of the workbench, overriding `terminal.integrated.commandsToSkipShell`, which can be used alternatively for fine tuning.
  "terminal.integrated.sendKeybindingsToShell": false,

  // When shell integration is enabled, adds a decoration for each command.
  //  - both: Show decorations in the gutter (left) and overview ruler (right)
  //  - gutter: Show gutter decorations to the left of the terminal
  //  - overviewRuler: Show overview ruler decorations to the right of the terminal
  //  - never: Do not show decorations
  "terminal.integrated.shellIntegration.decorationsEnabled": "both",

  // Determines whether or not shell integration is auto-injected to support features like enhanced command tracking and current working directory detection.
  //
  // Shell integration works by injecting the shell with a startup script. The script gives VS Code insight into what is happening within the terminal.
  //
  // Supported shells:
  //
  // - Linux/macOS: bash, fish, pwsh, zsh
  //  - Windows: pwsh, git bash
  //
  // This setting applies only when terminals are created, so you will need to restart your terminals for it to take effect.
  //
  //  Note that the script injection may not work if you have custom arguments defined in the terminal profile, have enabled `editor.accessibilitySupport#`, have a [complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand), or other unsupported setup. To disable decorations, see `#terminal.integrated.shellIntegrations.decorationsEnabled`
  "terminal.integrated.shellIntegration.enabled": true,

  // Controls the number of recently used commands to keep in the terminal command history. Set to 0 to disable terminal command history.
  "terminal.integrated.shellIntegration.history": 100,

  // This setting is deprecated, please use ``terminal.integrated.suggest.enabled`` instead.
  // Enables experimental terminal Intellisense suggestions for supported shells (PowerShell) when `terminal.integrated.shellIntegration.enabled` is set to `true`.
  //
  // If shell integration is installed manually, `VSCODE_SUGGEST` needs to be set to `1` before calling the shell integration script.
  "terminal.integrated.shellIntegration.suggestEnabled": false,

  // Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
  "terminal.integrated.showExitAlert": true,

  // Whether to show hovers for links in the terminal output.
  "terminal.integrated.showLinkHover": true,

  // Controls whether the terminal will scroll using an animation.
  "terminal.integrated.smoothScrolling": false,

  // Controls the working directory a split terminal starts with.
  //  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
  //  - initial: A new split terminal will use the working directory that the parent terminal started with.
  //  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
  "terminal.integrated.splitCwd": "inherited",

  // Shows the current command at the top of the terminal.
  "terminal.integrated.stickyScroll.enabled": false,

  // Defines the maximum number of sticky lines to show. Sticky scroll lines will never exceed 40% of the viewport regardless of this setting.
  "terminal.integrated.stickyScroll.maxLineCount": 5,

  // Enables experimental terminal Intellisense suggestions for supported shells (PowerShell) when `terminal.integrated.shellIntegration.enabled` is set to `true`.
  //
  // If shell integration is installed manually, `VSCODE_SUGGEST` needs to be set to `1` before calling the shell integration script.
  "terminal.integrated.suggest.enabled": false,

  // Controls whether suggestions should automatically show up while typing. Also be aware of the `terminal.integrated.suggest.suggestOnTriggerCharacters`-setting which controls if suggestions are triggered by special characters.
  "terminal.integrated.suggest.quickSuggestions": true,

  // Controls whether suggestions should automatically show up when typing trigger characters.
  "terminal.integrated.suggest.suggestOnTriggerCharacters": true,

  // A theme color ID to associate with terminal icons by default.
  "terminal.integrated.tabs.defaultColor": null,

  // A codicon ID to associate with terminal icons by default.
  //  - add: $(add)
  //  - plus: $(plus)
  //  - gist-new: $(gist-new)
  //  - repo-create: $(repo-create)
  //  - lightbulb: $(lightbulb)
  //  - light-bulb: $(light-bulb)
  //  - repo: $(repo)
  //  - repo-delete: $(repo-delete)
  //  - gist-fork: $(gist-fork)
  //  - repo-forked: $(repo-forked)
  //  - git-pull-request: $(git-pull-request)
  //  - git-pull-request-abandoned: $(git-pull-request-abandoned)
  //  - record-keys: $(record-keys)
  //  - keyboard: $(keyboard)
  //  - tag: $(tag)
  //  - git-pull-request-label: $(git-pull-request-label)
  //  - tag-add: $(tag-add)
  //  - tag-remove: $(tag-remove)
  //  - person: $(person)
  //  - person-follow: $(person-follow)
  //  - person-outline: $(person-outline)
  //  - person-filled: $(person-filled)
  //  - git-branch: $(git-branch)
  //  - git-branch-create: $(git-branch-create)
  //  - git-branch-delete: $(git-branch-delete)
  //  - source-control: $(source-control)
  //  - mirror: $(mirror)
  //  - mirror-public: $(mirror-public)
  //  - star: $(star)
  //  - star-add: $(star-add)
  //  - star-delete: $(star-delete)
  //  - star-empty: $(star-empty)
  //  - comment: $(comment)
  //  - comment-add: $(comment-add)
  //  - alert: $(alert)
  //  - warning: $(warning)
  //  - search: $(search)
  //  - search-save: $(search-save)
  //  - log-out: $(log-out)
  //  - sign-out: $(sign-out)
  //  - log-in: $(log-in)
  //  - sign-in: $(sign-in)
  //  - eye: $(eye)
  //  - eye-unwatch: $(eye-unwatch)
  //  - eye-watch: $(eye-watch)
  //  - circle-filled: $(circle-filled)
  //  - primitive-dot: $(primitive-dot)
  //  - close-dirty: $(close-dirty)
  //  - debug-breakpoint: $(debug-breakpoint)
  //  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
  //  - debug-hint: $(debug-hint)
  //  - terminal-decoration-success: $(terminal-decoration-success)
  //  - primitive-square: $(primitive-square)
  //  - edit: $(edit)
  //  - pencil: $(pencil)
  //  - info: $(info)
  //  - issue-opened: $(issue-opened)
  //  - gist-private: $(gist-private)
  //  - git-fork-private: $(git-fork-private)
  //  - lock: $(lock)
  //  - mirror-private: $(mirror-private)
  //  - close: $(close)
  //  - remove-close: $(remove-close)
  //  - x: $(x)
  //  - repo-sync: $(repo-sync)
  //  - sync: $(sync)
  //  - clone: $(clone)
  //  - desktop-download: $(desktop-download)
  //  - beaker: $(beaker)
  //  - microscope: $(microscope)
  //  - vm: $(vm)
  //  - device-desktop: $(device-desktop)
  //  - file: $(file)
  //  - file-text: $(file-text)
  //  - more: $(more)
  //  - ellipsis: $(ellipsis)
  //  - kebab-horizontal: $(kebab-horizontal)
  //  - mail-reply: $(mail-reply)
  //  - reply: $(reply)
  //  - organization: $(organization)
  //  - organization-filled: $(organization-filled)
  //  - organization-outline: $(organization-outline)
  //  - new-file: $(new-file)
  //  - file-add: $(file-add)
  //  - new-folder: $(new-folder)
  //  - file-directory-create: $(file-directory-create)
  //  - trash: $(trash)
  //  - trashcan: $(trashcan)
  //  - history: $(history)
  //  - clock: $(clock)
  //  - folder: $(folder)
  //  - file-directory: $(file-directory)
  //  - symbol-folder: $(symbol-folder)
  //  - logo-github: $(logo-github)
  //  - mark-github: $(mark-github)
  //  - github: $(github)
  //  - terminal: $(terminal)
  //  - console: $(console)
  //  - repl: $(repl)
  //  - zap: $(zap)
  //  - symbol-event: $(symbol-event)
  //  - error: $(error)
  //  - stop: $(stop)
  //  - variable: $(variable)
  //  - symbol-variable: $(symbol-variable)
  //  - array: $(array)
  //  - symbol-array: $(symbol-array)
  //  - symbol-module: $(symbol-module)
  //  - symbol-package: $(symbol-package)
  //  - symbol-namespace: $(symbol-namespace)
  //  - symbol-object: $(symbol-object)
  //  - symbol-method: $(symbol-method)
  //  - symbol-function: $(symbol-function)
  //  - symbol-constructor: $(symbol-constructor)
  //  - symbol-boolean: $(symbol-boolean)
  //  - symbol-null: $(symbol-null)
  //  - symbol-numeric: $(symbol-numeric)
  //  - symbol-number: $(symbol-number)
  //  - symbol-structure: $(symbol-structure)
  //  - symbol-struct: $(symbol-struct)
  //  - symbol-parameter: $(symbol-parameter)
  //  - symbol-type-parameter: $(symbol-type-parameter)
  //  - symbol-key: $(symbol-key)
  //  - symbol-text: $(symbol-text)
  //  - symbol-reference: $(symbol-reference)
  //  - go-to-file: $(go-to-file)
  //  - symbol-enum: $(symbol-enum)
  //  - symbol-value: $(symbol-value)
  //  - symbol-ruler: $(symbol-ruler)
  //  - symbol-unit: $(symbol-unit)
  //  - activate-breakpoints: $(activate-breakpoints)
  //  - archive: $(archive)
  //  - arrow-both: $(arrow-both)
  //  - arrow-down: $(arrow-down)
  //  - arrow-left: $(arrow-left)
  //  - arrow-right: $(arrow-right)
  //  - arrow-small-down: $(arrow-small-down)
  //  - arrow-small-left: $(arrow-small-left)
  //  - arrow-small-right: $(arrow-small-right)
  //  - arrow-small-up: $(arrow-small-up)
  //  - arrow-up: $(arrow-up)
  //  - bell: $(bell)
  //  - bold: $(bold)
  //  - book: $(book)
  //  - bookmark: $(bookmark)
  //  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
  //  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
  //  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
  //  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
  //  - debug-breakpoint-data: $(debug-breakpoint-data)
  //  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
  //  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
  //  - debug-breakpoint-log: $(debug-breakpoint-log)
  //  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
  //  - briefcase: $(briefcase)
  //  - broadcast: $(broadcast)
  //  - browser: $(browser)
  //  - bug: $(bug)
  //  - calendar: $(calendar)
  //  - case-sensitive: $(case-sensitive)
  //  - check: $(check)
  //  - checklist: $(checklist)
  //  - chevron-down: $(chevron-down)
  //  - chevron-left: $(chevron-left)
  //  - chevron-right: $(chevron-right)
  //  - chevron-up: $(chevron-up)
  //  - chrome-close: $(chrome-close)
  //  - chrome-maximize: $(chrome-maximize)
  //  - chrome-minimize: $(chrome-minimize)
  //  - chrome-restore: $(chrome-restore)
  //  - circle-outline: $(circle-outline)
  //  - circle: $(circle)
  //  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
  //  - terminal-decoration-incomplete: $(terminal-decoration-incomplete)
  //  - circle-slash: $(circle-slash)
  //  - circuit-board: $(circuit-board)
  //  - clear-all: $(clear-all)
  //  - clippy: $(clippy)
  //  - close-all: $(close-all)
  //  - cloud-download: $(cloud-download)
  //  - cloud-upload: $(cloud-upload)
  //  - code: $(code)
  //  - collapse-all: $(collapse-all)
  //  - color-mode: $(color-mode)
  //  - comment-discussion: $(comment-discussion)
  //  - credit-card: $(credit-card)
  //  - dash: $(dash)
  //  - dashboard: $(dashboard)
  //  - database: $(database)
  //  - debug-continue: $(debug-continue)
  //  - debug-disconnect: $(debug-disconnect)
  //  - debug-pause: $(debug-pause)
  //  - debug-restart: $(debug-restart)
  //  - debug-start: $(debug-start)
  //  - debug-step-into: $(debug-step-into)
  //  - debug-step-out: $(debug-step-out)
  //  - debug-step-over: $(debug-step-over)
  //  - debug-stop: $(debug-stop)
  //  - debug: $(debug)
  //  - device-camera-video: $(device-camera-video)
  //  - device-camera: $(device-camera)
  //  - device-mobile: $(device-mobile)
  //  - diff-added: $(diff-added)
  //  - diff-ignored: $(diff-ignored)
  //  - diff-modified: $(diff-modified)
  //  - diff-removed: $(diff-removed)
  //  - diff-renamed: $(diff-renamed)
  //  - diff: $(diff)
  //  - diff-sidebyside: $(diff-sidebyside)
  //  - discard: $(discard)
  //  - editor-layout: $(editor-layout)
  //  - empty-window: $(empty-window)
  //  - exclude: $(exclude)
  //  - extensions: $(extensions)
  //  - eye-closed: $(eye-closed)
  //  - file-binary: $(file-binary)
  //  - file-code: $(file-code)
  //  - file-media: $(file-media)
  //  - file-pdf: $(file-pdf)
  //  - file-submodule: $(file-submodule)
  //  - file-symlink-directory: $(file-symlink-directory)
  //  - file-symlink-file: $(file-symlink-file)
  //  - file-zip: $(file-zip)
  //  - files: $(files)
  //  - filter: $(filter)
  //  - flame: $(flame)
  //  - fold-down: $(fold-down)
  //  - fold-up: $(fold-up)
  //  - fold: $(fold)
  //  - folder-active: $(folder-active)
  //  - folder-opened: $(folder-opened)
  //  - gear: $(gear)
  //  - gift: $(gift)
  //  - gist-secret: $(gist-secret)
  //  - gist: $(gist)
  //  - git-commit: $(git-commit)
  //  - git-compare: $(git-compare)
  //  - compare-changes: $(compare-changes)
  //  - git-merge: $(git-merge)
  //  - github-action: $(github-action)
  //  - github-alt: $(github-alt)
  //  - globe: $(globe)
  //  - grabber: $(grabber)
  //  - graph: $(graph)
  //  - gripper: $(gripper)
  //  - heart: $(heart)
  //  - home: $(home)
  //  - horizontal-rule: $(horizontal-rule)
  //  - hubot: $(hubot)
  //  - inbox: $(inbox)
  //  - issue-reopened: $(issue-reopened)
  //  - issues: $(issues)
  //  - italic: $(italic)
  //  - jersey: $(jersey)
  //  - json: $(json)
  //  - kebab-vertical: $(kebab-vertical)
  //  - key: $(key)
  //  - law: $(law)
  //  - lightbulb-autofix: $(lightbulb-autofix)
  //  - link-external: $(link-external)
  //  - link: $(link)
  //  - list-ordered: $(list-ordered)
  //  - list-unordered: $(list-unordered)
  //  - live-share: $(live-share)
  //  - loading: $(loading)
  //  - location: $(location)
  //  - mail-read: $(mail-read)
  //  - mail: $(mail)
  //  - markdown: $(markdown)
  //  - megaphone: $(megaphone)
  //  - mention: $(mention)
  //  - milestone: $(milestone)
  //  - git-pull-request-milestone: $(git-pull-request-milestone)
  //  - mortar-board: $(mortar-board)
  //  - move: $(move)
  //  - multiple-windows: $(multiple-windows)
  //  - mute: $(mute)
  //  - no-newline: $(no-newline)
  //  - note: $(note)
  //  - octoface: $(octoface)
  //  - open-preview: $(open-preview)
  //  - package: $(package)
  //  - paintcan: $(paintcan)
  //  - pin: $(pin)
  //  - play: $(play)
  //  - run: $(run)
  //  - plug: $(plug)
  //  - preserve-case: $(preserve-case)
  //  - preview: $(preview)
  //  - project: $(project)
  //  - pulse: $(pulse)
  //  - question: $(question)
  //  - quote: $(quote)
  //  - radio-tower: $(radio-tower)
  //  - reactions: $(reactions)
  //  - references: $(references)
  //  - refresh: $(refresh)
  //  - regex: $(regex)
  //  - remote-explorer: $(remote-explorer)
  //  - remote: $(remote)
  //  - remove: $(remove)
  //  - replace-all: $(replace-all)
  //  - replace: $(replace)
  //  - repo-clone: $(repo-clone)
  //  - repo-force-push: $(repo-force-push)
  //  - repo-pull: $(repo-pull)
  //  - repo-push: $(repo-push)
  //  - report: $(report)
  //  - request-changes: $(request-changes)
  //  - rocket: $(rocket)
  //  - root-folder-opened: $(root-folder-opened)
  //  - root-folder: $(root-folder)
  //  - rss: $(rss)
  //  - ruby: $(ruby)
  //  - save-all: $(save-all)
  //  - save-as: $(save-as)
  //  - save: $(save)
  //  - screen-full: $(screen-full)
  //  - screen-normal: $(screen-normal)
  //  - search-stop: $(search-stop)
  //  - server: $(server)
  //  - settings-gear: $(settings-gear)
  //  - settings: $(settings)
  //  - shield: $(shield)
  //  - smiley: $(smiley)
  //  - sort-precedence: $(sort-precedence)
  //  - split-horizontal: $(split-horizontal)
  //  - split-vertical: $(split-vertical)
  //  - squirrel: $(squirrel)
  //  - star-full: $(star-full)
  //  - star-half: $(star-half)
  //  - symbol-class: $(symbol-class)
  //  - symbol-color: $(symbol-color)
  //  - symbol-constant: $(symbol-constant)
  //  - symbol-enum-member: $(symbol-enum-member)
  //  - symbol-field: $(symbol-field)
  //  - symbol-file: $(symbol-file)
  //  - symbol-interface: $(symbol-interface)
  //  - symbol-keyword: $(symbol-keyword)
  //  - symbol-misc: $(symbol-misc)
  //  - symbol-operator: $(symbol-operator)
  //  - symbol-property: $(symbol-property)
  //  - wrench: $(wrench)
  //  - wrench-subaction: $(wrench-subaction)
  //  - symbol-snippet: $(symbol-snippet)
  //  - tasklist: $(tasklist)
  //  - telescope: $(telescope)
  //  - text-size: $(text-size)
  //  - three-bars: $(three-bars)
  //  - thumbsdown: $(thumbsdown)
  //  - thumbsup: $(thumbsup)
  //  - tools: $(tools)
  //  - triangle-down: $(triangle-down)
  //  - triangle-left: $(triangle-left)
  //  - triangle-right: $(triangle-right)
  //  - triangle-up: $(triangle-up)
  //  - twitter: $(twitter)
  //  - unfold: $(unfold)
  //  - unlock: $(unlock)
  //  - unmute: $(unmute)
  //  - unverified: $(unverified)
  //  - verified: $(verified)
  //  - versions: $(versions)
  //  - vm-active: $(vm-active)
  //  - vm-outline: $(vm-outline)
  //  - vm-running: $(vm-running)
  //  - watch: $(watch)
  //  - whitespace: $(whitespace)
  //  - whole-word: $(whole-word)
  //  - window: $(window)
  //  - word-wrap: $(word-wrap)
  //  - zoom-in: $(zoom-in)
  //  - zoom-out: $(zoom-out)
  //  - list-filter: $(list-filter)
  //  - list-flat: $(list-flat)
  //  - list-selection: $(list-selection)
  //  - selection: $(selection)
  //  - list-tree: $(list-tree)
  //  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
  //  - debug-breakpoint-function: $(debug-breakpoint-function)
  //  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
  //  - debug-stackframe-active: $(debug-stackframe-active)
  //  - circle-small-filled: $(circle-small-filled)
  //  - debug-stackframe-dot: $(debug-stackframe-dot)
  //  - terminal-decoration-mark: $(terminal-decoration-mark)
  //  - debug-stackframe: $(debug-stackframe)
  //  - debug-stackframe-focused: $(debug-stackframe-focused)
  //  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
  //  - symbol-string: $(symbol-string)
  //  - debug-reverse-continue: $(debug-reverse-continue)
  //  - debug-step-back: $(debug-step-back)
  //  - debug-restart-frame: $(debug-restart-frame)
  //  - debug-alt: $(debug-alt)
  //  - call-incoming: $(call-incoming)
  //  - call-outgoing: $(call-outgoing)
  //  - menu: $(menu)
  //  - expand-all: $(expand-all)
  //  - feedback: $(feedback)
  //  - git-pull-request-reviewer: $(git-pull-request-reviewer)
  //  - group-by-ref-type: $(group-by-ref-type)
  //  - ungroup-by-ref-type: $(ungroup-by-ref-type)
  //  - account: $(account)
  //  - git-pull-request-assignee: $(git-pull-request-assignee)
  //  - bell-dot: $(bell-dot)
  //  - debug-console: $(debug-console)
  //  - library: $(library)
  //  - output: $(output)
  //  - run-all: $(run-all)
  //  - sync-ignored: $(sync-ignored)
  //  - pinned: $(pinned)
  //  - github-inverted: $(github-inverted)
  //  - server-process: $(server-process)
  //  - server-environment: $(server-environment)
  //  - pass: $(pass)
  //  - issue-closed: $(issue-closed)
  //  - stop-circle: $(stop-circle)
  //  - play-circle: $(play-circle)
  //  - record: $(record)
  //  - debug-alt-small: $(debug-alt-small)
  //  - vm-connect: $(vm-connect)
  //  - cloud: $(cloud)
  //  - merge: $(merge)
  //  - export: $(export)
  //  - graph-left: $(graph-left)
  //  - magnet: $(magnet)
  //  - notebook: $(notebook)
  //  - redo: $(redo)
  //  - check-all: $(check-all)
  //  - pinned-dirty: $(pinned-dirty)
  //  - pass-filled: $(pass-filled)
  //  - circle-large-filled: $(circle-large-filled)
  //  - circle-large: $(circle-large)
  //  - circle-large-outline: $(circle-large-outline)
  //  - combine: $(combine)
  //  - gather: $(gather)
  //  - table: $(table)
  //  - variable-group: $(variable-group)
  //  - type-hierarchy: $(type-hierarchy)
  //  - type-hierarchy-sub: $(type-hierarchy-sub)
  //  - type-hierarchy-super: $(type-hierarchy-super)
  //  - git-pull-request-create: $(git-pull-request-create)
  //  - run-above: $(run-above)
  //  - run-below: $(run-below)
  //  - notebook-template: $(notebook-template)
  //  - debug-rerun: $(debug-rerun)
  //  - workspace-trusted: $(workspace-trusted)
  //  - workspace-untrusted: $(workspace-untrusted)
  //  - workspace-unknown: $(workspace-unknown)
  //  - terminal-cmd: $(terminal-cmd)
  //  - terminal-debian: $(terminal-debian)
  //  - terminal-linux: $(terminal-linux)
  //  - terminal-powershell: $(terminal-powershell)
  //  - terminal-tmux: $(terminal-tmux)
  //  - terminal-ubuntu: $(terminal-ubuntu)
  //  - terminal-bash: $(terminal-bash)
  //  - arrow-swap: $(arrow-swap)
  //  - copy: $(copy)
  //  - person-add: $(person-add)
  //  - filter-filled: $(filter-filled)
  //  - wand: $(wand)
  //  - debug-line-by-line: $(debug-line-by-line)
  //  - inspect: $(inspect)
  //  - layers: $(layers)
  //  - layers-dot: $(layers-dot)
  //  - layers-active: $(layers-active)
  //  - compass: $(compass)
  //  - compass-dot: $(compass-dot)
  //  - compass-active: $(compass-active)
  //  - azure: $(azure)
  //  - issue-draft: $(issue-draft)
  //  - git-pull-request-closed: $(git-pull-request-closed)
  //  - git-pull-request-draft: $(git-pull-request-draft)
  //  - debug-all: $(debug-all)
  //  - debug-coverage: $(debug-coverage)
  //  - run-errors: $(run-errors)
  //  - folder-library: $(folder-library)
  //  - debug-continue-small: $(debug-continue-small)
  //  - beaker-stop: $(beaker-stop)
  //  - graph-line: $(graph-line)
  //  - graph-scatter: $(graph-scatter)
  //  - pie-chart: $(pie-chart)
  //  - bracket: $(bracket)
  //  - bracket-dot: $(bracket-dot)
  //  - bracket-error: $(bracket-error)
  //  - lock-small: $(lock-small)
  //  - azure-devops: $(azure-devops)
  //  - verified-filled: $(verified-filled)
  //  - newline: $(newline)
  //  - layout: $(layout)
  //  - layout-activitybar-left: $(layout-activitybar-left)
  //  - layout-activitybar-right: $(layout-activitybar-right)
  //  - layout-panel-left: $(layout-panel-left)
  //  - layout-panel-center: $(layout-panel-center)
  //  - layout-panel-justify: $(layout-panel-justify)
  //  - layout-panel-right: $(layout-panel-right)
  //  - layout-panel: $(layout-panel)
  //  - layout-sidebar-left: $(layout-sidebar-left)
  //  - layout-sidebar-right: $(layout-sidebar-right)
  //  - layout-statusbar: $(layout-statusbar)
  //  - layout-menubar: $(layout-menubar)
  //  - layout-centered: $(layout-centered)
  //  - target: $(target)
  //  - indent: $(indent)
  //  - record-small: $(record-small)
  //  - error-small: $(error-small)
  //  - terminal-decoration-error: $(terminal-decoration-error)
  //  - arrow-circle-down: $(arrow-circle-down)
  //  - arrow-circle-left: $(arrow-circle-left)
  //  - arrow-circle-right: $(arrow-circle-right)
  //  - arrow-circle-up: $(arrow-circle-up)
  //  - layout-sidebar-right-off: $(layout-sidebar-right-off)
  //  - layout-panel-off: $(layout-panel-off)
  //  - layout-sidebar-left-off: $(layout-sidebar-left-off)
  //  - blank: $(blank)
  //  - heart-filled: $(heart-filled)
  //  - map: $(map)
  //  - map-horizontal: $(map-horizontal)
  //  - fold-horizontal: $(fold-horizontal)
  //  - map-filled: $(map-filled)
  //  - map-horizontal-filled: $(map-horizontal-filled)
  //  - fold-horizontal-filled: $(fold-horizontal-filled)
  //  - circle-small: $(circle-small)
  //  - bell-slash: $(bell-slash)
  //  - bell-slash-dot: $(bell-slash-dot)
  //  - comment-unresolved: $(comment-unresolved)
  //  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
  //  - git-pull-request-new-changes: $(git-pull-request-new-changes)
  //  - search-fuzzy: $(search-fuzzy)
  //  - comment-draft: $(comment-draft)
  //  - send: $(send)
  //  - sparkle: $(sparkle)
  //  - insert: $(insert)
  //  - mic: $(mic)
  //  - thumbsdown-filled: $(thumbsdown-filled)
  //  - thumbsup-filled: $(thumbsup-filled)
  //  - coffee: $(coffee)
  //  - snake: $(snake)
  //  - game: $(game)
  //  - vr: $(vr)
  //  - chip: $(chip)
  //  - piano: $(piano)
  //  - music: $(music)
  //  - mic-filled: $(mic-filled)
  //  - repo-fetch: $(repo-fetch)
  //  - copilot: $(copilot)
  //  - lightbulb-sparkle: $(lightbulb-sparkle)
  //  - robot: $(robot)
  //  - sparkle-filled: $(sparkle-filled)
  //  - diff-single: $(diff-single)
  //  - diff-multiple: $(diff-multiple)
  //  - surround-with: $(surround-with)
  //  - share: $(share)
  //  - git-stash: $(git-stash)
  //  - git-stash-apply: $(git-stash-apply)
  //  - git-stash-pop: $(git-stash-pop)
  //  - vscode: $(vscode)
  //  - vscode-insiders: $(vscode-insiders)
  //  - code-oss: $(code-oss)
  //  - run-coverage: $(run-coverage)
  //  - run-all-coverage: $(run-all-coverage)
  //  - coverage: $(coverage)
  //  - github-project: $(github-project)
  //  - map-vertical: $(map-vertical)
  //  - fold-vertical: $(fold-vertical)
  //  - map-vertical-filled: $(map-vertical-filled)
  //  - fold-vertical-filled: $(fold-vertical-filled)
  //  - go-to-search: $(go-to-search)
  //  - percentage: $(percentage)
  //  - sort-percentage: $(sort-percentage)
  //  - attach: $(attach)
  //  - dialog-error: $(dialog-error)
  //  - dialog-warning: $(dialog-warning)
  //  - dialog-info: $(dialog-info)
  //  - dialog-close: $(dialog-close)
  //  - tree-item-expanded: $(tree-item-expanded)
  //  - tree-filter-on-type-on: $(tree-filter-on-type-on)
  //  - tree-filter-on-type-off: $(tree-filter-on-type-off)
  //  - tree-filter-clear: $(tree-filter-clear)
  //  - tree-item-loading: $(tree-item-loading)
  //  - menu-selection: $(menu-selection)
  //  - menu-submenu: $(menu-submenu)
  //  - menubar-more: $(menubar-more)
  //  - scrollbar-button-left: $(scrollbar-button-left)
  //  - scrollbar-button-right: $(scrollbar-button-right)
  //  - scrollbar-button-up: $(scrollbar-button-up)
  //  - scrollbar-button-down: $(scrollbar-button-down)
  //  - toolbar-more: $(toolbar-more)
  //  - quick-input-back: $(quick-input-back)
  //  - drop-down-button: $(drop-down-button)
  //  - symbol-customcolor: $(symbol-customcolor)
  //  - export: $(export)
  //  - workspace-unspecified: $(workspace-unspecified)
  //  - newline: $(newline)
  //  - thumbsdown-filled: $(thumbsdown-filled)
  //  - thumbsup-filled: $(thumbsup-filled)
  //  - git-fetch: $(git-fetch)
  //  - lightbulb-sparkle-autofix: $(lightbulb-sparkle-autofix)
  //  - debug-breakpoint-pending: $(debug-breakpoint-pending)
  "terminal.integrated.tabs.defaultIcon": "terminal",

  // Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:
  // - `${cwd}`: the terminal's current working directory
  // - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
  // - `${workspaceFolder}`: the workspace in which the terminal was launched
  // - `${local}`: indicates a local terminal in a remote workspace
  // - `${process}`: the name of the terminal process
  // - `${separator}`: a conditional separator (` - `) that only shows when surrounded by variables with values or static text.
  // - `${sequence}`: the name provided to the terminal by the process
  // - `${task}`: indicates this terminal is associated with a task
  "terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

  // Controls whether terminal tab statuses support animation (eg. in progress tasks).
  "terminal.integrated.tabs.enableAnimation": true,

  // Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.
  "terminal.integrated.tabs.enabled": true,

  // Controls whether focusing the terminal of a tab happens on double or single click.
  //  - singleClick: Focus the terminal when clicking a terminal tab
  //  - doubleClick: Focus the terminal when double-clicking a terminal tab
  "terminal.integrated.tabs.focusMode": "doubleClick",

  // Controls whether the terminal tabs view will hide under certain conditions.
  //  - never: Never hide the terminal tabs view
  //  - singleTerminal: Hide the terminal tabs view when there is only a single terminal opened
  //  - singleGroup: Hide the terminal tabs view when there is only a single terminal group opened
  "terminal.integrated.tabs.hideCondition": "singleTerminal",

  // Controls the location of the terminal tabs, either to the left or right of the actual terminal(s).
  //  - left: Show the terminal tabs view to the left of the terminal
  //  - right: Show the terminal tabs view to the right of the terminal
  "terminal.integrated.tabs.location": "right",

  // Separator used by `terminal.integrated.tabs.title#` and `#terminal.integrated.tabs.description`.
  "terminal.integrated.tabs.separator": " - ",

  // Controls whether terminal split and kill buttons are displays next to the new terminal button.
  //  - always: Always show the actions
  //  - singleTerminal: Show the actions when it is the only terminal opened
  //  - singleTerminalOrNarrow: Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state
  //  - never: Never show the actions
  "terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

  // Shows the active terminal information in the view. This is particularly useful when the title within the tabs aren't visible.
  //  - always: Always show the active terminal
  //  - singleTerminal: Show the active terminal when it is the only terminal opened
  //  - singleTerminalOrNarrow: Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state
  //  - never: Never show the active terminal
  "terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

  // Controls the terminal title. Variables are substituted based on the context:
  // - `${cwd}`: the terminal's current working directory
  // - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
  // - `${workspaceFolder}`: the workspace in which the terminal was launched
  // - `${local}`: indicates a local terminal in a remote workspace
  // - `${process}`: the name of the terminal process
  // - `${separator}`: a conditional separator (` - `) that only shows when surrounded by variables with values or static text.
  // - `${sequence}`: the name provided to the terminal by the process
  // - `${task}`: indicates this terminal is associated with a task
  "terminal.integrated.tabs.title": "${process}",

  // The number of cells in a tab stop.
  "terminal.integrated.tabStopWidth": 8,

  // Controls what version of Unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.
  //  - 6: Version 6 of Unicode. This is an older version which should work better on older systems.
  //  - 11: Version 11 of Unicode. This version provides better support on modern systems that use modern versions of Unicode.
  "terminal.integrated.unicodeVersion": "11",

  // Controls whether or not WSL distros are shown in the terminal dropdown
  "terminal.integrated.useWslProfiles": true,

  // Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.
  "terminal.integrated.windowsEnableConpty": true,

  // A string containing all characters to be considered word separators when double-clicking to select word and in the fallback 'word' link detection. Since this is used for link detection, including characters such as `:` that are used when detecting links will cause the line and column part of links like `file:10:5` to be ignored.
  "terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’“”|",

  // Enable automatic tasks - note that tasks won't run in an untrusted workspace.
  //  - on: Always
  //  - off: Never
  "task.allowAutomaticTasks": "on",

  // Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.
  "task.autoDetect": "on",

  // Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.
  "task.problemMatchers.neverPrompt": false,

  // Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.
  "task.quickOpen.detail": true,

  // Controls the number of recent items tracked in task quick open dialog.
  "task.quickOpen.history": 30,

  // Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.
  "task.quickOpen.showAll": false,

  // Controls whether the task quick pick is skipped when there is only one task to pick from.
  "task.quickOpen.skip": false,

  // On window reload, reconnect to tasks that have problem matchers.
  "task.reconnection": true,

  // Save all dirty editors before running a task.
  //  - always: Always saves all editors before running.
  //  - never: Never saves editors before running.
  //  - prompt: Prompts whether to save editors before running.
  "task.saveBeforeRun": "always",

  // Configures whether a warning is shown when a provider is slow
  "task.slowProviderWarning": true,

  // Enable verbose logging for tasks.
  "task.verboseLogging": false,

  // Controls whether Problems view should automatically reveal files when opening them.
  "problems.autoReveal": true,

  // Show Errors & Warnings on files and folder. Overwritten by `problems.visibility` when it is off.
  "problems.decorations.enabled": true,

  // Controls the default view mode of the Problems view.
  "problems.defaultViewMode": "tree",

  // When enabled shows the current problem in the status bar.
  "problems.showCurrentInStatus": false,

  // Controls the order in which problems are navigated.
  //  - severity: Navigate problems ordered by severity
  //  - position: Navigate problems ordered by position
  "problems.sortOrder": "severity",

  // Controls whether the problems are visible throughout the editor and workbench.
  "problems.visibility": true,

  // Enable/disable navigation breadcrumbs.
  "breadcrumbs.enabled": true,

  // Controls whether and how file paths are shown in the breadcrumbs view.
  //  - on: Show the file path in the breadcrumbs view.
  //  - off: Do not show the file path in the breadcrumbs view.
  //  - last: Only show the last element of the file path in the breadcrumbs view.
  "breadcrumbs.filePath": "on",

  // Render breadcrumb items with icons.
  "breadcrumbs.icons": true,

  // When enabled breadcrumbs show `array`-symbols.
  "breadcrumbs.showArrays": true,

  // When enabled breadcrumbs show `boolean`-symbols.
  "breadcrumbs.showBooleans": true,

  // When enabled breadcrumbs show `class`-symbols.
  "breadcrumbs.showClasses": true,

  // When enabled breadcrumbs show `constant`-symbols.
  "breadcrumbs.showConstants": true,

  // When enabled breadcrumbs show `constructor`-symbols.
  "breadcrumbs.showConstructors": true,

  // When enabled breadcrumbs show `enumMember`-symbols.
  "breadcrumbs.showEnumMembers": true,

  // When enabled breadcrumbs show `enum`-symbols.
  "breadcrumbs.showEnums": true,

  // When enabled breadcrumbs show `event`-symbols.
  "breadcrumbs.showEvents": true,

  // When enabled breadcrumbs show `field`-symbols.
  "breadcrumbs.showFields": true,

  // When enabled breadcrumbs show `file`-symbols.
  "breadcrumbs.showFiles": true,

  // When enabled breadcrumbs show `function`-symbols.
  "breadcrumbs.showFunctions": true,

  // When enabled breadcrumbs show `interface`-symbols.
  "breadcrumbs.showInterfaces": true,

  // When enabled breadcrumbs show `key`-symbols.
  "breadcrumbs.showKeys": true,

  // When enabled breadcrumbs show `method`-symbols.
  "breadcrumbs.showMethods": true,

  // When enabled breadcrumbs show `module`-symbols.
  "breadcrumbs.showModules": true,

  // When enabled breadcrumbs show `namespace`-symbols.
  "breadcrumbs.showNamespaces": true,

  // When enabled breadcrumbs show `null`-symbols.
  "breadcrumbs.showNull": true,

  // When enabled breadcrumbs show `number`-symbols.
  "breadcrumbs.showNumbers": true,

  // When enabled breadcrumbs show `object`-symbols.
  "breadcrumbs.showObjects": true,

  // When enabled breadcrumbs show `operator`-symbols.
  "breadcrumbs.showOperators": true,

  // When enabled breadcrumbs show `package`-symbols.
  "breadcrumbs.showPackages": true,

  // When enabled breadcrumbs show `property`-symbols.
  "breadcrumbs.showProperties": true,

  // When enabled breadcrumbs show `string`-symbols.
  "breadcrumbs.showStrings": true,

  // When enabled breadcrumbs show `struct`-symbols.
  "breadcrumbs.showStructs": true,

  // When enabled breadcrumbs show `typeParameter`-symbols.
  "breadcrumbs.showTypeParameters": true,

  // When enabled breadcrumbs show `variable`-symbols.
  "breadcrumbs.showVariables": true,

  // Controls whether and how symbols are shown in the breadcrumbs view.
  //  - on: Show all symbols in the breadcrumbs view.
  //  - off: Do not show symbols in the breadcrumbs view.
  //  - last: Only show the current symbol in the breadcrumbs view.
  "breadcrumbs.symbolPath": "on",

  // Controls how symbols are sorted in the breadcrumbs outline view.
  //  - position: Show symbol outline in file position order.
  //  - name: Show symbol outline in alphabetical order.
  //  - type: Show symbol outline in symbol type order.
  "breadcrumbs.symbolSortOrder": "position",

  // Controls whether Outline items are collapsed or expanded.
  //  - alwaysCollapse: Collapse all items.
  //  - alwaysExpand: Expand all items.
  "outline.collapseItems": "alwaysExpand",

  // Render Outline elements with icons.
  "outline.icons": true,

  // Use badges for errors and warnings on Outline elements. Overwritten by `problems.visibility` when it is off.
  "outline.problems.badges": true,

  // Use colors for errors and warnings on Outline elements. Overwritten by `problems.visibility` when it is off.
  "outline.problems.colors": true,

  // Show errors and warnings on Outline elements. Overwritten by `problems.visibility` when it is off.
  "outline.problems.enabled": true,

  // When enabled, Outline shows `array`-symbols.
  "outline.showArrays": true,

  // When enabled, Outline shows `boolean`-symbols.
  "outline.showBooleans": true,

  // When enabled, Outline shows `class`-symbols.
  "outline.showClasses": true,

  // When enabled, Outline shows `constant`-symbols.
  "outline.showConstants": true,

  // When enabled, Outline shows `constructor`-symbols.
  "outline.showConstructors": true,

  // When enabled, Outline shows `enumMember`-symbols.
  "outline.showEnumMembers": true,

  // When enabled, Outline shows `enum`-symbols.
  "outline.showEnums": true,

  // When enabled, Outline shows `event`-symbols.
  "outline.showEvents": true,

  // When enabled, Outline shows `field`-symbols.
  "outline.showFields": true,

  // When enabled, Outline shows `file`-symbols.
  "outline.showFiles": true,

  // When enabled, Outline shows `function`-symbols.
  "outline.showFunctions": true,

  // When enabled, Outline shows `interface`-symbols.
  "outline.showInterfaces": true,

  // When enabled, Outline shows `key`-symbols.
  "outline.showKeys": true,

  // When enabled, Outline shows `method`-symbols.
  "outline.showMethods": true,

  // When enabled, Outline shows `module`-symbols.
  "outline.showModules": true,

  // When enabled, Outline shows `namespace`-symbols.
  "outline.showNamespaces": true,

  // When enabled, Outline shows `null`-symbols.
  "outline.showNull": true,

  // When enabled, Outline shows `number`-symbols.
  "outline.showNumbers": true,

  // When enabled, Outline shows `object`-symbols.
  "outline.showObjects": true,

  // When enabled, Outline shows `operator`-symbols.
  "outline.showOperators": true,

  // When enabled, Outline shows `package`-symbols.
  "outline.showPackages": true,

  // When enabled, Outline shows `property`-symbols.
  "outline.showProperties": true,

  // When enabled, Outline shows `string`-symbols.
  "outline.showStrings": true,

  // When enabled, Outline shows `struct`-symbols.
  "outline.showStructs": true,

  // When enabled, Outline shows `typeParameter`-symbols.
  "outline.showTypeParameters": true,

  // When enabled, Outline shows `variable`-symbols.
  "outline.showVariables": true,

  // Specifies whether to allow opening multiple instances of the _Commit Graph_ in the editor area
  "gitlens.graph.allowMultiple": true,

  // Specifies whether to show avatar images instead of author initials and remote icons in the _Commit Graph_
  "gitlens.graph.avatars": true,

  // Specifies the order by which commits will be shown on the _Commit Graph_
  //  - date: Shows commits in reverse chronological order of the commit timestamp
  //  - author-date: Shows commits in reverse chronological order of the author timestamp
  //  - topo: Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history
  "gitlens.graph.commitOrdering": "date",

  // Specifies how absolute dates will be formatted in the _Commit Graph_. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
  "gitlens.graph.dateFormat": null,

  // Specifies how dates will be displayed in the _Commit Graph_
  //  - relative: e.g. 1 day ago
  //  - absolute: e.g. July 25th, 2018 7:18pm
  "gitlens.graph.dateStyle": null,

  // Specifies the default number of items to show in the _Commit Graph_. Use 0 to specify no limit
  "gitlens.graph.defaultItemLimit": 500,

  // Specifies whether to dim (deemphasize) merge commit rows in the _Commit Graph_
  "gitlens.graph.dimMergeCommits": false,

  // Specifies whether to highlight rows associated with the branch / tag when hovering over it in the _Commit Graph_
  "gitlens.graph.highlightRowsOnRefHover": true,

  // Specifies the preferred layout of the _Commit Graph_
  //  - editor: Prefer showing the Commit Graph in the editor area
  //  - panel: Prefer showing the Commit Graph in the bottom panel
  "gitlens.graph.layout": "panel",

  // Specifies additional markers to show on the minimap in the _Commit Graph_
  //  - localBranches: Marks the location of local branches
  //  - remoteBranches: Marks the location of remote branches
  //  - stashes: Marks the location of stashes
  //  - tags: Marks the location of tags
  "gitlens.graph.minimap.additionalTypes": ["localBranches", "stashes"],

  // Specifies the data to show on the minimap in the _Commit Graph_
  //  - commits: Shows the number of commits per day in the minimap
  //  - lines: Shows the number of lines changed per day in the minimap
  "gitlens.graph.minimap.dataType": "commits",

  // Specifies whether to show a minimap of commit activity above the _Commit Graph_
  "gitlens.graph.minimap.enabled": true,

  // Specifies whether to only follow the first parent when showing commits on the _Commit Graph_
  "gitlens.graph.onlyFollowFirstParent": false,

  // Specifies the number of additional items to fetch when paginating in the _Commit Graph_. Use 0 to specify no limit
  "gitlens.graph.pageItemLimit": 200,

  // Specifies whether to show associated pull requests on remote branches in the _Commit Graph_. Requires a connection to a supported remote service (e.g. GitHub)
  "gitlens.graph.pullRequests.enabled": true,

  // Specifies additional markers to show on the scrollbar in the _Commit Graph_
  //  - localBranches: Marks the location of local branches
  //  - remoteBranches: Marks the location of remote branches
  //  - stashes: Marks the location of stashes
  //  - tags: Marks the location of tags
  "gitlens.graph.scrollMarkers.additionalTypes": ["localBranches", "stashes"],

  // Specifies whether to show markers on the scrollbar in the _Commit Graph_
  "gitlens.graph.scrollMarkers.enabled": true,

  // Specifies the number of rows from the edge at which the graph will scroll when using keyboard or search to change the selected row
  "gitlens.graph.scrollRowPadding": 0,

  // Specifies the number of results to gather when searching in the _Commit Graph_. Use 0 to specify no limit
  "gitlens.graph.searchItemLimit": 100,

  // Specifies when to show the _Commit Details_ view for the selected row in the _Commit Graph_
  //  - false: Never shows the _Commit Details_ view automatically
  //  - open: Shows the _Commit Details_ view automatically only when opening the _Commit Graph_
  //  - selection: Shows the _Commit Details_ view automatically when selection changes in the _Commit Graph_
  "gitlens.graph.showDetailsView": "selection",

  // Specifies whether to show a ghost branch / tag when hovering over or selecting a row in the _Commit Graph_
  "gitlens.graph.showGhostRefsOnRowHover": true,

  // Specifies whether to show remote names on remote branches in the _Commit Graph_
  "gitlens.graph.showRemoteNames": false,

  // Specifies whether to show a local branch's upstream status in the _Commit Graph_
  "gitlens.graph.showUpstreamStatus": true,

  // Specifies whether to show the _Commit Graph_ in the status bar
  "gitlens.graph.statusBar.enabled": true,

  // Specifies whether to enable the preview of _Cloud Patches_, which allow you to easily and securely share code with your teammates or other developers
  "gitlens.cloudPatches.enabled": true,

  // Specifies whether to allow opening multiple instances of the _Launchpad_ as an editor tab
  "gitlens.launchpad.allowMultiple": true,

  // Specifies an experimental limit on the number of pull requests to be queried in the _Launchpad_
  "gitlens.launchpad.experimental.queryLimit": 100,

  // Specifies an experimental flag whether to use the `involves` filter in the GraphQL query for _Launchpad_
  "gitlens.launchpad.experimental.queryUseInvolvesFilter": true,

  // Specifies the organizations to ignore in the _Launchpad_
  "gitlens.launchpad.ignoredOrganizations": [],

  // Specifies the repositories to ignore in the _Launchpad_
  "gitlens.launchpad.ignoredRepositories": [],

  // Specifies whether to enable status bar indicator for _Launchpad_
  "gitlens.launchpad.indicator.enabled": true,

  // Specifies the groups of pull requests to show on the _Launchpad_ status bar indicator
  //  - mergeable: Shows mergeable pull requests
  //  - blocked: Shows blocked pull requests
  //  - needs-review: Shows pull requests needing your review
  //  - follow-up: Shows pull requests needing follow-up
  "gitlens.launchpad.indicator.groups": ["mergeable", "blocked", "needs-review", "follow-up"],

  // Specifies the style of the  _Launchpad_ status bar indicator icon
  //  - default: Shows the Launchpad icon
  //  - group: Shows the icon of the highest priority group
  "gitlens.launchpad.indicator.icon": "default",

  // Specifies the display of the  _Launchpad_ status bar indicator label
  //  - false: Hides the label
  //  - item: Shows the highest priority item which needs your attention
  //  - counts: Shows the status counts of items which need your attention
  "gitlens.launchpad.indicator.label": "item",

  // Specifies whether to open _Launchpad_ as an editor tab when clicking on the status bar indicator
  "gitlens.launchpad.indicator.openInEditor": false,

  // Specifies whether the status bar indicator will fetch and display pull request data for _Launchpad_
  "gitlens.launchpad.indicator.polling.enabled": true,

  // Specifies the rate (in minutes) at which the status bar indicator will fetch pull request data for _Launchpad_. Use 0 to disable automatic polling
  "gitlens.launchpad.indicator.polling.interval": 30,

  // Specifies whether to use colors on the _Launchpad_ status bar indicator
  "gitlens.launchpad.indicator.useColors": false,

  // Specifies the number of days after which a pull request is considered stale and moved to Other in the _Launchpad_
  "gitlens.launchpad.staleThreshold": null,

  // Specifies whether to allow opening multiple instances of the _Visual File History_ in the editor area
  "gitlens.visualHistory.allowMultiple": true,

  // Specifies the limit on the how many commits can be queried for statistics in the _Visual File History_, because of rate limits. Only applies to virtual workspaces.
  "gitlens.visualHistory.queryLimit": 20,

  // Specifies how Git commits are displayed in the _Interactive Rebase Editor_
  //  - asc: Shows oldest commit first
  //  - desc: Shows newest commit first
  "gitlens.rebaseEditor.ordering": "desc",

  // Specifies when to show the _Commit Details_ view for the selected row in the _Interactive Rebase Editor_
  //  - false: Never shows the _Commit Details_ view automatically
  //  - open: Shows the _Commit Details_ view automatically only when opening the _Interactive Rebase Editor_
  //  - selection: Shows the _Commit Details_ view automatically when selection changes in the _Interactive Rebase Editor_
  "gitlens.rebaseEditor.showDetailsView": "selection",

  // Specifies whether to show avatar images in quick pick menus when applicable
  "gitlens.gitCommands.avatars": true,

  // Specifies whether to dismiss the _Git Command Palette_ when focus is lost (if not, press `ESC` to dismiss)
  "gitlens.gitCommands.closeOnFocusOut": true,

  // Specifies whether to match all or any commit message search patterns
  "gitlens.gitCommands.search.matchAll": false,

  // Specifies whether to match commit search patterns with or without regard to casing
  "gitlens.gitCommands.search.matchCase": false,

  // Specifies whether to match commit search patterns using regular expressions
  "gitlens.gitCommands.search.matchRegex": true,

  // Specifies whether to show the commit search results directly in the quick pick menu, in the Side Bar, or will be based on the context
  "gitlens.gitCommands.search.showResultsInSideBar": null,

  // Deprecated. This setting has been renamed to `gitlens.gitCommands.search.showResultsInSideBar`
  //
  "gitlens.gitCommands.search.showResultsInView": null,

  // Specifies which (and when) Git commands will skip the confirmation step, using the format: `git-command-name:(menu|command)`
  //  - branch-create:command: Skips branch create confirmations when run from a command, e.g. a view action
  //  - branch-create:menu: Skips branch create confirmations when run from the Git Command Palette
  //  - co-authors:command: Skips co-author confirmations when run from a command, e.g. a view action
  //  - co-authors:menu: Skips co-author confirmations when run from the Git Command Palette
  //  - fetch:command: Skips fetch confirmations when run from a command, e.g. a view action
  //  - fetch:menu: Skips fetch confirmations when run from the Git Command Palette
  //  - pull:command: Skips pull confirmations when run from a command, e.g. a view action
  //  - pull:menu: Skips pull confirmations when run from the Git Command Palette
  //  - push:command: Skips push confirmations when run from a command, e.g. a view action
  //  - push:menu: Skips push confirmations when run from the Git Command Palette
  //  - stash-apply:command: Skips stash apply confirmations when run from a command, e.g. a view action
  //  - stash-apply:menu: Skips stash apply confirmations when run from the Git Command Palette
  //  - stash-pop:command: Skips stash pop confirmations when run from a command, e.g. a view action
  //  - stash-pop:menu: Skips stash pop confirmations when run from the Git Command Palette
  //  - stash-push:command: Skips stash push confirmations when run from a command, e.g. a view action
  //  - stash-push:menu: Skips stash push confirmations when run from the Git Command Palette
  //  - switch:command: Skips switch confirmations when run from a command, e.g. a view action
  //  - switch:menu: Skips switch confirmations when run from the Git Command Palette
  //  - tag-create:command: Skips tag create confirmations when run from a command, e.g. a view action
  //  - tag-create:menu: Skips tag create confirmations when run from the Git Command Palette
  "gitlens.gitCommands.skipConfirmations": ["fetch:command", "stash-push:command"],

  // Specifies how Git commands are sorted in the _Git Command Palette_
  //  - name: Sorts commands by name
  //  - usage: Sorts commands by last used date
  "gitlens.gitCommands.sortBy": "usage",

  // Specifies autolinks to external resources in commit messages. Use `<num>` as the variable for the reference number
  "gitlens.autolinks": null,

  // Specifies whether to enable rich integrations with any supported remote services
  "gitlens.integrations.enabled": true,

  // Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share
  "gitlens.liveshare.allowGuestAccess": true,

  // Specifies whether to enable integration with Visual Studio Live Share
  "gitlens.liveshare.enabled": true,

  // Specifies the configuration of a partner integration
  "gitlens.partners": null,

  // Specifies custom remote services to be matched with Git remotes to detect custom domains for built-in remote services or provide support for custom remote services
  "gitlens.remotes": null,

  // Specifies whether to use VS Code as Git's `core.editor` for Gitlens terminal commands
  "gitlens.terminal.overrideGitEditor": true,

  // Specifies whether to enable terminal links &mdash; autolinks in the integrated terminal to quickly jump to more details for commits, branches, tags, and more
  "gitlens.terminalLinks.enabled": true,

  // Specifies whether to show the _Commit Details_ view when clicking on a commit link in the integrated terminal
  "gitlens.terminalLinks.showDetailsView": true,

  // Specifies whether to enable GitLens' experimental, AI-powered, on-demand commit message generation
  "gitlens.ai.experimental.generateCommitMessage.enabled": true,

  // Specifies the AI model to use for GitLens' experimental AI features
  //  - openai:gpt-4o: OpenAI GPT-4 Omni
  //  - openai:gpt-4-turbo: OpenAI GPT-4 Turbo with Vision
  //  - openai:gpt-4-turbo-preview: OpenAI GPT-4 Turbo Preview
  //  - openai:gpt-4: OpenAI GPT-4
  //  - openai:gpt-4-32k: OpenAI GPT-4 32k
  //  - openai:gpt-3.5-turbo: OpenAI GPT-3.5 Turbo
  //  - openai:gpt-3.5-turbo-16k: OpenAI GPT-3.5 Turbo 16k
  //  - anthropic:claude-3-opus-20240229: Anthropic Claude 3 Opus
  //  - anthropic:claude-3-5-sonnet-20240620: Anthropic Claude 3.5 Sonnet
  //  - anthropic:claude-3-sonnet-20240229: Anthropic Claude 3 Sonnet
  //  - anthropic:claude-3-haiku-20240307: Anthropic Claude 3 Haiku
  //  - anthropic:claude-2.1: Anthropic Claude 2.1
  //  - anthropic:claude-2: Anthropic Claude 2
  //  - anthropic:claude-instant-1: Anthropic Claude Instant 1.2
  //  - google:gemini-1.5-pro-latest: Google Gemini 1.5 Pro (Latest)
  //  - google:gemini-1.5-flash-latest: Google Gemini 1.5 Flash
  //  - google:gemini-1.0-pro: Google Gemini 1.0 Pro
  //  - vscode: VS Code Extension
  "gitlens.ai.experimental.model": null,

  // Specifies a custom URL to use for access to an OpenAI model via Azure. Azure URLs should be in the following format: https://{your-resource-name}.openai.azure.com/openai/deployments/{deployment-id}/chat/completions?api-version={api-version}
  "gitlens.ai.experimental.openai.url": null,

  // Specifies the VS Code provided model to use for GitLens' experimental AI features, formatted as `vendor:family`
  "gitlens.ai.experimental.vscode.model": null,

  // Specifies the prompt to use to tell the AI provider how to structure or format the generated title and description
  "gitlens.experimental.generateCloudPatchMessagePrompt": "Now, please generate a title and optional description. Ensure that it includes a precise and informative subject line that succinctly summarizes the crux of the changes in under 50 characters. If necessary, follow with an explanatory body providing insight into the nature of the changes, the reasoning behind them, and any significant consequences or considerations arising from them. Conclude with any relevant issue references at the end of the message.",

  // Specifies the prompt to use to tell the AI provider how to structure or format the generated title and description
  "gitlens.experimental.generateCodeSuggestMessagePrompt": "Now, please generate a title and optional description. Ensure that it includes a precise and informative subject line that succinctly summarizes the crux of the changes in under 50 characters. If necessary, follow with an explanatory body providing insight into the nature of the changes, the reasoning behind them, and any significant consequences or considerations arising from them. Conclude with any relevant issue references at the end of the message.",

  // Specifies the prompt to use to tell the AI provider how to structure or format the generated commit message
  "gitlens.experimental.generateCommitMessagePrompt": "Now, please generate a commit message. Ensure that it includes a precise and informative subject line that succinctly summarizes the crux of the changes in under 50 characters. If necessary, follow with an explanatory body providing insight into the nature of the changes, the reasoning behind them, and any significant consequences or considerations arising from them. Conclude with any relevant issue references at the end of the message.",

  // Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.
  "timeline.pageOnScroll": false,

  // The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view.
  "timeline.pageSize": null,

  // Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
  "gitlens.defaultDateFormat": null,

  // Specifies the locale, a [BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag#List_of_major_primary_language_subtags), to use for date formatting, defaults to the VS Code locale. Use `system` to follow the current system locale, or choose a specific locale, e.g `en-US` — US English, `en-GB` — British English, `de-DE` — German, `ja-JP` = Japanese, etc.
  "gitlens.defaultDateLocale": null,

  // Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
  "gitlens.defaultDateShortFormat": null,

  // Specifies whether commit dates should use the authored or committed date
  //  - authored: Uses the date when the changes were authored (i.e. originally written)
  //  - committed: Uses the date when the changes were committed
  "gitlens.defaultDateSource": "authored",

  // Specifies how dates will be displayed by default
  //  - relative: e.g. 1 day ago
  //  - absolute: e.g. July 25th, 2018 7:18pm
  "gitlens.defaultDateStyle": "relative",

  // Specifies how times will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
  "gitlens.defaultTimeFormat": null,

  // Specifies how branches are sorted in quick pick menus and views
  //  - date:desc: Sorts branches by the most recent commit date in descending order
  //  - date:asc: Sorts branches by the most recent commit date in ascending order
  //  - name:asc: Sorts branches by name in ascending order
  //  - name:desc: Sorts branches by name in descending order
  "gitlens.sortBranchesBy": "date:desc",

  // Specifies how contributors are sorted in quick pick menus and views
  //  - count:desc: Sorts contributors by commit count in descending order
  //  - count:asc: Sorts contributors by commit count in ascending order
  //  - date:desc: Sorts contributors by the most recent commit date in descending order
  //  - date:asc: Sorts contributors by the most recent commit date in ascending order
  //  - name:asc: Sorts contributors by name in ascending order
  //  - name:desc: Sorts contributors by name in descending order
  "gitlens.sortContributorsBy": "count:desc",

  // Specifies how repositories are sorted in quick pick menus and views
  //  - discovered: Sorts repositories by discovery or workspace order
  //  - lastFetched:desc: Sorts repositories by last fetched date in descending order
  //  - lastFetched:asc: Sorts repositories by last fetched date in ascending order
  //  - name:asc: Sorts repositories by name in ascending order
  //  - name:desc: Sorts repositories by name in descending order
  "gitlens.sortRepositoriesBy": "discovered",

  // Specifies how tags are sorted in quick pick menus and views
  //  - date:desc: Sorts tags by date in descending order
  //  - date:asc: Sorts tags by date in ascending order
  //  - name:asc: Sorts tags by name in ascending order
  //  - name:desc: Sorts tags by name in descending order
  "gitlens.sortTagsBy": "date:desc",

  // Specifies which commands will be added to which menus
  "gitlens.menus": {
    "editor": {
      "blame": true,
      "clipboard": true,
      "compare": true,
      "history": true,
      "remote": true
    },
    "editorGroup": {
      "blame": true,
      "compare": true
    },
    "editorGutter": {
      "compare": true,
      "remote": true,
      "share": true
    },
    "editorTab": {
      "clipboard": true,
      "compare": true,
      "history": true,
      "remote": true
    },
    "explorer": {
      "clipboard": true,
      "compare": true,
      "history": true,
      "remote": true
    },
    "ghpr": {
      "worktree": true
    },
    "scm": {
      "graph": true
    },
    "scmRepositoryInline": {
      "graph": true,
      "stash": false
    },
    "scmRepository": {
      "authors": true,
      "generateCommitMessage": true,
      "patch": true,
      "graph": false
    },
    "scmGroupInline": {
      "stash": true
    },
    "scmGroup": {
      "compare": true,
      "openClose": true,
      "patch": true,
      "stash": true
    },
    "scmItemInline": {
      "stash": false
    },
    "scmItem": {
      "clipboard": true,
      "compare": true,
      "history": true,
      "remote": true,
      "share": true,
      "stash": true
    }
  },

  // Specifies the keymap to use for GitLens shortcut keys
  //  - alternate: Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)
  //  - chorded: Adds a chorded set of shortcut keys that start with `Ctrl+Shift+G` (`⌥⌘G` on macOS)
  //  - none: No shortcut keys will be added
  "gitlens.keymap": "chorded",

  // Specifies the active GitLens mode, if any
  "gitlens.mode.active": "",

  // Specifies the active GitLens mode alignment in the status bar
  //  - left: Aligns to the left
  //  - right: Aligns to the right
  "gitlens.mode.statusBar.alignment": "right",

  // Specifies whether to provide the active GitLens mode in the status bar
  "gitlens.mode.statusBar.enabled": true,

  // Specifies the user-defined GitLens modes
  "gitlens.modes": {
    "zen": {
      "name": "Zen",
      "statusBarItemName": "Zen",
      "description": "for a zen-like experience, disables many visual features",
      "codeLens": false,
      "currentLine": false,
      "hovers": false,
      "statusBar": false
    },
    "review": {
      "name": "Review",
      "statusBarItemName": "Reviewing",
      "description": "for reviewing code, enables many visual features",
      "codeLens": true,
      "currentLine": true,
      "hovers": true
    }
  },

  // Specifies the ID of the user's active GitKraken organization in GitLens
  "gitlens.gitKraken.activeOrganizationId": "",

  // (Experimental) Specifies the preferred layout of for _Cloud Patches_
  //  - editor: Prefer showing Cloud Patches in the editor area
  //  - view: Prefer showing Cloud Patches in a view
  "gitlens.cloudPatches.experimental.layout": "view",

  // Specifies the length of abbreviated commit SHAs
  "gitlens.advanced.abbreviatedShaLength": 7,

  // Specifies whether to copy full or abbreviated commit SHAs to the clipboard. Abbreviates to the length of `gitlens.advanced.abbreviatedShaLength`.
  "gitlens.advanced.abbreviateShaOnCopy": false,

  // Specifies additional arguments to pass to the `git blame` command
  "gitlens.advanced.blame.customArguments": null,

  // Specifies whether git output will be cached — changing the default is not recommended
  "gitlens.advanced.caching.enabled": true,

  // Specifies the order by which commits will be shown. If unspecified, commits will be shown in reverse chronological order
  //  - null: Shows commits in reverse chronological order
  //  - date: Shows commits in reverse chronological order of the commit timestamp
  //  - author-date: Shows commits in reverse chronological order of the author timestamp
  //  - topo: Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history
  "gitlens.advanced.commitOrdering": null,

  // Specifies an optional external diff tool to use when comparing files. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
  "gitlens.advanced.externalDiffTool": null,

  // Specifies an optional external diff tool to use when comparing directories. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
  "gitlens.advanced.externalDirectoryDiffTool": null,

  // Specifies the maximum number of items to show in a list. Use 0 to specify no maximum
  "gitlens.advanced.maxListItems": 200,

  // Specifies the maximum number of items to show in a search. Use 0 to specify no maximum
  "gitlens.advanced.maxSearchItems": 200,

  // Specifies which messages should be suppressed
  "gitlens.advanced.messages": {
    "suppressCommitHasNoPreviousCommitWarning": false,
    "suppressCommitNotFoundWarning": false,
    "suppressCreatePullRequestPrompt": false,
    "suppressDebugLoggingWarning": false,
    "suppressFileNotUnderSourceControlWarning": false,
    "suppressGitDisabledWarning": false,
    "suppressGitMissingWarning": false,
    "suppressGitVersionWarning": false,
    "suppressLineUncommittedWarning": false,
    "suppressNoRepositoryWarning": false,
    "suppressRebaseSwitchToTextWarning": false,
    "suppressIntegrationDisconnectedTooManyFailedRequestsWarning": false,
    "suppressIntegrationRequestFailed500Warning": false,
    "suppressIntegrationRequestTimedOutWarning": false,
    "suppressBlameInvalidIgnoreRevsFileWarning": false,
    "suppressBlameInvalidIgnoreRevsFileBadRevisionWarning": false
  },

  // Specifies whether to dismiss quick pick menus when focus is lost (if not, press `ESC` to dismiss)
  "gitlens.advanced.quickPick.closeOnFocusOut": true,

  // Specifies how many folders deep to search for repositories. Defaults to `git.repositoryScanMaxDepth`
  "gitlens.advanced.repositorySearchDepth": null,

  // Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename
  "gitlens.advanced.similarityThreshold": null,

  // Deprecated. This setting is no longer used
  // Deprecated. This setting is no longer used
  "gitlens.advanced.useSymmetricDifferenceNotation": null,

  // Specifies whether to ignore whitespace when comparing revisions during blame operations
  "gitlens.blame.ignoreWhitespace": false,

  // Specifies debug mode
  "gitlens.debug": false,

  // Specifies whether to override the default deep link scheme (vscode://) with the environment value or a specified value
  "gitlens.deepLinks.schemeOverride": false,

  // Specifies whether to attempt to detect nested repositories when opening files
  "gitlens.detectNestedRepositories": false,

  // Specifies whether to allow GitLens to send product usage telemetry.
  //
  // _**Note:** For GitLens to send any telemetry BOTH this setting and VS Code telemetry must be enabled. If either one is disabled no telemetry will be sent._
  "gitlens.telemetry.enabled": true,

  // Configure settings to be overridden for the ansibleazure-pipelinescssdockerfiledockercomposehtmljsonjsonclesspostcssscssstylusvueyaml language.
  "[ansible][azure-pipelines][css][dockerfile][dockercompose][html][json][jsonc][less][postcss][scss][stylus][vue][yaml]": {
    "gitlens.codeLens.scopes": ["document"]
  },

  // Configure settings to be overridden for the c language.
  "[c]": {
    "editor.wordBasedSuggestions": "off",
    "editor.suggest.insertMode": "replace",
    "editor.semanticHighlighting.enabled": true
  },

  // Configure settings to be overridden for the clojure language.
  "[clojure]": {
    "diffEditor.ignoreTrimWhitespace": false
  },

  // Configure settings to be overridden for the coffeescript language.
  "[coffeescript]": {
    "diffEditor.ignoreTrimWhitespace": false
  },

  // Configure settings to be overridden for the cpp language.
  "[cpp]": {
    "editor.wordBasedSuggestions": "off",
    "editor.suggest.insertMode": "replace",
    "editor.semanticHighlighting.enabled": true
  },

  // Configure settings to be overridden for the csharp language.
  "[csharp]": {
    "editor.maxTokenizationLineLength": 2500
  },

  // Configure settings to be overridden for the css language.
  "[css]": {
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the cuda-cpp language.
  "[cuda-cpp]": {
    "editor.wordBasedSuggestions": "off",
    "editor.suggest.insertMode": "replace",
    "editor.semanticHighlighting.enabled": true
  },

  // Configure settings to be overridden for the django-html language.
  "[django-html]": {
    "editor.quickSuggestions": {
      "other": true,
      "comments": true,
      "strings": true
    }
  },

  // Configure settings to be overridden for the dockercompose language.
  "[dockercompose]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": "advanced"
  },

  // Configure settings to be overridden for the dockerfile language.
  "[dockerfile]": {
    "editor.quickSuggestions": {
      "strings": true
    }
  },

  // Configure settings to be overridden for the dynamic csvcsvtsvcsv (semicolon)csv (pipe)csv (whitespace) language.
  "[dynamic csv][csv][tsv][csv (semicolon)][csv (pipe)][csv (whitespace)]": {
    "editor.semanticHighlighting.enabled": true,
    "editor.stickyScroll.enabled": true
  },

  // Configure settings to be overridden for the fsharp language.
  "[fsharp]": {
    "diffEditor.ignoreTrimWhitespace": false
  },

  // Configure settings to be overridden for the git-commit language.
  "[git-commit]": {
    "editor.rulers": [50, 72],
    "editor.wordWrap": "off",
    "workbench.editor.restoreViewState": false
  },

  // Configure settings to be overridden for the git-rebase language.
  "[git-rebase]": {
    "workbench.editor.restoreViewState": false
  },

  // Configure settings to be overridden for the go language.
  "[go]": {
    "editor.insertSpaces": false,
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
      "source.organizeImports": true
    }
  },

  // Configure settings to be overridden for the handlebars language.
  "[handlebars]": {
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the html language.
  "[html]": {
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the jade language.
  "[jade]": {
    "diffEditor.ignoreTrimWhitespace": false
  },

  // Configure settings to be overridden for the javascript language.
  "[javascript]": {
    "editor.maxTokenizationLineLength": 2500
  },

  // Configure settings to be overridden for the json language.
  "[json]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the jsonc language.
  "[jsonc]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the latex language.
  "[latex]": {
    "editor.formatOnPaste": false,
    "editor.suggestSelection": "recentlyUsedByPrefix"
  },

  // Configure settings to be overridden for the less language.
  "[less]": {
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the makefile language.
  "[makefile]": {
    "editor.insertSpaces": false
  },

  // Configure settings to be overridden for the markdown language.
  "[markdown]": {
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false,
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.wordWrap": "on",
    "editor.quickSuggestions": {
      "comments": "off",
      "strings": "off",
      "other": "off"
    }
  },

  // Configure settings to be overridden for the plaintext language.
  "[plaintext]": {
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false
  },

  // Configure settings to be overridden for the python language.
  "[python]": {
    "diffEditor.ignoreTrimWhitespace": false,
    "gitlens.codeLens.symbolScopes": ["!Module"],
    "editor.formatOnType": true,
    "editor.wordBasedSuggestions": "off"
  },

  // Configure settings to be overridden for the scss language.
  "[scss]": {
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the search-result language.
  "[search-result]": {
    "editor.lineNumbers": "off"
  },

  // Configure settings to be overridden for the shellscript language.
  "[shellscript]": {
    "files.eol": "\n"
  },

  // Configure settings to be overridden for the yaml language.
  "[yaml]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": "advanced",
    "diffEditor.ignoreTrimWhitespace": false
  },

  // The name under which the remote tunnel access is registered. If not set, the host name is used.
  "remote.tunnels.access.hostNameOverride": "",

  // Prevent this computer from sleeping when remote tunnel access is turned on.
  "remote.tunnels.access.preventSleep": false,

  // When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded.
  "remote.autoForwardPorts": true,

  // The number of auto forwarded ports that will trigger the switch from `process` to `hybrid` when automatically forwarding ports and `remote.autoForwardPortsSource` is set to `process` by default. Set to `0` to disable the fallback. When `remote.autoForwardPortsFallback` hasn't been configured, but `remote.autoForwardPortsSource` has, `remote.autoForwardPortsFallback` will be treated as though it's set to `0`.
  "remote.autoForwardPortsFallback": 20,

  // Sets the source from which ports are automatically forwarded when `remote.autoForwardPorts` is true. On Windows and macOS remotes, the `process` and `hybrid` options have no effect and `output` will be used.
  //  - process: Ports will be automatically forwarded when discovered by watching for processes that are started and include a port.
  //  - output: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be "un-forwarded" until reload or until the port is closed by the user in the Ports view.
  //  - hybrid: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports will be "un-forwarded" by watching for processes that listen on that port to be terminated.
  "remote.autoForwardPortsSource": "process",

  // When enabled extensions are downloaded locally and installed on remote.
  "remote.downloadExtensionsLocally": false,

  // Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
  "remote.extensionKind": {
    "pub.name": ["ui"]
  },

  // Controls whether local URLs with a port will be forwarded when opened from the terminal and the debug console.
  "remote.forwardOnOpen": true,

  // Specifies the local host name that will be used for port forwarding.
  "remote.localPortHost": "localhost",

  // Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:
  //
  // ```
  // {
  //   "onAutoForward": "ignore"
  // }
  // ```
  "remote.otherPortsAttributes": {},

  // Set properties that are applied when a specific port number is forwarded. For example:
  //
  // ```
  // "3000": {
  //   "label": "Application"
  // },
  // "40000-55000": {
  //   "onAutoForward": "ignore"
  // },
  // ".+\\/server.js": {
  //  "onAutoForward": "openPreview"
  // }
  // ```
  "remote.portsAttributes": {
    "443": {
      "protocol": "https"
    },
    "8443": {
      "protocol": "https"
    }
  },

  // Restores the ports you forwarded in a workspace.
  "remote.restoreForwardedPorts": true,

  // Set the color mode for native UI elements such as native dialogs, menus and title bar. Even if your OS is configured in light color mode, you can select a dark system color theme for the window. You can also configure to automatically adjust based on the `workbench.colorTheme` setting.
  //
  // Note: This setting is ignored when `window.autoDetectColorScheme` is enabled.
  //  - default: Native widget colors match the system colors.
  //  - auto: Use light native widget colors for light color themes and dark for dark color themes.
  //  - light: Use light native widget colors.
  //  - dark: Use dark native widget colors.
  "window.systemColorTheme": "default",

  // On keypress, close the Accessible View and focus the element from which it was invoked.
  "accessibility.accessibleView.closeOnKeyPress": true,

  // Configures the behavior of signals (audio cues and announcements) in the workbench. Includes volume, debounce position changes, and delays for different types of signals.
  "accessibility.signalOptions": {
    "volume": 70,
    "debouncePositionChanges": false,
    "experimental.delays": {
      "general": {
        "announcement": 3000,
        "sound": 400
      },
      "warningAtPosition": {
        "announcement": 3000,
        "sound": 1000
      },
      "errorAtPosition": {
        "announcement": 3000,
        "sound": 1000
      }
    }
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a chat request is made.
  "accessibility.signals.chatRequestSent": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a sound / audio cue when the response has been received.
  "accessibility.signals.chatResponseReceived": {
    "sound": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a feature is cleared (for example, the terminal, Debug Console, or Output channel).
  "accessibility.signals.clear": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a sound / audio cue when the focus moves to an deleted line in Accessible Diff Viewer mode or to the next/previous change.
  "accessibility.signals.diffLineDeleted": {
    "sound": "auto"
  },

  // Plays a sound / audio cue when the focus moves to an inserted line in Accessible Diff Viewer mode or to the next/previous change.
  "accessibility.signals.diffLineInserted": {
    "sound": "auto"
  },

  // Plays a sound / audio cue when the focus moves to an modified line in Accessible Diff Viewer mode or to the next/previous change.
  "accessibility.signals.diffLineModified": {
    "sound": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a file or notebook is formatted.
  "accessibility.signals.format": {
    "sound": "never",
    "announcement": "never"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a breakpoint.
  "accessibility.signals.lineHasBreakpoint": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has an error.
  "accessibility.signals.lineHasError": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - the active line has a folded area that can be unfolded.
  "accessibility.signals.lineHasFoldedArea": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a sound / audio cue when the active line has an inline suggestion.
  "accessibility.signals.lineHasInlineSuggestion": {
    "sound": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.
  "accessibility.signals.lineHasWarning": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when trying to read a line with inlay hints that has no inlay hints.
  "accessibility.signals.noInlayHints": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a notebook cell execution is successfully completed.
  "accessibility.signals.notebookCellCompleted": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a notebook cell execution fails.
  "accessibility.signals.notebookCellFailed": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the debugger stopped on a breakpoint.
  "accessibility.signals.onDebugBreak": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.
  "accessibility.signals.positionHasError": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.
  "accessibility.signals.positionHasWarning": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - on loop while progress is occurring.
  "accessibility.signals.progress": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a file is saved.
  "accessibility.signals.save": {
    "sound": "never",
    "announcement": "never"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a task is completed.
  "accessibility.signals.taskCompleted": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a task fails (non-zero exit code).
  "accessibility.signals.taskFailed": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the terminal bell is ringing.
  "accessibility.signals.terminalBell": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a terminal command fails (non-zero exit code) or when a command with such an exit code is navigated to in the accessible view.
  "accessibility.signals.terminalCommandFailed": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a terminal command succeeds (zero exit code) or when a command with such an exit code is navigated to in the accessible view.
  "accessibility.signals.terminalCommandSucceeded": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a signal - sound (audio cue) and/or announcement (alert) - when terminal Quick Fixes are available.
  "accessibility.signals.terminalQuickFix": {
    "sound": "auto",
    "announcement": "auto"
  },

  // Plays a sound / audio cue when the voice recording has started.
  "accessibility.signals.voiceRecordingStarted": {
    "sound": "on"
  },

  // Plays a sound / audio cue when the voice recording has stopped.
  "accessibility.signals.voiceRecordingStopped": {
    "sound": "auto"
  },

  // Provide information about actions that can be taken in the comment widget or in a file which contains comments.
  "accessibility.verbosity.comments": true,

  // Provide information about how to navigate changes in the diff editor when it is focused.
  "accessibility.verbosity.diffEditor": true,

  // Indicate when a diff editor becomes the active editor.
  "accessibility.verbosity.diffEditorActive": true,

  // Provide information about relevant actions in an empty text editor.
  "accessibility.verbosity.emptyEditorHint": true,

  // Provide information about how to open the hover in an Accessible View.
  "accessibility.verbosity.hover": true,

  // Provide information about how to access the inline editor chat accessibility help menu and alert with hints that describe how to use the feature when the input is focused.
  "accessibility.verbosity.inlineChat": true,

  // Provide information about how to access the inline completions hover and Accessible View.
  "accessibility.verbosity.inlineCompletions": true,

  // Provide information about how to change a keybinding in the keybindings editor when a row is focused.
  "accessibility.verbosity.keybindingsEditor": true,

  // Provide information about how to focus the cell container or inner editor when a notebook cell is focused.
  "accessibility.verbosity.notebook": true,

  // Provide information about how to open the notification in an Accessible View.
  "accessibility.verbosity.notification": true,

  // Provide information about how to access the chat help menu when the chat input is focused.
  "accessibility.verbosity.panelChat": true,

  // Provide information about how to access the terminal accessibility help menu when the terminal is focused.
  "accessibility.verbosity.terminal": true,

  //
  //  - legacy: Uses the legacy diffing algorithm.
  //  - advanced: Uses the advanced diffing algorithm.
  "mergeEditor.diffAlgorithm": "advanced",

  // Controls if deletions in base or one of the inputs should be indicated by a vertical bar.
  "mergeEditor.showDeletionMarkers": true,

  // Enable experimental multi diff editor.
  "multiDiffEditor.experimental.enabled": true,

  // Controls the font family in chat codeblocks.
  "chat.editor.fontFamily": "default",

  // Controls the font size in pixels in chat codeblocks.
  "chat.editor.fontSize": 12,

  // Controls the font weight in chat codeblocks.
  "chat.editor.fontWeight": "default",

  // Controls the line height in pixels in chat codeblocks. Use 0 to compute the line height from the font size.
  "chat.editor.lineHeight": 0,

  // Controls whether lines should wrap in chat codeblocks.
  "chat.editor.wordWrap": "off",

  // Controls whether a checkbox is shown to allow the user to determine which implicit context is included with a chat participant's prompt.
  "chat.experimental.implicitContext": false,

  // An array of languages where Emmet abbreviations should not be expanded.
  "emmet.excludeLanguages": ["markdown"],

  // An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.
  // In case of conflicts, the profiles/snippets of later paths will override those of earlier paths.
  // See https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file.
  "emmet.extensionsPath": [],

  // Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
  //  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
  "emmet.includeLanguages": {},

  // When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.
  "emmet.optimizeStylesheetParsing": true,

  // Preferences used to modify behavior of some actions and resolvers of Emmet.
  "emmet.preferences": {},

  // Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
  "emmet.showAbbreviationSuggestions": true,

  // Shows expanded Emmet abbreviations as suggestions.
  // The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
  // The option `"always"` applies to all parts of the file regardless of markup/css.
  "emmet.showExpandedAbbreviation": "always",

  // If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
  "emmet.showSuggestionsAsSnippets": false,

  // Define profile for specified syntax or use your own profile with specific rules.
  "emmet.syntaxProfiles": {},

  // When enabled, Emmet abbreviations are expanded when pressing TAB, even when completions do not show up. When disabled, completions that show up can still be accepted by pressing TAB.
  "emmet.triggerExpansionOnTab": false,

  // If `true`, Emmet will use inline completions to suggest expansions. To prevent the non-inline completion item provider from showing up as often while this setting is `true`, turn `editor.quickSuggestions` to `inline` or `off` for the `other` item.
  "emmet.useInlineCompletions": false,

  // Variables to be used in Emmet snippets.
  "emmet.variables": {},

  // Controls whether force push (with or without lease) is enabled.
  "git.allowForcePush": false,

  // Controls whether commits without running pre-commit and commit-msg hooks are allowed.
  "git.allowNoVerifyCommit": false,

  // Always show the Staged Changes resource group.
  "git.alwaysShowStagedChangesResourceGroup": false,

  // Controls the signoff flag for all commits.
  "git.alwaysSignOff": false,

  // When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
  "git.autofetch": false,

  // Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
  "git.autofetchPeriod": 180,

  // Whether auto refreshing is enabled.
  "git.autorefresh": true,

  // Configures when repositories should be automatically detected.
  //  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
  //  - false: Disable automatic repository scanning.
  //  - subFolders: Scan for subfolders of the currently opened folder.
  //  - openEditors: Scan for parent folders of open files.
  "git.autoRepositoryDetection": true,

  // Stash any changes before pulling and restore them after successful pull.
  "git.autoStash": false,

  // Prefix used when creating a new branch.
  "git.branchPrefix": "",

  // List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `git.branchProtectionPrompt`  setting.
  "git.branchProtection": [],

  // Controls whether a prompt is being shown before changes are committed to a protected branch.
  //  - alwaysCommit: Always commit changes to the protected branch.
  //  - alwaysCommitToNewBranch: Always commit changes to a new branch.
  //  - alwaysPrompt: Always prompt before changes are committed to a protected branch.
  "git.branchProtectionPrompt": "alwaysPrompt",

  // List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.
  //  - adjectives: A random adjective
  //  - animals: A random animal name
  //  - colors: A random color name
  //  - numbers: A random number between 100 and 999
  "git.branchRandomName.dictionary": ["adjectives", "animals"],

  // Controls whether a random name is generated when creating a new branch.
  "git.branchRandomName.enable": false,

  // Controls the sort order for branches.
  "git.branchSortOrder": "committerdate",

  // A regular expression to validate new branch names.
  "git.branchValidationRegex": "",

  // The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.
  "git.branchWhitespaceChar": "-",

  // Controls what type of Git refs are listed when running `Checkout to...`.
  //  - local: Local branches
  //  - tags: Tags
  //  - remote: Remote branches
  "git.checkoutType": ["local", "remote", "tags"],

  // Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.
  "git.closeDiffOnOperation": false,

  // List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).
  "git.commandsToLog": [],

  // Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
  "git.confirmEmptyCommits": true,

  // Controls whether to ask for confirmation before force-pushing.
  "git.confirmForcePush": true,

  // Controls whether to ask for confirmation before committing without verification.
  "git.confirmNoVerifyCommit": true,

  // Confirm before synchronizing Git repositories.
  "git.confirmSync": true,

  // Controls the Git count badge.
  //  - all: Count all changes.
  //  - tracked: Count only tracked changes.
  //  - off: Turn off counter.
  "git.countBadge": "all",

  // Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
  "git.decorations.enabled": true,

  // The name of the default branch (example: main, trunk, development) when initializing a new Git repository. When set to empty, the default branch name configured in Git will be used. **Note:** Requires Git version `2.28.0` or later.
  "git.defaultBranchName": "main",

  // The default location to clone a Git repository.
  "git.defaultCloneDirectory": null,

  // Controls whether to automatically detect Git submodules.
  "git.detectSubmodules": true,

  // Controls the limit of Git submodules detected.
  "git.detectSubmodulesLimit": 10,

  // Enables commit signing with GPG, X.509, or SSH.
  "git.enableCommitSigning": false,

  // Whether Git is enabled.
  "git.enabled": true,

  // Commit all changes when there are no staged changes.
  "git.enableSmartCommit": false,

  // Controls whether the Git Sync command appears in the status bar.
  "git.enableStatusBarSync": true,

  // When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
  "git.fetchOnPull": false,

  // Push all annotated tags when running the sync command.
  "git.followTagsWhenSync": false,

  // This setting is now deprecated, please use `github.gitAuthentication` instead.
  //
  "git.githubAuthentication": null,

  // List of Git repositories to ignore.
  "git.ignoredRepositories": [],

  // Ignores the legacy Git warning.
  "git.ignoreLegacyWarning": false,

  // Ignores the warning when there are too many changes in a repository.
  "git.ignoreLimitWarning": false,

  // Ignores the warning when Git is missing.
  "git.ignoreMissingGitWarning": false,

  // Ignores the warning when it looks like the branch might have been rebased when pulling.
  "git.ignoreRebaseWarning": false,

  // Ignore modifications to submodules in the file tree.
  "git.ignoreSubmodules": false,

  // Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
  "git.ignoreWindowsGit27Warning": false,

  // Controls whether to show commit message input validation diagnostics.
  "git.inputValidation": false,

  // Controls the commit message length threshold for showing a warning.
  "git.inputValidationLength": 72,

  // Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `git.inputValidationLength`.
  "git.inputValidationSubjectLength": 50,

  // Open the merge editor for files that are currently under conflict.
  "git.mergeEditor": false,

  // Controls whether to open a repository automatically after cloning.
  //  - always: Always open in current window.
  //  - alwaysNewWindow: Always open in a new window.
  //  - whenNoFolderOpen: Only open in current window when no folder is opened.
  //  - prompt: Always prompt for action.
  "git.openAfterClone": "prompt",

  // Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
  "git.openDiffOnClick": true,

  // Control whether a repository in parent folders of workspaces or open files should be opened.
  //  - always: Always open a repository in parent folders of workspaces or open files.
  //  - never: Never open a repository in parent folders of workspaces or open files.
  //  - prompt: Prompt before opening a repository the parent folders of workspaces or open files.
  "git.openRepositoryInParentFolders": "prompt",

  // Controls whether to optimistically update the state of the Source Control view after running git commands.
  "git.optimisticUpdate": true,

  // Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.
  "git.path": null,

  // Run a git command after a successful commit.
  //  - none: Don't run any command after a commit.
  //  - push: Run 'git push' after a successful commit.
  //  - sync: Run 'git pull' and 'git push' after a successful commit.
  "git.postCommitCommand": "none",

  // Controls whether Git should check for unsaved files before committing.
  //  - always: Check for any unsaved files.
  //  - staged: Check only for unsaved staged files.
  //  - never: Disable this check.
  "git.promptToSaveFilesBeforeCommit": "always",

  // Controls whether Git should check for unsaved files before stashing changes.
  //  - always: Check for any unsaved files.
  //  - staged: Check only for unsaved staged files.
  //  - never: Disable this check.
  "git.promptToSaveFilesBeforeStash": "always",

  // Prune when fetching.
  "git.pruneOnFetch": false,

  // Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out.
  "git.pullBeforeCheckout": false,

  // Fetch all tags when pulling.
  "git.pullTags": true,

  // Force Git to use rebase when running the sync command.
  "git.rebaseWhenSync": false,

  // Remember the last git command that ran after a commit.
  "git.rememberPostCommitCommand": false,

  // Automatically replace the local tags with the remote tags in case of a conflict when running the pull command.
  "git.replaceTagsWhenPull": false,

  // List of folders that are ignored while scanning for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`.
  "git.repositoryScanIgnoredFolders": ["node_modules"],

  // Controls the depth used when scanning workspace folders for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`. Can be set to `-1` for no limit.
  "git.repositoryScanMaxDepth": 1,

  // Controls whether to require explicit Git user configuration or allow Git to guess if missing.
  "git.requireGitUserConfig": true,

  // List of paths to search for Git repositories in.
  "git.scanRepositories": [],

  // Controls whether an action button is shown in the Source Control view.
  "git.showActionButton": {
    "commit": true,
    "publish": true,
    "sync": true
  },

  // Controls whether to show the commit input in the Git source control panel.
  "git.showCommitInput": true,

  // Controls whether to show an inline Open File action in the Git changes view.
  "git.showInlineOpenFileAction": true,

  // Controls whether Git actions should show progress.
  "git.showProgress": true,

  // Controls whether to show a notification when a push is successful.
  "git.showPushSuccessNotification": false,

  // Controls the threshold of the similarity index (the amount of additions/deletions compared to the file's size) for changes in a pair of added/deleted files to be considered a rename. **Note:** Requires Git version `2.18.0` or later.
  "git.similarityThreshold": 50,

  // Control which changes are automatically staged by Smart Commit.
  //  - all: Automatically stage all changes.
  //  - tracked: Automatically stage tracked changes only.
  "git.smartCommitChanges": "all",

  // Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
  "git.statusLimit": 10000,

  // Suggests to enable smart commit (commit all changes when there are no staged changes).
  "git.suggestSmartCommit": true,

  // Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
  "git.supportCancellation": false,

  // Controls whether to enable VS Code to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting.
  "git.terminalAuthentication": true,

  // Controls whether to enable VS Code to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting.
  "git.terminalGitEditor": false,

  // Controls which date to use for items in the Timeline view.
  //  - committed: Use the committed date
  //  - authored: Use the authored date
  "git.timeline.date": "committed",

  // Controls whether to show the commit author in the Timeline view.
  "git.timeline.showAuthor": true,

  // Controls whether to show uncommitted changes in the Timeline view.
  "git.timeline.showUncommitted": false,

  // Controls how untracked changes behave.
  //  - mixed: All changes, tracked and untracked, appear together and behave equally.
  //  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
  //  - hidden: Untracked changes are hidden and excluded from several actions.
  "git.untrackedChanges": "mixed",

  // Controls whether to use the message from the commit input box as the default stash message.
  "git.useCommitInputAsStashMessage": false,

  // Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.
  "git.useEditorAsCommitInput": true,

  // Controls whether force pushing uses the safer force-if-includes variant. Note: This setting requires the `git.useForcePushWithLease` setting to be enabled, and Git version `2.30.0` or later.
  "git.useForcePushIfIncludes": true,

  // Controls whether force pushing uses the safer force-with-lease variant.
  "git.useForcePushWithLease": true,

  // Controls whether GIT_ASKPASS should be overwritten to use the integrated version.
  "git.useIntegratedAskPass": true,

  // Enable verbose output when `git.useEditorAsCommitInput` is enabled.
  "git.verboseCommit": false,

  // Controls whether to query repository rules for GitHub repositories
  "github.branchProtection": true,

  // Controls whether to enable automatic GitHub authentication for git commands within VS Code.
  "github.gitAuthentication": true,

  // Controls which protocol is used to clone a GitHub repository
  "github.gitProtocol": "https",

  // GitHub Enterprise Server URI
  "github-enterprise.uri": "",

  // Controls enablement of Grunt task detection. Grunt task detection can cause files in any open workspace to be executed.
  "grunt.autoDetect": "off",

  // Controls enablement of Gulp task detection. Gulp task detection can cause files in any open workspace to be executed.
  "gulp.autoDetect": "off",

  // Enable/disable pasting of images into Markdown cells in ipynb notebook files. Pasted images are inserted as attachments to the cell.
  "ipynb.pasteImagesAsAttachments.enabled": true,

  // Controls enablement of Jake task detection. Jake task detection can cause files in any open workspace to be executed.
  "jake.autoDetect": "off",

  // Enable/disable rendering math in the built-in Markdown preview.
  "markdown.math.enabled": true,

  // A collection of custom macros. Each macro is a key-value pair where the key is a new command name and the value is the expansion of the macro.
  "markdown.math.macros": {},

  // Start playing videos on mute automatically.
  "mediaPreview.video.autoPlay": false,

  // Loop videos over again automatically.
  "mediaPreview.video.loop": false,

  // Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
  "merge-conflict.autoNavigateNextConflict.enabled": false,

  // Create a CodeLens for merge conflict blocks within editor.
  "merge-conflict.codeLens.enabled": true,

  // Create decorators for merge conflict blocks within editor.
  "merge-conflict.decorators.enabled": true,

  // Controls where the diff view should be opened when comparing changes in merge conflicts.
  //  - Current: Open the diff view in the current editor group.
  //  - Beside: Open the diff view next to the current editor group.
  //  - Below: Open the diff view below the current editor group.
  "merge-conflict.diffViewPosition": "Current",

  // The custom configuration for the Sovereign Cloud to use with the Microsoft Sovereign Cloud authentication provider. This along with setting `microsoft-sovereign-cloud.environment` to `custom` is required to use this feature.
  "microsoft-sovereign-cloud.customEnvironment": {},

  // The Sovereign Cloud to use for authentication. If you select `custom`, you must also set the `microsoft-sovereign-cloud.customEnvironment` setting.
  //  - ChinaCloud: Azure China
  //  - USGovernment: Azure US Government
  //  - custom: A custom Microsoft Sovereign Cloud
  "microsoft-sovereign-cloud.environment": "",

  // Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
  //  - always: Auto attach to every Node.js process launched in the terminal.
  //  - smart: Auto attach when running scripts that aren't in a node_modules folder.
  //  - onlyWithFlag: Only auto attach when the `--inspect` is given.
  //  - disabled: Auto attach is disabled and not shown in status bar.
  "debug.javascript.autoAttachFilter": "disabled",

  // Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
  "debug.javascript.autoAttachSmartPattern": ["${workspaceFolder}/**", "!**/node_modules/**", "**/$KNOWN_TOOLS$/**"],

  // When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
  "debug.javascript.automaticallyTunnelRemoteServer": true,

  // Whether to stop when conditional breakpoints throw an error.
  "debug.javascript.breakOnConditionalError": false,

  // Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
  "debug.javascript.codelens.npmScripts": "top",

  // Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
  "debug.javascript.debugByLinkOptions": "on",

  // The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
  "debug.javascript.defaultRuntimeExecutable": {
    "pwa-node": "node"
  },

  // Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
  "debug.javascript.pickAndAttachOptions": {},

  // Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
  //
  // A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
  "debug.javascript.resourceRequestOptions": {},

  // Default launch options for the JavaScript debug terminal and npm scripts.
  "debug.javascript.terminalOptions": {},

  // Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
  "debug.javascript.unmapMissingSources": false,

  // Controls whether npm scripts should be automatically detected.
  "npm.autoDetect": "on",

  // Enable running npm scripts contained in a folder from the Explorer context menu.
  "npm.enableRunFromFolder": false,

  // The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
  // Enable an explorer view for npm scripts when there is no top-level 'package.json' file.
  "npm.enableScriptExplorer": false,

  // Configure glob patterns for folders that should be excluded from automatic script detection.
  "npm.exclude": "",

  // Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
  "npm.fetchOnlinePackageInfo": true,

  // The package manager used to run scripts.
  //  - auto: Auto-detect which package manager to use for running scripts based on lock files and installed package managers.
  //  - npm: Use npm as the package manager for running scripts.
  //  - yarn: Use yarn as the package manager for running scripts.
  //  - pnpm: Use pnpm as the package manager for running scripts.
  //  - bun: Use bun as the package manager for running scripts.
  "npm.packageManager": "auto",

  // Run npm commands with the `--silent` option.
  "npm.runSilent": false,

  // The default click action used in the NPM Scripts Explorer: `open` or `run`, the default is `open`.
  "npm.scriptExplorerAction": "open",

  // An array of regular expressions that indicate which scripts should be excluded from the NPM Scripts view.
  "npm.scriptExplorerExclude": [],

  // Display hover with 'Run' and 'Debug' commands for scripts.
  "npm.scriptHover": true,

  // Controls whether 'Peek References' or 'Find References' is invoked when selecting CodeLens references.
  //  - peek: Show references in peek editor.
  //  - view: Show references in separate view.
  "references.preferredLocation": "peek",

  // Enable/disable the floating indicator that shows when focused in the simple browser.
  "simpleBrowser.focusLockIndicator.enabled": true,

  // Whether the plaintext comment highlighter should be active
  "better-comments.highlightPlainText": false,

  // Whether the multiline comment highlighter should be active
  "better-comments.multilineComments": true,

  // Tags which are used to color the comments. Changes require a restart of VS Code to take effect
  "better-comments.tags": [
    {
      "tag": "!",
      "color": "#FF2D00",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "?",
      "color": "#3498DB",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "//",
      "color": "#474747",
      "strikethrough": true,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "todo",
      "color": "#FF8C00",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "*",
      "color": "#98C379",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    }
  ],

  // Use `bookmarks.lineBackground` in `workbench.colorCustomizations` instead
  // Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations. Ex.: rgba(21, 126, 251, 0.1)
  "bookmarks.backgroundLineColor": "",

  // Experimental. Enables the new Sticky engine with support for Formatters, improved source change detections and undo operations
  "bookmarks.experimental.enableNewStickyEngine": true,

  // Specifies the border color of the bookmark icon
  "bookmarks.gutterIconBorderColor": "#157EFB",

  // Specifies the fill color of the bookmark icon
  "bookmarks.gutterIconFillColor": "#157EFB",

  // Use `bookmarks.gutterIconFillColor` and `bookmarks.gutterIconBorderColor` instead
  // Path to another image to be presented as Bookmark
  "bookmarks.gutterIconPath": "",

  // Specifies whether bookmarks on deleted line should be kept on file, moving it down to the next line, instead of deleting it with the line where it was toggled.
  "bookmarks.keepBookmarksOnLineDelete": false,

  // Specifies how labels are suggested when creating bookmarks
  //  - dontUse: Don't use the selection (original behavior)
  //  - useWhenSelected: Use the selected text (if available) directly, no confirmation required
  //  - suggestWhenSelected: Suggests the selected text (if available). You still need to confirm.
  //  - suggestWhenSelectedOrLineWhenNoSelected: Suggests the selected text (if available) or the entire line (when has no selection). You still need to confirm.
  "bookmarks.label.suggestion": "dontUse",

  // Specifies how multi cursor handles already bookmarked lines
  //  - allLinesAtOnce: Creates bookmarks in all selected lines at once, if at least one of the lines don't have a bookmark
  //  - eachLineIndependently: Literally toggles a bookmark in each line, instead of making all lines equal
  "bookmarks.multicursor.toggleMode": "allLinesAtOnce",

  // Allow navigation look for bookmarks in all files in the project, instead of only the current
  "bookmarks.navigateThroughAllFiles": true,

  // Specifies the location where the bookmarked line will be revealed
  //  - top: Reveals the bookmarked line at the top of the editor
  //  - center: Reveals the bookmarked line in the center of the editor
  "bookmarks.revealLocation": "center",

  // Allow bookmarks to be saved (and restored) locally in the opened Project/Folder instead of VS Code
  "bookmarks.saveBookmarksInProject": false,

  // Specifies whether Bookmarks commands are displayed on the context menu
  "bookmarks.showCommandsInContextMenu": true,

  // Specifies whether a notification will be shown when attempting to navigate between bookmarks when no more exist.
  "bookmarks.showNoMoreBookmarksWarning": true,

  // Controls the count badge on the Bookmark icon on the Activity Bar
  //  - all: Show the sum of bookmarks from all files
  //  - files: Show the sum of files that contains some bookmarks
  //  - off: Disable the Bookmarks count badge
  "bookmarks.sideBar.countBadge": "all",

  // Specifies whether the Side Bar show be displayed expanded
  "bookmarks.sideBar.expanded": false,

  // Use a workaround for formatters like Prettier, which does not notify on document changes and messes Bookmark's Sticky behavior
  "bookmarks.useWorkaroundForFormatters": false,

  // Allow navigation to wrap around at the first and last bookmarks in scope (current file or all files)
  "bookmarks.wrapNavigation": true,

  // 1: Disable GPU / 0: System default / -1: Auto
  "colorHelper.disableGpu": -1,

  // Disable drop shadow effect.
  "colorHelper.disableShadow": false,

  // Disable transparent window.
  "colorHelper.disableTransparent": false,

  // An array that indicates the order of formats in UI (e.g. drop-down list). Allowed items are "hsb", "hsl", "hwb", "rgb", "hex", "named", "cmyk" or "gray". This array doesn't have to contain all formats. The formats that are not contained in the array are moved to the top of the list in UI automatically when it was used. If you want to make the list static, specify all formats in the order you desire, e.g. ["hsb", "hsl", "hwb", "rgb", "hex", "named", "cmyk", "gray"].
  "colorHelper.formatsOrder": [],

  // A name of preset package that switches UI and features. Allowed values are "default", "largePalette", "simple", "compact", "compact2" or "byPalette".
  "colorHelper.pickerForm": "default",

  // Stands by for a quick response. After the dialog box is opened, it stays in memory even after it is closed until VS Code is exited (or VS Code might unload it).
  "colorHelper.resident": false,

  // A path to directory that contains your color palettes. For information about color palettes, see `README.md` that is found in that directory.
  "colorHelper.storeDir": "",

  // Activates the i18n features for snippets (eg.: _(""))
  "django.i18n": true,

  // Seldom show notifications about this extension
  "django.showContributeNotification": true,

  // Exclude Python snippets by their file name. Can be 'import', 'postgres'...
  "django.snippets.exclude": ["cms", "wagtail"],

  // Activates the Python snippets
  "django.snippets.use": true,

  // Fields not to display. Overrides `colorInfo.fields`.
  "colorInfo.excludedFields": null,

  // Ordered list of color fields to display.
  "colorInfo.fields": null,

  //
  "colorInfo.languages": [
    {
      "selector": "css",
      "colors": "css"
    },
    {
      "selector": "sass",
      "colors": "css"
    },
    {
      "selector": "scss",
      "colors": "css"
    },
    {
      "selector": "less",
      "colors": "css"
    }
  ],

  // Resolves `ArrayAccess` and `Traversable` implementations that are unioned with a typed array to generic syntax. eg `ArrayAccessOrTraversable|ElementType[]` => `ArrayAccessOrTraversable<mixed, ElementType>`.
  "intelephense.compatibility.correctForArrayAccessArrayAndTraversableArrayUnionTypes": true,

  // Resolves `BaseClass|static` union types to `static` instead of `BaseClass`.
  "intelephense.compatibility.correctForBaseClassStaticUnionTypes": true,

  // Global namespace constants and functions will be fully qualified (prefixed with a backslash).
  "intelephense.completion.fullyQualifyGlobalConstantsAndFunctions": false,

  // Use declarations will be automatically inserted for namespaced classes, traits, interfaces, functions, and constants.
  "intelephense.completion.insertUseDeclaration": true,

  // The maximum number of completion items returned per request.
  "intelephense.completion.maxItems": 100,

  // Method and function completions will include parentheses and trigger parameter hints.
  "intelephense.completion.triggerParameterHints": true,

  // Enables argument count diagnostics.
  "intelephense.diagnostics.argumentCount": true,

  // Enables deprecated diagnostics.
  "intelephense.diagnostics.deprecated": true,

  // Enables duplicate symbol diagnostics.
  "intelephense.diagnostics.duplicateSymbols": true,

  // Enables diagnostics in embedded languages.
  "intelephense.diagnostics.embeddedLanguages": true,

  // Enables diagnostics.
  "intelephense.diagnostics.enable": true,

  // Enables reporting of problems associated with method and class implementations. For example, unimplemented methods or method signature incompatibilities.
  "intelephense.diagnostics.implementationErrors": true,

  // Enables reporting of various language constraint errors.
  "intelephense.diagnostics.languageConstraints": true,

  // Controls when diagnostics are run.
  //  - onType: Diagnostics will run as changes are made to the document.
  //  - onSave: Diagnostics will run when the document is saved.
  "intelephense.diagnostics.run": "onType",

  // Enables diagnostics on type compatibility of arguments, property assignments, and return statements where types have been declared.
  "intelephense.diagnostics.typeErrors": true,

  // Enables undefined class constant diagnostics.
  "intelephense.diagnostics.undefinedClassConstants": true,

  // Enables undefined constant diagnostics.
  "intelephense.diagnostics.undefinedConstants": true,

  // Enables undefined function diagnostics.
  "intelephense.diagnostics.undefinedFunctions": true,

  // Enables undefined method diagnostics.
  "intelephense.diagnostics.undefinedMethods": true,

  // Enables undefined static property diagnostics.
  "intelephense.diagnostics.undefinedProperties": true,

  // DEPRECATED. Use the setting for each symbol category.
  "intelephense.diagnostics.undefinedSymbols": true,

  // Enables undefined class, interface and trait diagnostics.
  "intelephense.diagnostics.undefinedTypes": true,

  // Enables undefined variable diagnostics.
  "intelephense.diagnostics.undefinedVariables": true,

  // Enables unexpected token diagnostics.
  "intelephense.diagnostics.unexpectedTokens": true,

  // Enables unused variable, private member, and import diagnostics.
  "intelephense.diagnostics.unusedSymbols": true,

  // The directory of the entry point to the application (directory of index.php). Can be absolute or relative to the workspace folder. Used for resolving script inclusion and path suggestions.
  "intelephense.environment.documentRoot": "",

  // The include paths (as individual path items) as defined in the include_path ini setting or paths to external libraries. Can be absolute or relative to the workspace folder. Used for resolving script inclusion and/or adding external symbols to folder.
  "intelephense.environment.includePaths": [],

  // A semver compatible string that represents the target PHP version. Used for providing version appropriate suggestions and diagnostics. PHP 5.3.0 and greater supported.
  "intelephense.environment.phpVersion": "8.3.0",

  // When enabled '<?' will be parsed as a PHP open tag. Defaults to true.
  "intelephense.environment.shortOpenTag": true,

  // Configure glob patterns to make files available for language server features. Inherits from files.associations.
  "intelephense.files.associations": ["*.php", "*.phtml"],

  // Configure glob patterns to exclude certain files and folders from all language server features. Inherits from files.exclude.
  "intelephense.files.exclude": [
    "**/.git/**",
    "**/.svn/**",
    "**/.hg/**",
    "**/CVS/**",
    "**/.DS_Store/**",
    "**/node_modules/**",
    "**/bower_components/**",
    "**/vendor/**/{Tests,tests}/**",
    "**/.history/**",
    "**/vendor/**/vendor/**"
  ],

  // Maximum file size in bytes.
  "intelephense.files.maxSize": 1000000,

  // Controls formatting style of braces
  //  - psr12: PHP-FIG PSR-2 and PSR-12 style. A mix of Allman and K&R
  //  - allman: Allman. Opening brace on the next line.
  //  - k&r: K&R (1TBS). Opening brace on the same line.
  "intelephense.format.braces": "psr12",

  // Enables formatting.
  "intelephense.format.enable": true,

  // DEPRECATED. Don't use this. Go to command palette and search for enter licence key.
  "intelephense.licenceKey": "",

  // Maximum memory (in MB) that the server should use. On some systems this may only have effect when runtime has been set. Minimum 256.
  "intelephense.maxMemory": 0,

  // An object that describes the format of generated class/interface/trait phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
  "intelephense.phpdoc.classTemplate": {
    "summary": "$1",
    "tags": ["@package ${1:$SYMBOL_NAMESPACE}"]
  },

  // An object that describes the format of generated function/method phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
  "intelephense.phpdoc.functionTemplate": {
    "summary": "$1",
    "tags": ["@param ${1:$SYMBOL_TYPE} $SYMBOL_NAME $2", "@return ${1:$SYMBOL_TYPE} $2", "@throws ${1:$SYMBOL_TYPE} $2"]
  },

  // An object that describes the format of generated property phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
  "intelephense.phpdoc.propertyTemplate": {
    "summary": "$1",
    "tags": ["@var ${1:$SYMBOL_TYPE}"]
  },

  // Adds `@return void` to auto generated phpdoc for definitions that do not return a value.
  "intelephense.phpdoc.returnVoid": true,

  //
  //  - snippet: Auto generated phpdoc is returned in snippet format. Templates are partially resolved by evaluating phpdoc specific variables only.
  //  - text: Auto generated phpdoc is returned as plain text. Templates are resolved completely by the server.
  "intelephense.phpdoc.textFormat": "snippet",

  // Fully qualified names will be used for types when true. When false short type names will be used and imported where appropriate. Overrides intelephense.completion.insertUseDeclaration.
  "intelephense.phpdoc.useFullyQualifiedNames": false,

  // Glob patterns matching files and folders that should be excluded from references search.
  "intelephense.references.exclude": ["**/vendor/**"],

  // Glob patterns matching files and folders that should be excluded when renaming symbols. Rename operation will fail if the symbol definition is found in the excluded files/folders.
  "intelephense.rename.exclude": ["**/vendor/**"],

  // Controls the scope of a namespace rename operation.
  //  - single: Only symbols defined in the current file are affected. For example, this makes a rename of a namespace the equivalent of a single move class operation.
  //  - all: All symbols that share this namespace, not necessarily defined in the current file will be affected. For example it would move all classes that share this namespace to the new namespace.
  "intelephense.rename.namespaceMode": "single",

  // Path to a Node.js executable. Use this if you wish to use a different version of Node.js. Defaults to Node.js shipped with VSCode.
  "intelephense.runtime": "",

  // Configure stub files for built in symbols and common extensions. The default setting includes PHP core and all bundled extensions.
  "intelephense.stubs": [
    "apache",
    "bcmath",
    "bz2",
    "calendar",
    "com_dotnet",
    "Core",
    "ctype",
    "curl",
    "date",
    "dba",
    "dom",
    "enchant",
    "exif",
    "FFI",
    "fileinfo",
    "filter",
    "fpm",
    "ftp",
    "gd",
    "gettext",
    "gmp",
    "hash",
    "iconv",
    "imap",
    "intl",
    "json",
    "ldap",
    "libxml",
    "mbstring",
    "meta",
    "mysqli",
    "oci8",
    "odbc",
    "openssl",
    "pcntl",
    "pcre",
    "PDO",
    "pdo_ibm",
    "pdo_mysql",
    "pdo_pgsql",
    "pdo_sqlite",
    "pgsql",
    "Phar",
    "posix",
    "pspell",
    "random",
    "readline",
    "Reflection",
    "session",
    "shmop",
    "SimpleXML",
    "snmp",
    "soap",
    "sockets",
    "sodium",
    "SPL",
    "sqlite3",
    "standard",
    "superglobals",
    "sysvmsg",
    "sysvsem",
    "sysvshm",
    "tidy",
    "tokenizer",
    "xml",
    "xmlreader",
    "xmlrpc",
    "xmlwriter",
    "xsl",
    "Zend OPcache",
    "zip",
    "zlib"
  ],

  // Anonymous usage and crash data will be sent to Azure Application Insights. Inherits from telemetry.enableTelemetry.
  "intelephense.telemetry.enabled": null,

  // Traces the communication between VSCode and the intelephense language server.
  "intelephense.trace.server": "off",

  // Automatically deselect the closing tag after inserting a space.
  "htmltagwrap.autoDeselectClosingTag": true,

  // The default HTML tag to insert when using htmltagwrap.
  "htmltagwrap.tag": "p",

  // Traces the communication between VS Code and the Tailwind CSS Language Server.
  "tailwindcss-intellisense.trace.server": "off",

  // The HTML attributes for which to provide class completions, hover previews, linting etc.
  "tailwindCSS.classAttributes": ["class", "className", "ngClass", "class:list"],

  // Enable code actions.
  "tailwindCSS.codeActions": true,

  // Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.
  "tailwindCSS.colorDecorators": true,

  // Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`
  "tailwindCSS.emmetCompletions": false,

  //
  "tailwindCSS.experimental.classRegex": [],

  // Manually specify the Tailwind config file or files that should be read to provide IntelliSense features. Can either be a single string value, or an object where each key is a config file path and each value is a glob or array of globs representing the set of files that the config file applies to.
  "tailwindCSS.experimental.configFile": null,

  // Configure glob patterns to exclude from all IntelliSense features. Inherits all glob patterns from the `files.exclude` setting.
  "tailwindCSS.files.exclude": ["**/.git/**", "**/node_modules/**", "**/.hg/**", "**/.svn/**"],

  // Enable hovers.
  "tailwindCSS.hovers": true,

  // Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.
  //  E.g.: `{"plaintext": "html"}`
  "tailwindCSS.includeLanguages": {},

  // Enable the Node.js inspector agent for the language server and listen on the specified port.
  "tailwindCSS.inspectPort": null,

  // Class names on the same HTML element which apply the same CSS property or properties
  "tailwindCSS.lint.cssConflict": "warning",

  // Unsupported use of the [`@apply` directive](https://tailwindcss.com/docs/functions-and-directives/#apply)
  "tailwindCSS.lint.invalidApply": "error",

  // Unknown or invalid path used with the [`theme` helper](https://tailwindcss.com/docs/functions-and-directives/#theme)
  "tailwindCSS.lint.invalidConfigPath": "error",

  // Unknown screen name used with the [`@screen` directive](https://tailwindcss.com/docs/functions-and-directives/#screen)
  "tailwindCSS.lint.invalidScreen": "error",

  // Unknown value used with the [`@tailwind` directive](https://tailwindcss.com/docs/functions-and-directives/#tailwind)
  "tailwindCSS.lint.invalidTailwindDirective": "error",

  // Unknown variant name used with the [`@variants` directive](https://tailwindcss.com/docs/functions-and-directives/#variants)
  "tailwindCSS.lint.invalidVariant": "error",

  // Class variants not in the recommended order (applies in [JIT mode](https://tailwindcss.com/docs/just-in-time-mode) only)
  "tailwindCSS.lint.recommendedVariantOrder": "warning",

  // Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `tailwindCSS.showPixelEquivalents`.
  "tailwindCSS.rootFontSize": 16,

  // Show `px` equivalents for `rem` CSS values.
  "tailwindCSS.showPixelEquivalents": true,

  // Enable autocomplete suggestions.
  "tailwindCSS.suggestions": true,

  // Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings
  "tailwindCSS.validate": true,

  // Enable/disable automatic opening of server's URL in the browser after server has been reloaded.
  "phpserver.autoOpenOnReload": true,

  // App used to open the server URL. If empty, it will use the default browser. You can put any browser name here as long as it's installed in your machine (e.g. google-chrome, firefox, chromium-browser...)
  "phpserver.browser": null,

  // Server's ip/hostname (e.g. localhost, 0.0.0.0...)
  "phpserver.ip": "localhost",

  // Path to php.ini file. If empty, the extension uses the default path.
  "phpserver.phpConfigPath": null,

  // Path to PHP executable. If empty, the extension will try to get the path from the $PATH environment variable.
  "phpserver.phpPath": null,

  // Server's port number
  "phpserver.port": 3000,

  // Path relative to project. This is useful when you want to serve a different folder than the one from current workspace.
  "phpserver.relativePath": ".",

  // Path to custom router that will be used by PHP server.
  "phpserver.router": null,

  // Whether to add or not a semicolon in the end of the log message.
  "turboConsoleLog.addSemicolonInTheEnd": false,

  // The delimiter that will separate the different log message elements (file name, line number, class, function and variable)
  "turboConsoleLog.delimiterInsideMessage": "~",

  // Whether to include the file name and the line number of the log message.
  "turboConsoleLog.includeFileNameAndLineNum": false,

  // Whether to insert an empty line after the log message or not.
  "turboConsoleLog.insertEmptyLineAfterLogMessage": false,

  // Whether to insert an empty line before the log message or not.
  "turboConsoleLog.insertEmptyLineBeforeLogMessage": false,

  // Whether to insert or not the enclosing class of the selected variable in the log message.
  "turboConsoleLog.insertEnclosingClass": true,

  // Whether to insert or not the enclosing function of the selected variable in the log message.
  "turboConsoleLog.insertEnclosingFunction": true,

  // Specify a log function (when specified logType will be ignored)
  "turboConsoleLog.logFunction": "log",

  // The prefix of the log message.
  "turboConsoleLog.logMessagePrefix": "🚀",

  // The suffix of the log message.
  "turboConsoleLog.logMessageSuffix": ":",

  // Select the log type
  "turboConsoleLog.logType": "log",

  // Double quotes, single quotes or backtick
  "turboConsoleLog.quote": "\"",

  // Determine if the log message should be wrapped or not.
  "turboConsoleLog.wrapLogMessage": false,

  // Controls whether code comments are italicized. Default value = true: italicized comments. This setting is not affected by the nebula-theme.themeItalics setting.
  "nebula-theme.commentItalics": true,

  // Controls whether workbench borders and other elements are hidden for a more material/flat appearance. Default value = false: visible workbench borders.
  "nebula-theme.materialize": false,

  // Controls the amount of non-comment code that gets italicized, where 0 - none has the least amount of italicized scopes and 4 - no restraint has the most italicized scopes. Accepted values are: 0 - none, 1 - basic, 2 - wavy, 3 - curly, and 4 - no restraint. 3 - curly is the intended Operator Mono setting. Default value = 2 - wavy.
  "nebula-theme.themeItalics": "2 - wavy",

  // The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.
  // Turns auto fix on save on or off.
  "eslint.autoFixOnSave": false,

  // Show disable lint rule in the quick fix menu.
  "eslint.codeAction.disableRuleComment": {
    "enable": true,
    "location": "separateLine",
    "commentStyle": "line"
  },

  // Show open lint rule documentation web page in the quick fix menu.
  "eslint.codeAction.showDocumentation": {
    "enable": true
  },

  // Specifies the code action mode. Possible values are 'all' and 'problems'.
  //  - all: Fixes all possible problems in the file. This option might take some time.
  //  - problems: Fixes only reported problems that have non-overlapping textual edits. This option runs a lot faster.
  "eslint.codeActionsOnSave.mode": "all",

  // The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration
  "eslint.codeActionsOnSave.rules": null,

  // Enables ESLint debug mode (same as `--debug` on the command line)
  "eslint.debug": false,

  // Controls whether eslint is enabled or not.
  "eslint.enable": true,

  // Additional exec argv argument passed to the runtime. This can for example be used to control the maximum heap space using --max_old_space_size
  "eslint.execArgv": null,

  // Use ESLint version 8.57 or later and `eslint.useFlatConfig` instead.
  // Enables support of experimental Flat Config (aka eslint.config.js). Requires ESLint version >= 8.21 < 8.57.0).
  "eslint.experimental.useFlatConfig": false,

  // Enables ESLint as a formatter.
  "eslint.format.enable": false,

  // If true, untitled files won't be validated by ESLint.
  "eslint.ignoreUntitled": false,

  // Controls whether a task for linting the whole workspace will be available.
  "eslint.lintTask.enable": false,

  // Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).
  "eslint.lintTask.options": ".",

  // Whether ESlint should migrate auto fix on save settings.
  "eslint.migration.2_x": "on",

  // The value of `NODE_ENV` to use when running eslint tasks.
  "eslint.nodeEnv": null,

  // A path added to `NODE_PATH` when resolving the eslint module.
  "eslint.nodePath": null,

  // A special rules customization section for text cells in notebook documents.
  "eslint.notebooks.rules.customizations": [],

  // Whether ESLint should issue a warning on ignored files.
  "eslint.onIgnoredFiles": "off",

  // The eslint options object to provide args normally passed to eslint when executed from a command line (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class).
  "eslint.options": {},

  // The setting is deprecated. The Package Manager is automatically detected now.
  // The package manager you use to install node modules.
  "eslint.packageManager": "npm",

  // An array of language ids for which the extension should probe if support is installed.
  "eslint.probe": [
    "astro",
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "html",
    "mdx",
    "vue",
    "markdown",
    "json",
    "jsonc"
  ],

  // Shortens the text spans of underlined problems to their first related line.
  "eslint.problems.shortenToSingleLine": false,

  // This option is deprecated. Use eslint.lintTask.enable instead.
  // Controls whether a task for linting the whole workspace will be available.
  "eslint.provideLintTask": false,

  // Turns on quiet mode, which ignores warnings.
  "eslint.quiet": false,

  // Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules.
  "eslint.rules.customizations": [],

  // Run the linter on save (onSave) or on type (onType)
  "eslint.run": "onType",

  // The location of the node binary to run ESLint under.
  "eslint.runtime": null,

  // The time budget in milliseconds to spend on computing fixes before showing a warning or error.
  "eslint.timeBudget.onFixes": {
    "warn": 3000,
    "error": 6000
  },

  // The time budget in milliseconds to spend on validation before showing a warning or error.
  "eslint.timeBudget.onValidation": {
    "warn": 4000,
    "error": 8000
  },

  // Traces the communication between VSCode and the eslint linter service.
  "eslint.trace.server": "off",

  // Since version 7 ESLint offers a new API call ESLint. Use it even if the old CLIEngine is available. From version 8 on forward on ESLint class is available.
  "eslint.useESLintClass": false,

  // Controls whether flat config should be used or not. This setting requires ESLint version 8.57 or later and is interpreted according to the [ESLint Flat Config rollout plan](https://eslint.org/blog/2023/10/flat-config-rollout-plans/).
  "eslint.useFlatConfig": null,

  // An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.
  "eslint.validate": [],

  // Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly.
  "eslint.workingDirectories": [],

  // Automatically generates an .editorconfig file according to your current editor settings.
  "editorconfig.generateAuto": true,

  // If generateAuto is false, this template path will be used for each newly-generated .editorconfig file.
  "editorconfig.template": "default",

  // Include parentheses around a sole arrow function parameter.
  "prettier.arrowParens": "always",

  // Puts the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
  "prettier.bracketSameLine": false,

  // Controls the printing of spaces inside object literals.
  "prettier.bracketSpacing": true,

  // Path to the prettier configuration file.
  "prettier.configPath": "",

  // This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
  // A list of languages IDs to disable this extension on.
  "prettier.disableLanguages": [],

  // A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter.
  "prettier.documentSelectors": [],

  // Control whether Prettier formats quoted code embedded in the file.
  "prettier.embeddedLanguageFormatting": "auto",

  // Controls whether Prettier is enabled or not. Reload required.
  "prettier.enable": true,

  // Enable debug logs for troubleshooting.
  "prettier.enableDebugLogs": false,

  // Specify the end of line used by prettier.
  "prettier.endOfLine": "lf",

  // Specify the global [whitespace sensitivity](https://prettier.io/blog/2018/11/07/1.15.0.html#whitespace-sensitive-formatting) for HTML files.
  // Valid options:
  // - `css` - Respect the default value of CSS `display` property.
  // - `strict` - Whitespaces are considered sensitive.
  // - `ignore` - Whitespaces are considered insensitive.
  "prettier.htmlWhitespaceSensitivity": "css",

  // Path to a `.prettierignore` file.
  "prettier.ignorePath": ".prettierignore",

  // Prettier can insert a special `@format` marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the `@format` marker.
  "prettier.insertPragma": false,

  // This option has been deprecated in v2.4.0, use `bracketSameLine` instead.
  // Puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
  "prettier.jsxBracketSameLine": false,

  // Use single quotes instead of double quotes in JSX.
  "prettier.jsxSingleQuote": false,

  // Package manager is now automatically detected by VS Code. This setting is no longer used.
  // The package manager you use to install node modules.
  "prettier.packageManager": "npm",

  // Path to the `prettier` module, eg: `./node_modules/prettier`.
  "prettier.prettierPath": "",

  // Fit code within this line limit.
  "prettier.printWidth": 80,

  // (Markdown) wrap prose over multiple lines.
  "prettier.proseWrap": "preserve",

  // Change when properties in objects are quoted.
  // Valid options:
  // - `"as-needed"` - Only add quotes around object properties where required.
  // - `"consistent"` - If at least one property in an object requires quotes, quote all properties.
  // - `"preserve"` - Respect the input use of quotes in object properties.
  "prettier.quoteProps": "as-needed",

  // Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
  //
  // > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
  "prettier.requireConfig": false,

  // Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
  "prettier.requirePragma": false,

  // When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
  // > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
  "prettier.resolveGlobalModules": false,

  // Whether to add a semicolon at the end of every line.
  "prettier.semi": true,

  // Enforces single attribute per line in HTML, JSX, Vue and Angular.
  "prettier.singleAttributePerLine": false,

  // Use single instead of double quotes.
  "prettier.singleQuote": false,

  // Number of spaces it should use per tab.
  "prettier.tabWidth": 2,

  // Controls the printing of trailing commas wherever possible.
  // Valid options:
  // - `none` - No trailing commas
  // - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
  // - `all` - Trailing commas wherever possible (function arguments)
  "prettier.trailingComma": "es5",

  // Whether or not to take `.editorconfig` into account when parsing configuration. See the [`prettier.resolveConfig`](https://prettier.io/docs/en/api.html) docs for details.
  "prettier.useEditorConfig": true,

  // Indent lines with tabs.
  "prettier.useTabs": false,

  // Whether or not to indent the code inside `<script>` and `<style>` tags in Vue SFC files.
  "prettier.vueIndentScriptAndStyle": false,

  // This extension will process files in `node_modules`.
  "prettier.withNodeModules": false,

  // Directory where exported assets are saved
  "figma.assetExportDirectory": "public/images",

  // Assets are served from this server path. This is used to construct the asset URL on the clipboard
  "figma.assetPublicPath": "/images",

  // [Experimental] Get multi-line code block suggestions based on your cursor position.
  "figma.autocompleteBlocks": false,

  // Get line-by-line property suggestions—like variables, colors and dimensions—as you type.
  "figma.autocompleteProperties": true,

  // Set the languages that the extension will be activated.  e.g. ["html","xml","php"]. Use ["*"] to activate for all languages.
  "auto-close-tag.activationOnLanguage": [
    "xml",
    "php",
    "blade",
    "ejs",
    "jinja",
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "plaintext",
    "markdown",
    "vue",
    "liquid",
    "erb",
    "lang-cfml",
    "cfml",
    "HTML (EEx)",
    "HTML (Eex)",
    "plist"
  ],

  // Set the languages where the extension will be disabled.  e.g. ["html","xml","php"].
  "auto-close-tag.disableOnLanguage": [],

  // Whether to close self-closing tag automatically
  "auto-close-tag.enableAutoCloseSelfClosingTag": true,

  // Whether to insert close tag automatically
  "auto-close-tag.enableAutoCloseTag": true,

  // Set the tag list that would not be auto closed.
  "auto-close-tag.excludedTags": [
    "area",
    "base",
    "br",
    "col",
    "command",
    "embed",
    "hr",
    "img",
    "input",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ],

  // Enable both Visual Studio and Sublime Text mode
  "auto-close-tag.fullMode": false,

  // Insert a space before the forward slash in a self-closing tag.
  "auto-close-tag.insertSpaceBeforeSelfClosingTag": false,

  // Auto close tag when </ is typed, same as Sublime Text 3
  "auto-close-tag.SublimeText3Mode": false,

  // Set the languages that the extension will be activated.  e.g. ["html","xml","php"] By default, it is ["*"] and will be activated for all languages.
  "auto-rename-tag.activationOnLanguage": ["*"],

  // Whether to clear previous output before each run.
  "code-runner.clearPreviousOutput": false,

  // Set the custom command to run.
  "code-runner.customCommand": "echo Hello",

  // Set the working directory.
  "code-runner.cwd": "",

  // Set the default language to run.
  "code-runner.defaultLanguage": "",

  // Whether to enable AppInsights to track user telemetry data.
  "code-runner.enableAppInsights": true,

  // Set the executor of each language.
  "code-runner.executorMap": {
    "javascript": "node",
    "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
    "c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "zig": "zig run",
    "cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "php": "php",
    "python": "python -u",
    "perl": "perl",
    "perl6": "perl6",
    "ruby": "ruby",
    "go": "go run",
    "lua": "lua",
    "groovy": "groovy",
    "powershell": "powershell -ExecutionPolicy ByPass -File",
    "bat": "cmd /c",
    "shellscript": "bash",
    "fsharp": "fsi",
    "csharp": "scriptcs",
    "vbscript": "cscript //Nologo",
    "typescript": "ts-node",
    "coffeescript": "coffee",
    "scala": "scala",
    "swift": "swift",
    "julia": "julia",
    "crystal": "crystal",
    "ocaml": "ocaml",
    "r": "Rscript",
    "applescript": "osascript",
    "clojure": "lein exec",
    "haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
    "rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
    "racket": "racket",
    "scheme": "csi -script",
    "ahk": "autohotkey",
    "autoit": "autoit3",
    "dart": "dart",
    "pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
    "d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
    "haskell": "runghc",
    "nim": "nim compile --verbosity:0 --hints:off --run",
    "lisp": "sbcl --script",
    "kit": "kitc --run",
    "v": "v run",
    "sass": "sass --style expanded",
    "scss": "scss --style expanded",
    "less": "cd $dir && lessc $fileName $fileNameWithoutExt.css",
    "FortranFreeForm": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "fortran-modern": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "fortran_fixed-form": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "fortran": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "sml": "cd $dir && sml $fileName",
    "mojo": "mojo run",
    "erlang": "escript",
    "spwn": "spwn build",
    "pkl": "cd $dir && pkl eval -f yaml $fileName -o $fileNameWithoutExt.yaml",
    "gleam": "gleam run -m $fileNameWithoutExt"
  },

  // Set the executor of each file extension.
  "code-runner.executorMapByFileExtension": {
    ".vb": "cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",
    ".vbs": "cscript //Nologo",
    ".scala": "scala",
    ".jl": "julia",
    ".cr": "crystal",
    ".ml": "ocaml",
    ".zig": "zig run",
    ".exs": "elixir",
    ".hx": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
    ".rkt": "racket",
    ".scm": "csi -script",
    ".ahk": "autohotkey",
    ".au3": "autoit3",
    ".kt": "cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",
    ".kts": "kotlinc -script",
    ".dart": "dart",
    ".pas": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
    ".pp": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
    ".d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
    ".hs": "runhaskell",
    ".nim": "nim compile --verbosity:0 --hints:off --run",
    ".csproj": "dotnet run --project",
    ".fsproj": "dotnet run --project",
    ".lisp": "sbcl --script",
    ".kit": "kitc --run",
    ".v": "v run",
    ".vsh": "v run",
    ".sass": "sass --style expanded",
    ".cu": "cd $dir && nvcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    ".ring": "ring",
    ".sml": "cd $dir && sml $fileName",
    ".mojo": "mojo run",
    ".erl": "escript",
    ".spwn": "spwn build",
    ".pkl": "cd $dir && pkl eval -f yaml $fileName -o $fileNameWithoutExt.yaml",
    ".gleam": "gleam run -m $fileNameWithoutExt"
  },

  // Set the executor by glob.
  "code-runner.executorMapByGlob": {
    "pom.xml": "cd $dir && mvn clean package"
  },

  // Whether to use the directory of the file to be executed as the working directory.
  "code-runner.fileDirectoryAsCwd": false,

  // Whether to ignore selection to always run entire file.
  "code-runner.ignoreSelection": false,

  // Set the mapping of languageId to file extension.
  "code-runner.languageIdToFileExtensionMap": {
    "bat": ".bat",
    "powershell": ".ps1",
    "typescript": ".ts"
  },

  // Whether to preserve focus on code editor after code run is triggered.
  "code-runner.preserveFocus": true,

  // Whether to respect Shebang to run code.
  "code-runner.respectShebang": true,

  // Whether to run code in Integrated Terminal.
  "code-runner.runInTerminal": false,

  // Whether to save all files before running.
  "code-runner.saveAllFilesBeforeRun": false,

  // Whether to save the current file before running.
  "code-runner.saveFileBeforeRun": false,

  // Whether to show extra execution message like [Running] ... and [Done] ...
  "code-runner.showExecutionMessage": true,

  // Whether to show 'Run Code' command in editor context menu.
  "code-runner.showRunCommandInEditorContextMenu": true,

  // Whether to show 'Run Code' command in explorer context menu.
  "code-runner.showRunCommandInExplorerContextMenu": true,

  // Whether to show 'Run Code' icon in editor title menu.
  "code-runner.showRunIconInEditorTitleMenu": true,

  // Whether to show 'Stop code run' icon in the editor title menu when code is running.
  "code-runner.showStopIconInEditorTitleMenu": true,

  // Temporary file name used in running selected code snippet. When it is set as empty, the file name will be random.
  "code-runner.temporaryFileName": "tempCodeRunnerFile",

  // For Windows system, replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash or Cgywin. Example: Setting this to '/mnt/' will replace 'C:\path' with '/mnt/c/path'
  "code-runner.terminalRoot": "",

  //
  "github.copilot.advanced": {},

  // Automatically show inline completions
  "github.copilot.editor.enableAutoCompletions": true,

  // Enable or disable Copilot completions for specified [languages](https://code.visualstudio.com/docs/languages/identifiers)
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": false,
    "scminput": false
  },

  // Deprecated: Please use github.copilot.editor.enableAutoCompletions instead.
  // Show inline suggestions
  "github.copilot.inlineSuggest.enable": true,

  // Specify a locale that Copilot should respond in, e.g. `en` or `fr`. By default, Copilot will respond using VS Code's configured display language locale.
  //  - auto: Use VS Code's configured display language
  //  - en: English
  //  - fr: français
  //  - it: italiano
  //  - de: Deutsch
  //  - es: español
  //  - ru: русский
  //  - zh-CN: 中文(简体)
  //  - zh-TW: 中文(繁體)
  //  - ja: 日本語
  //  - ko: 한국어
  //  - cs: čeština
  //  - pt-br: português
  //  - tr: Türkçe
  //  - pl: polski
  "github.copilot.chat.localeOverride": "auto",

  // Whether to prompt the user to select a specific symbol scope if the user uses `/explain` and the active editor has no selection.
  "github.copilot.chat.scopeSelection": false,

  // Controls where char queries from the terminal should be opened.
  //  - chatView: Open the chat view.
  //  - quickChat: Open quick chat.
  //  - terminal: Open terminal inline chat
  "github.copilot.chat.terminalChatLocation": "chatView",

  // Use relevant GitHub projects as starter projects when using `/new`
  "github.copilot.chat.useProjectTemplates": true,

  // Control when to show the detailed welcome chat message.
  //  - first: Show the welcome message once per session
  //  - always: Always show the detailed welcome message
  //  - never: Never show the detailed welcome message
  "github.copilot.chat.welcomeMessage": "first",

  // Enable/disable copilot code actions
  "github.copilot.editor.enableCodeActions": true,

  // Preferred GitHub account for GitHub Copilot
  "github.copilot.preferredAccount": "",

  // Enable/disable copilot automatic rename suggestions
  "github.copilot.renameSuggestions.triggerAutomatically": true,

  // Tags and options configured here will be used by the Add Tags command to add tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, json tags are added.
  "go.addTags": {
    "tags": "json",
    "options": "json=omitempty",
    "promptForTags": false,
    "transform": "snakecase",
    "template": ""
  },

  // Alternate tools or alternate paths for the same tools used by the Go extension. Provide either absolute path or the name of the binary in GOPATH/bin, GOROOT/bin or PATH. Useful when you want to use wrapper script for the Go tools.
  "go.alternateTools": {},

  // Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. ["-ldflags='-s'"]) This is propagated to the language server if `gopls.build.buildFlags` is not specified.
  "go.buildFlags": [],

  // Enable the Go language server (`go.useLanguageServer`) to diagnose compile errors.
  // Compiles code on file save using 'go build' or 'go test -c'. Not applicable when using the language server.
  "go.buildOnSave": "package",

  // The Go build tags to use for all commands, that support a `-tags '...'` argument. When running tests, go.testTags will be used instead if it was set. This is propagated to the language server if `gopls.build.buildFlags` is not specified.
  "go.buildTags": "",

  // This option lets you choose the way to display code coverage. Choose either to highlight the complete line or to show a decorator in the gutter. You can customize the colors and borders for the former and the style for the latter.
  "go.coverageDecorator": {
    "type": "highlight",
    "coveredHighlightColor": "rgba(64,128,128,0.5)",
    "uncoveredHighlightColor": "rgba(128,64,64,0.25)",
    "coveredBorderColor": "rgba(64,128,128,0.5)",
    "uncoveredBorderColor": "rgba(128,64,64,0.25)",
    "coveredGutterStyle": "blockblue",
    "uncoveredGutterStyle": "slashyellow"
  },

  // Use these options to control whether only covered or only uncovered code or both should be highlighted after running test coverage
  "go.coverageOptions": "showBothCoveredAndUncoveredCode",

  // When generating code coverage, the value for -covermode. 'default' is the default value chosen by the 'go test' command.
  "go.coverMode": "default",

  // If true, runs 'go test -coverprofile' on save and shows test coverage.
  "go.coverOnSave": false,

  // If true, shows test coverage when Go: Test Function at cursor command is run.
  "go.coverOnSingleTest": false,

  // If true, shows test coverage when Go: Test Single File command is run.
  "go.coverOnSingleTestFile": false,

  // If true, shows test coverage when Go: Test Package command is run.
  "go.coverOnTestPackage": true,

  // When generating code coverage, should counts be shown as --374--
  "go.coverShowCounts": false,

  // Delve settings that applies to all debugging sessions. Debug configuration in the launch.json file will override these values.
  "go.delveConfig": {},

  // (Experimental) vulncheck enables vulnerability scanning.
  //
  //  - Imports: `"Imports"`: In Imports mode, `gopls` will report vulnerabilities that affect packages
  // directly and indirectly used by the analyzed main module.
  //
  //  - Off: `"Off"`: Disable vulnerability analysis.
  //
  "go.diagnostic.vulncheck": "Off",

  // If true, tests will not run concurrently. When a new test run is started, the previous will be cancelled.
  "go.disableConcurrentTests": false,

  // Experimental Feature: Enable/Disable entries from the context menu in the editor.
  "go.editorContextMenuCommands": {
    "toggleTestFile": true,
    "addTags": true,
    "removeTags": false,
    "fillStruct": false,
    "testAtCursor": true,
    "testFile": false,
    "testPackage": false,
    "generateTestForFunction": true,
    "generateTestForFile": false,
    "generateTestForPackage": false,
    "addImport": true,
    "testCoverage": true,
    "playground": true,
    "debugTestAtCursor": true,
    "benchmarkAtCursor": false
  },

  // Feature level setting to enable/disable code lens for references and run/debug tests
  "go.enableCodeLens": {
    "runtest": true
  },

  // Flags to pass to format tool (e.g. ["-s"]). Not applicable when using the language server.
  "go.formatFlags": [],

  // When the language server is enabled and one of `default`/`gofmt`/`goimports`/`gofumpt` is chosen, the language server will handle formatting. If `custom` tool is selected, the extension will use the `customFormatter` tool in the `go.alternateTools` section.
  //  - default: If the language server is enabled, format via the language server, which already supports gofmt, goimports, goreturns, and gofumpt. Otherwise, goimports.
  //  - gofmt: Formats the file according to the standard Go style. (not applicable when the language server is enabled)
  //  - goimports: Organizes imports and formats the file with gofmt. (not applicable when the language server is enabled)
  //  - goformat: Configurable gofmt, see https://github.com/mbenkmann/goformat.
  //  - gofumpt: Stricter version of gofmt, see https://github.com/mvdan/gofumpt. . Use `gopls.format.gofumpt` instead)
  //  - custom: Formats using the custom tool specified as `customFormatter` in the `go.alternateTools` setting. The tool should take the input as STDIN and output the formatted code as STDOUT.
  "go.formatTool": "default",

  // Additional command line flags to pass to `gotests` for generating tests.
  "go.generateTestsFlags": [],

  // Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true.
  "go.gopath": null,

  // Specifies the GOROOT to use when no environment variable is set.
  "go.goroot": null,

  // Infer GOPATH from the workspace root. This is ignored when using Go Modules.
  "go.inferGopath": false,

  // Enable/disable inlay hints for variable types in assign statements:
  // ```go
  // 	i/* int*/, j/* int*/ := 0, len(r)-1
  // ```
  "go.inlayHints.assignVariableTypes": false,

  // Enable/disable inlay hints for composite literal field names:
  // ```go
  // 	{/*in: */"Hello, world", /*want: */"dlrow ,olleH"}
  // ```
  "go.inlayHints.compositeLiteralFields": false,

  // Enable/disable inlay hints for composite literal types:
  // ```go
  // 	for _, c := range []struct {
  // 		in, want string
  // 	}{
  // 		/*struct{ in string; want string }*/{"Hello, world", "dlrow ,olleH"},
  // 	}
  // ```
  "go.inlayHints.compositeLiteralTypes": false,

  // Enable/disable inlay hints for constant values:
  // ```go
  // 	const (
  // 		KindNone   Kind = iota/* = 0*/
  // 		KindPrint/*  = 1*/
  // 		KindPrintf/* = 2*/
  // 		KindErrorf/* = 3*/
  // 	)
  // ```
  "go.inlayHints.constantValues": false,

  // Enable/disable inlay hints for implicit type parameters on generic functions:
  // ```go
  // 	myFoo/*[int, string]*/(1, "hello")
  // ```
  "go.inlayHints.functionTypeParameters": false,

  // Enable/disable inlay hints for parameter names:
  // ```go
  // 	parseInt(/* str: */ "123", /* radix: */ 8)
  // ```
  "go.inlayHints.parameterNames": false,

  // Enable/disable inlay hints for variable types in range statements:
  // ```go
  // 	for k/* int*/, v/* string*/ := range []string{} {
  // 		fmt.Println(k, v)
  // 	}
  // ```
  "go.inlayHints.rangeVariableTypes": false,

  // If true, then `-i` flag will be passed to `go build` everytime the code is compiled. Since Go 1.10, setting this may be unnecessary unless you are in GOPATH mode and do not use the language server.
  "go.installDependenciesWhenBuilding": false,

  // Flags like -rpc.trace and -logfile to be used while running the language server.
  "go.languageServerFlags": [],

  // Flags to pass to Lint tool (e.g. ["-min_confidence=.8"])
  "go.lintFlags": [],

  // Lints code on file save using the configured Lint tool. Options are 'file', 'package', 'workspace' or 'off'.
  //  - file: lint the current file on file saving
  //  - package: lint the current package on file saving
  //  - workspace: lint all the packages in the current workspace root folder on file saving
  //  - off: do not run lint automatically
  "go.lintOnSave": "package",

  // Specifies Lint tool name.
  "go.lintTool": "staticcheck",

  // This setting is deprecated. Use 'Developer: Set Log Level...' command to control logging level instead.
  //
  "go.logging.level": "",

  // The flags configured here will be passed through to command `goplay`
  "go.playground": {
    "openbrowser": true,
    "share": true,
    "run": true
  },

  // Tags and options configured here will be used by the Remove Tags command to remove tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, all tags and options will be removed.
  "go.removeTags": {
    "tags": "",
    "options": "",
    "promptForTags": false
  },

  // Specifies whether to show the Welcome experience on first install
  "go.showWelcome": true,

  // Prompt for surveys, including the gopls survey and the Go developer survey.
  "go.survey.prompt": true,

  // enable the default go build/test task provider.
  "go.tasks.provideDefault": true,

  // Apply the Go & PATH environment variables used by the extension to all integrated terminals.
  "go.terminal.activateEnvironment": true,

  // Absolute path to a file containing environment variables definitions. File contents should be of the form key=value.
  "go.testEnvFile": null,

  // Environment variables that will be passed to the process that runs the Go tests
  "go.testEnvVars": {},

  // Run benchmarks when running all tests in a file or folder.
  "go.testExplorer.alwaysRunBenchmarks": false,

  // Concatenate all test log messages for a given location into a single message.
  "go.testExplorer.concatenateMessages": true,

  // Enable the Go test explorer
  "go.testExplorer.enable": true,

  // Present packages in the test explorer flat or nested.
  "go.testExplorer.packageDisplayMode": "flat",

  // Set the source location of dynamically discovered subtests to the location of the containing function. As a result, dynamically discovered subtests will be added to the gutter test widget of the containing function.
  "go.testExplorer.showDynamicSubtestsInEditor": false,

  // Open the test output terminal when a test run is started.
  "go.testExplorer.showOutput": true,

  // Flags to pass to `go test`. If null, then buildFlags will be used. This is not propagated to the language server.
  "go.testFlags": null,

  // Run 'go test' on save for current package. It is not advised to set this to `true` when you have Auto Save enabled.
  "go.testOnSave": false,

  // The Go build tags to use for when running tests. If null, then buildTags will be used.
  "go.testTags": null,

  // Specifies the timeout for go test in ParseDuration format.
  "go.testTimeout": "30s",

  // Environment variables that will be passed to the tools that run the Go tools (e.g. CGO_CFLAGS) and debuggee process launched by Delve. Format as string key:value pairs. When debugging, merged with `envFile` and `env` values with precedence `env` > `envFile` > `go.toolsEnvVars`.
  "go.toolsEnvVars": {},

  // Location to install the Go tools that the extension depends on if you don't want them in your GOPATH.
  "go.toolsGopath": null,

  // Automatically update the tools used by the extension, without prompting the user.
  "go.toolsManagement.autoUpdate": false,

  // Specify whether to prompt about new versions of Go and the Go tools (currently, only `gopls`) the extension depends on
  //  - proxy: keeps notified of new releases by checking the Go module proxy (GOPROXY)
  //  - local: checks only the minimum tools versions required by the extension
  //  - off: completely disables version check (not recommended)
  "go.toolsManagement.checkForUpdates": "proxy",

  // The path to the `go` binary used to install the Go tools. If it's empty, the same `go` binary chosen for the project will be used for tool installation.
  "go.toolsManagement.go": "",

  // Trace the communication between VS Code and the Go language server.
  "go.trace.server": "off",

  // Enable intellisense, code navigation, refactoring, formatting & diagnostics for Go. The features are powered by the Go language server "gopls".
  "go.useLanguageServer": true,

  // Flags to pass to `go tool vet` (e.g. ["-all", "-shadow"]). Not applicable when using the language server's diagnostics.
  "go.vetFlags": [],

  // Vets code on file save using 'go tool vet'. Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.
  //  - package: vet the current package on file saving
  //  - workspace: vet all the packages in the current workspace root folder on file saving
  //  - off: do not run vet automatically
  "go.vetOnSave": "package",

  // Configure the default Go language server ('gopls'). In most cases, configuring this section is unnecessary. See [the documentation](https://github.com/golang/tools/blob/master/gopls/doc/settings.md) for all available settings.
  "gopls": {},

  // When `latex-workshop.bibtex-fields.sort.enabled` is true, these fields are put at the top, in the order defined by the array.
  "latex-workshop.bibtex-entries.first": ["string", "xdata"],

  // When `latex-workshop.bibtex-fields.sort.enabled` is true, sort fields according the order defined here and then alphabetically for non listed fields.
  "latex-workshop.bibtex-fields.order": [],

  // Sort fields inside every entry. The sorting order is defined by `latex-workshop.bibtex-fields.order`. This variable only has effect when formatting bibtex aligns fields. It is not possible to sort entries without aligning them.
  "latex-workshop.bibtex-fields.sort.enabled": false,

  // Align equal signs when calling VSCode format on a .bib file.
  "latex-workshop.bibtex-format.align-equal.enabled": true,

  // Determines if field names should be formatted like 'AUTHOR' or 'author'.
  "latex-workshop.bibtex-format.case": "lowercase",

  // How to handle duplicates found by the bibtex sorting functions. Duplicates are decided according to the `bibtex-format.sortby` config.
  "latex-workshop.bibtex-format.handleDuplicates": "Highlight Duplicates",

  // Sort content when calling VSCode format on a .bib file.
  "latex-workshop.bibtex-format.sort.enabled": false,

  // An array of strings to sort by. Either a bibtex field name (title, author, year, etc.), or `"year-desc"` to sort by year in descending order, or `"key"` for the entry key, or `"type"` for the entry type (article, book, misc, etc.). E.g. `["author", "year-desc", "title"]`.
  "latex-workshop.bibtex-format.sortby": ["key"],

  // Surround each field value with either {Curly braces} or "Quotation marks".
  "latex-workshop.bibtex-format.surround": "Curly braces",

  // Indentation for each field. The string can be `"tab"` or of the form `"X spaces"` or simply `"X"` where `X` is a number.
  "latex-workshop.bibtex-format.tab": "2 spaces",

  // Keep the trailing comma of the last field item.
  "latex-workshop.bibtex-format.trailingComma": false,

  // Defines the maximum bibtex file size for the extension to parse in MB.
  "latex-workshop.bibtex.maxFileSize": 5,

  // Use alternative keymap combo, i.e., `ctrl`+`l` `alt`+`key`, to replace the default `ctrl`/`cmd`+`alt` shortcuts.
  "latex-workshop.bind.altKeymap.enabled": false,

  // Enable the automatic insertion of `\item` on a newline when pressing `Enter` in a line starting in `\item`.
  "latex-workshop.bind.enter.key": true,

  // Enable checking for duplicated labels. A new check is triggered every time the intellisense data is updated, see `latex-workshop.intellisense.update.aggressive.enabled`.
  "latex-workshop.check.duplicatedLabels.enabled": true,

  // Delay to wait for GitHub Codespaces Authentication of port forwarding to be resolved, in milliseconds.
  "latex-workshop.codespaces.portforwarding.openDelay": 20000,

  // Enable docker-based LaTeX distribution support. Do not set this item to `true` unless you are aware of what it means. This extension will use the images defined in `latex-workshop.docker.image.latex` to execute `latexmk`, `synctex`, `texcount`, and `latexindent`.
  "latex-workshop.docker.enabled": false,

  // Define the image for `latexmk`, `synctex`, `texcount`, and `latexindent`.
  "latex-workshop.docker.image.latex": "",

  // Docker (or Podman) executable name or path.
  "latex-workshop.docker.path": "docker",

  // Enable Hover on Citations.
  "latex-workshop.hover.citation.enabled": true,

  // Enable Hover on Commands to show the possible signatures.
  "latex-workshop.hover.command.enabled": true,

  // The color of cursor in Hover Preview.
  "latex-workshop.hover.preview.cursor.color": "auto",

  // Render cursor in Hover Preview at the current position.
  "latex-workshop.hover.preview.cursor.enabled": true,

  // Cursor symbol in Hover Preview.
  "latex-workshop.hover.preview.cursor.symbol": "\\!|\\!",

  // Enable Hover Preview.
  "latex-workshop.hover.preview.enabled": true,

  // MathJax extensions to load for Hover Preview. See [the list](https://docs.mathjax.org/en/latest/input/tex/extensions/index.html). Note that the following extensions are loaded by default: `ams`, `color`, `newcommand`, `noerrors`, and `noundefined`. They cannot be disabled.
  "latex-workshop.hover.preview.mathjax.extensions": [],

  // Maximum number of lines between the beginning of the math environment and the cursor position to allow preview.
  "latex-workshop.hover.preview.maxLines": 20,

  // Set the path of a file containing newcommands to be used in Hover Preview. If the path is relative, it is joined with the root dir.
  "latex-workshop.hover.preview.newcommand.newcommandFile": "",

  // Enable newcommands defined in the current TeX file to be included in Hover Preview.
  "latex-workshop.hover.preview.newcommand.parseTeXFile.enabled": true,

  // Scaling of Hover Preview.
  "latex-workshop.hover.preview.scale": 1,

  // Enable Hover on References.
  "latex-workshop.hover.ref.enabled": true,

  // Show number assigned to the reference in the previous compilation.
  "latex-workshop.hover.ref.number.enabled": true,

  // Many snippets use text hints of the form `${\d:some_tex}` for their argument. You may prefer to hide instead by setting this configuration to `false`.
  "latex-workshop.intellisense.argumentHint.enabled": true,

  // Character to trigger snippet suggestions as part of intellisense. Set this variable to `''` to deactivate these suggestions.
  "latex-workshop.intellisense.atSuggestion.trigger.latex": "@",

  // Dictionary of `"@prefix": "snippet command"` to add to, replace, or remove the default suggestions in `data/at-suggestions.json`. The key of the dictionary is the triggering string, which **must** starts with `@` regardless of `latex-workshop.intellisense.atSuggestion.trigger.latex`. The value of the dictionary is the snippet to be inserted. If the key is identical to a default snippet defined in `data/at-suggestions.json`, the new value in the dictionary is used for suggestion. If the value is an empty string, the snippet is removed from suggestion. For example, `{ "@.": "\cdot", "@6": "" }`.
  "latex-workshop.intellisense.atSuggestion.user": {},

  // Dictionary of `"entry name": ["array", "of", "fields"]` to replace the default fields used in `data/biblatex-entries.json`. See `data/biblatex-entries.json` for the list of fields for each entry. This variable is used when `latex-workshop.intellisense.citation.backend` is set to `biblatex`.
  "latex-workshop.intellisense.biblatexJSON.replace": {},

  // Dictionary of `"entry name": ["array", "of", "fields"]` to replace the default fields used in `data/bibtex-entries.json`. See `data/bibtex-entries.json` for the list of fields for each entry. This variable is used when `latex-workshop.intellisense.citation.backend` is set to `bibtex`.
  "latex-workshop.intellisense.bibtexJSON.replace": {},

  // Backend to use for citation intellisense.
  "latex-workshop.intellisense.citation.backend": "bibtex",

  // List of fields to display for citation preview and intellisense. This list is also used as the filter text to narrow down the intellisense suggestions.
  "latex-workshop.intellisense.citation.format": ["author", "title", "journal", "publisher", "booktitle", "year"],

  // Defines what to show as suggestion labels when intellisense provides citation suggestions in inline mode.
  //  - bibtex key: Show bibtex keys in the inline mode.
  //  - title: Show publication titles in the inline mode.
  //  - authors: Show publication authors in the inline mode.
  "latex-workshop.intellisense.citation.label": "bibtex key",

  // Defines which type of hint to show when intellisense provides citation suggestions.
  //  - inline: Use the inline intellisense to provide citation completion items.
  //  - browser: Use a dropdown menu to provide citation completion items.
  "latex-workshop.intellisense.citation.type": "inline",

  // Dictionary of `"command name": "command snippet"` to add to, replace, or remove the default ones in `data/commands.json`. The key of the dictionary is the command name with optional braces indicating the command arguments. The value of the dictionary is the snippet to be inserted. If the key is identical to a default command suggestion defined in `data/commands.json`, the new value in the dictionary is used for suggestion. If the value is an empty string, the command is removed from suggestion. Leading backslashes will be added to both the name and snippet by the extension, so don't include them in this config. For example, `{"mycommand[]{}": "notsamecommand[${2:option}]{$TM_SELECTED_TEXT$1}", "parbox{}{}": "parbox{${2:width}}{$TM_SELECTED_TEXT$1}", "overline{}": ""}` adds a new command with name `mycommand[]{} that inserts `\notsamecommand[]{}`, replaces the default snippet of `\parbox{}{}` to make it include current selected text, and removes `\overline{}` from suggestion.
  "latex-workshop.intellisense.command.user": {},

  // Specify the base directory for file completion
  //  - root relative: Completion from the root file directory
  //  - file relative: Completion from the current file directory
  //  - both: both
  "latex-workshop.intellisense.file.base": "root relative",

  // Patterns to ignore in file completion
  "latex-workshop.intellisense.file.exclude": [
    "**/*.aux",
    "**/*.bbl",
    "**/*.bcf",
    "**/*.blg",
    "**/*.idx",
    "**/*.ind",
    "**/*.lof",
    "**/*.lot",
    "**/*.out",
    "**/*.toc",
    "**/*.acn",
    "**/*.acr",
    "**/*.alg",
    "**/*.glg",
    "**/*.glo",
    "**/*.gls",
    "**/*.ist",
    "**/*.fls",
    "**/*.log",
    "**/*.nav",
    "**/*.snm",
    "**/*.fdb_latexmk",
    "**/*.synctex.gz",
    "**/*.run.xml"
  ],

  // Enable preview for `\includegraphics` completion.
  "latex-workshop.intellisense.includegraphics.preview.enabled": true,

  // The name of LaTeX commands that indicates a label definition. The command must accept one mandatory argument of the label reference string, e.g, \linelabel{ref-str}.
  "latex-workshop.intellisense.label.command": ["label", "linelabel"],

  // Some LaTeX commands can have several forms, each with different arguments. If set to True, the intellisense completion list will have one entry for each form of a given command. Default is true.
  "latex-workshop.intellisense.optionalArgsEntries.enabled": true,

  // List of extra directories to look for package completion files in addition to those provided by the extension. Files found in these directories have a higher priority over the default ones. LaTeX-Workshop bundles a limited number of package macro/env suggestions. Additional ones can be downloaded from https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2FJames-Yu%2FLaTeX-Workshop%2Ftree%2Fmaster%2Fdev%2Fpackages . For custom packages, please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Intellisense#commands-starting-with- to learn how to generate these files. This setting is only relevant when `latex-workshop.intellisense.package.env.enabled` is true.
  "latex-workshop.intellisense.package.dirs": [],

  // Auto-complete commands and environments from used packages.
  "latex-workshop.intellisense.package.enabled": true,

  // If true, every environment provided by an included package is available by a snippet `\envname`. Only applies when `latex-workshop.intellisense.package.enabled` is true. You can use only 2 placeholders: `%WORKSPACE_FOLDER%`, `%RELATIVE_DIR%`. Please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders for their definitions.
  "latex-workshop.intellisense.package.env.enabled": true,

  // List of packages to exclude from the auto-completion mechanism. When `latex-workshop.intellisense.package.enabled#` is set to `true`, the commands and environments defined in these packages will not be added to the intellisense suggestions. This setting has a higher priority over `#latex-workshop.intellisense.package.extra`. You may include the string "lw-default" in the list to remove all default commands and environments.
  "latex-workshop.intellisense.package.exclude": [],

  // List of extra packages to always add to the auto-completion mechanism. When `latex-workshop.intellisense.package.enabled` is set to `true`, the commands and environments defined in these extra packages will be added to the intellisense suggestions.
  "latex-workshop.intellisense.package.extra": [],

  // Auto-complete sub- and super-scripts from the current project.
  "latex-workshop.intellisense.subsuperscript.enabled": false,

  // Additional trigger characters for intellisense of LaTeX documents.
  "latex-workshop.intellisense.triggers.latex": [],

  // When `\` is typed, show unimath symbols in the dropdown selector.
  "latex-workshop.intellisense.unimathsymbols.enabled": false,

  // Defines whether the extension aggressively parses the changed content after stopped typing. Disable this config will let the extension only update intellisense after saving changed files.
  "latex-workshop.intellisense.update.aggressive.enabled": false,

  // Defines the delay in milliseconds for the extension to update current active file content for intellisense after stopped typing. This config works only when `intellisense.update.aggressive.enabled` is enabled. Lower this value to let the extension know newly defined commands/references/environments more quickly, at the cost of more frequent content parsing: more computational burden.
  "latex-workshop.intellisense.update.delay": 1000,

  // Use kpsewhich as defined by `latex-workshop.kpsewhich.path` to resolve bibliography file paths for intellisense parsing.
  "latex-workshop.kpsewhich.bibtex.enabled": true,

  // Use kpsewhich as defined by `latex-workshop.kpsewhich.path` to resolve latex class paths for intellisense parsing.
  "latex-workshop.kpsewhich.class.enabled": true,

  // Define the location of the kpsewhich executable file.
  "latex-workshop.kpsewhich.path": "kpsewhich",

  // Delete LaTeX auxiliary files when errors occur during build and retry. This property defines whether LaTeX Workshop will try to clean and build the project once again after errors happen in the build toolchain.
  "latex-workshop.latex.autoBuild.cleanAndRetry.enabled": true,

  // The minimal time interval in milliseconds for an auto build to trigger after the previous (manual and auto) build. This value is recommended to be greater than ~500.
  "latex-workshop.latex.autoBuild.interval": 1000,

  // When the extension shall auto build LaTeX project using the default (first) recipe.
  // - `onSave` builds the project upon saving a `tex` file in vscode.
  // - `onFileChange` builds the project upon detecting a file change in any of the dependencies, even modified by other applications.
  //
  //  Note that `onSave` is more restrictive than `onFileChange`
  //  - never: Never run auto build
  //  - onSave: Auto build whenever a file is saved
  //  - onFileChange: Auto build whenever a dependency file changes on disk
  "latex-workshop.latex.autoBuild.run": "onFileChange",

  // When LaTeX auxiliary files should be deleted. The folder to be cleaned is defined in `latex-workshop.latex.outDir`.
  // - `onFailed` cleans the project when compilation fails.
  // - `onBuilt` cleans the project when compilation is done, whether successful or failed.
  //  - never: Never clean the project
  //  - onFailed: Clean compilation fails
  //  - onSucceeded: Clean compilation successes
  //  - onBuilt: Clean after build, be it successful or not
  "latex-workshop.latex.autoClean.run": "never",

  // List of directories where to look for `.bib` files. Absolute paths are required. This setting is only used by the intellisense feature, you may also need to set the environment variable `BIBINPUTS` properly for the LaTeX compiler to find the `.bib` files.
  "latex-workshop.latex.bibDirs": [],

  // Clear the LaTeX Compiler logs before every step of a recipe. Set this property to false to keep the logs of all tools in a recipe.
  "latex-workshop.latex.build.clearLog.everyRecipeStep.enabled": true,

  // Force the use the recipe mechanism even if some magic comments are present.
  "latex-workshop.latex.build.forceRecipeUsage": true,

  // Whether to include the name of the root file being built in the status bar. You can use only 2 placeholders: `%WORKSPACE_FOLDER%`, `%RELATIVE_DIR%`. Please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders for their definitions.
  "latex-workshop.latex.build.rootfileInStatus": false,

  // The arguments of `latex-workshop.latex.clean.command`. Placeholders listed in https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders can be used to populate the argument strings. Besides, an additional `%TEX%` placeholder refers to the full path of the tex file from which the clean command is called.
  "latex-workshop.latex.clean.args": ["-outdir=%OUTDIR%", "-c", "%TEX%"],

  // The command to be used to remove temporary files when `latex-workshop.latex.clean.method` is set to `command`.
  "latex-workshop.latex.clean.command": "latexmk",

  // Files to clean when `latex-workshop.latex.clean.method` is set to `glob`. This property must be an array of strings. Placeholders listed in https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders can be used to populate the glob strings. File globs such as `*.removeme`, `something?.aux` can be used. Users can also specify glob patterns like `emptyfolder*/` to remove empty folders. Non-empty folders will be ignored. The folder globs must end with a slash and the last path component must not contain the globstar `**`, otherwise the folders will not be removed. The following globs patterns are correct `['abc/', 'abc*/', '**/abc*/', 'abc/**/def/']` but these are not ['**', '**/', 'abc/**', 'abc/**/', 'abc/def**/', 'abc/d**ef/']`.
  "latex-workshop.latex.clean.fileTypes": [
    "%DOCFILE%.aux",
    "%DOCFILE%.bbl",
    "%DOCFILE%.blg",
    "%DOCFILE%.idx",
    "%DOCFILE%.ind",
    "%DOCFILE%.lof",
    "%DOCFILE%.lot",
    "%DOCFILE%.out",
    "%DOCFILE%.toc",
    "%DOCFILE%.acn",
    "%DOCFILE%.acr",
    "%DOCFILE%.alg",
    "%DOCFILE%.glg",
    "%DOCFILE%.glo",
    "%DOCFILE%.gls",
    "%DOCFILE%.fls",
    "%DOCFILE%.log",
    "%DOCFILE%.fdb_latexmk",
    "%DOCFILE%.snm",
    "%DOCFILE%.synctex(busy)",
    "%DOCFILE%.synctex.gz(busy)",
    "%DOCFILE%.nav",
    "%DOCFILE%.vrb"
  ],

  // Define how temporary files will be cleaned.
  //  - glob: Clean all the files located in `latex-workshop.latex.outDir#` and matching the glob patterns listed in `#latex-workshop.latex.clean.fileTypes`.
  //  - command: Run `latex-workshop.latex.clean.command` to clean temporary files.
  "latex-workshop.latex.clean.method": "command",

  // Delete LaTeX auxiliary files recursively in sub-folders of `latex-workshop.latex.outDir`. Note that sub-folders are not removed.
  "latex-workshop.latex.clean.subfolder.enabled": false,

  // The arguments of `latex-workshop.latex.external.build.command` when calling latex-workshop.build.
  "latex-workshop.latex.external.build.args": [],

  // The external command to execute when calling latex-workshop.build. This is useful when compiling relies on a Makefile or a bespoke script. When defined, it completely bypasses the recipes and root file detection mechanism.
  "latex-workshop.latex.external.build.command": "",

  // The jobname argument of the compiling tool, which is used by the extension to find project files (e.g., PDF and SyncTeX files). This config should be set identical to the value provided to the `-jobname=` argument, and should not have placeholders. Leave the config empty to ignore jobname and keep the default behavior.
  "latex-workshop.latex.jobname": "",

  // Define the arguments to be input to magic command executable. This can be overridden by using "% !TeX options".
  "latex-workshop.latex.magic.args": ["-synctex=1", "-interaction=nonstopmode", "-file-line-error", "%DOC%"],

  // Define the arguments to be input to BIB magic command executable. This can be overridden by using "% !BIB options".
  "latex-workshop.latex.magic.bib.args": ["%DOCFILE%"],

  // Add `--max-print-line` option to LaTeX build commands. This flag tells some MikTeX compilers to produce non hard wrapped log messages. Non hard wrapped log messages are required for the _Problem_ Pane to properly display messages.
  "latex-workshop.latex.option.maxPrintLine.enabled": true,

  // The directory where the extension tries to find project files (e.g., PDF and SyncTeX files) are located. Both relative and absolute paths are supported. Relative path start from the root file location, so beware if it is located in sub-directory. The path must not contain a trailing slash. The LaTeX toolchain should output files to this path. For a list of supported placeholders, please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders. Note that if this config is set to %DIR% (default value) or %DIR_W32%, the extension will try to parse the last LaTeX tools used and look for `-out-directory=` and `-outdir=`, and automatically determine the output directory. This means that you can safely ignore this config if you use `latexmk` and do not manually `mv` the output files in your recipe.
  "latex-workshop.latex.outDir": "%DIR%",

  // Define which recipe is used by `latex-workshop.build#`. It also applies to auto build. Recipes are referred to by their names as defined in `#latex-workshop.latex.recipes`. Note there are two particular values:
  // - `first` means to use the first recipe in `latex-workshop.latex.recipes`;
  // - `lastUsed` means to use the last run recipe.
  "latex-workshop.latex.recipe.default": "first",

  // Define LaTeX compiling recipes. Each recipe in the list is an object containing its name and the names of tools to be used sequentially, which are defined in `latex-workshop.latex.tools`. By default, the first recipe is used to compile the project. For details, please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#latex-recipes.
  "latex-workshop.latex.recipes": [
    {
      "name": "latexmk",
      "tools": ["latexmk"]
    },
    {
      "name": "latexmk (latexmkrc)",
      "tools": ["latexmk_rconly"]
    },
    {
      "name": "latexmk (lualatex)",
      "tools": ["lualatexmk"]
    },
    {
      "name": "latexmk (xelatex)",
      "tools": ["xelatexmk"]
    },
    {
      "name": "pdflatex -> bibtex -> pdflatex * 2",
      "tools": ["pdflatex", "bibtex", "pdflatex", "pdflatex"]
    },
    {
      "name": "Compile Rnw files",
      "tools": ["rnw2tex", "latexmk"]
    },
    {
      "name": "Compile Jnw files",
      "tools": ["jnw2tex", "latexmk"]
    },
    {
      "name": "Compile Pnw files",
      "tools": ["pnw2tex", "latexmk"]
    },
    {
      "name": "tectonic",
      "tools": ["tectonic"]
    }
  ],

  // When the `subfile` package is used, either the main file or any subfile containing `\documentclass[main.tex]{subfile}` can be LaTeXing. When `false`, the `build` and `view` commands  ask the user's choice first. When `true`, the subfile is used when `latex-workshop.latex.rootFile.useSubFile` is also `true`, otherwise the rootFile is used.
  "latex-workshop.latex.rootFile.doNotPrompt": false,

  // Determine if the root file is detected based on the presence of \documentclass[]{} or \begin{document}.
  "latex-workshop.latex.rootFile.indicator": "\\documentclass[]{}",

  // When the `subfile` package is used, either the main file or any subfile containing `\documentclass[main.tex]{subfile}` can be LaTeXing. When `true`, the extension uses the subfile as the rootFile for the `autobuild`, `clean` and `synctex` commands.
  "latex-workshop.latex.rootFile.useSubFile": true,

  // Patterns of files to exclude from the root detection mechanism. See also `latex-workshop.latex.search.rootFiles.include`. For more details, see the https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#multi-file-projects.
  "latex-workshop.latex.search.rootFiles.exclude": [],

  // Patterns of files to consider for the root detection mechanism. Relative paths are computed from the workspace folder. To detect the root file and the tex file tree, we parse all the `.tex` listed here. If you want to specify all `.tex` files inside directory, say `foo`, and all its subdirectories recursively, you need to use `**/foo/**/*.tex`. If you only want to match `.tex` files at the top level of the workspace, use `*.tex`. For more details, see https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#multi-file-projects
  "latex-workshop.latex.search.rootFiles.include": ["**/*.tex", "**/*.rnw", "**/*.Rnw"],

  // List of directories where to look for extra input `.tex` files.
  // Absolute paths are required. You may also need to set the environment variable `TEXINPUTS` properly for the LaTeX compiler to find the `.tex` files, see the `env` parameter of [recipes](https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#latex-recipes).
  "latex-workshop.latex.texDirs": [],

  // Define LaTeX compiling tools to be used in recipes. Each tool is labeled by its `name`. When invoked, `command` is spawned with arguments defined in `args` and environment variables defined in `env`. Typically no spaces should appear in each argument unless in paths. List of available placeholders: `%DOC%`, `%DOC_W32%, %DOC_EXT%`, `%DOC_EXT_W32%`, `%DOCFILE%`, `%DOCFILE_EXT%`, `%DIR%`, `%DIR_W32%`, `%TMPDIR%` and `%OUTDIR%`, `%OUTDIR_W32%`. Please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders for a complete list of all placeholders.
  "latex-workshop.latex.tools": [
    {
      "name": "latexmk",
      "command": "latexmk",
      "args": ["-synctex=1", "-interaction=nonstopmode", "-file-line-error", "-pdf", "-outdir=%OUTDIR%", "%DOC%"],
      "env": {}
    },
    {
      "name": "lualatexmk",
      "command": "latexmk",
      "args": ["-synctex=1", "-interaction=nonstopmode", "-file-line-error", "-lualatex", "-outdir=%OUTDIR%", "%DOC%"],
      "env": {}
    },
    {
      "name": "xelatexmk",
      "command": "latexmk",
      "args": ["-synctex=1", "-interaction=nonstopmode", "-file-line-error", "-xelatex", "-outdir=%OUTDIR%", "%DOC%"],
      "env": {}
    },
    {
      "name": "latexmk_rconly",
      "command": "latexmk",
      "args": ["%DOC%"],
      "env": {}
    },
    {
      "name": "pdflatex",
      "command": "pdflatex",
      "args": ["-synctex=1", "-interaction=nonstopmode", "-file-line-error", "%DOC%"],
      "env": {}
    },
    {
      "name": "bibtex",
      "command": "bibtex",
      "args": ["%DOCFILE%"],
      "env": {}
    },
    {
      "name": "rnw2tex",
      "command": "Rscript",
      "args": ["-e", "knitr::opts_knit$set(concordance = TRUE); knitr::knit('%DOCFILE_EXT%')"],
      "env": {}
    },
    {
      "name": "jnw2tex",
      "command": "julia",
      "args": ["-e", "using Weave; weave(\"%DOC_EXT%\", doctype=\"tex\")"],
      "env": {}
    },
    {
      "name": "jnw2texminted",
      "command": "julia",
      "args": ["-e", "using Weave; weave(\"%DOC_EXT%\", doctype=\"texminted\")"],
      "env": {}
    },
    {
      "name": "pnw2tex",
      "command": "pweave",
      "args": ["-f", "tex", "%DOC_EXT%"],
      "env": {}
    },
    {
      "name": "pnw2texminted",
      "command": "pweave",
      "args": ["-f", "texminted", "%DOC_EXT%"],
      "env": {}
    },
    {
      "name": "tectonic",
      "command": "tectonic",
      "args": ["--synctex", "--keep-logs", "%DOC%.tex"],
      "env": {}
    }
  ],

  // List environments with verbatim-like content. These environments are stripped off the `.tex` files before any parsing occurs. Note that this variable has no effect on syntax highlighting.
  "latex-workshop.latex.verbatimEnvs": ["verbatim", "lstlisting", "minted"],

  // Defines the time delay before confirming a non-binary file is indeed deleted. Increase this value if your toolchain involves external file changes with a delete-then-create pattern. LaTeX Workshop internally monitors file change events and initiates auto-builds, intellisense parsing, latex importing, and/or PDF viewing refresh. We use this config to control the file polling delay before confirming that the file deletion is not a delete-then-create.
  "latex-workshop.latex.watch.delay": 250,

  // Files to ignore from the watching mechanism, i.e., no intellisense or build-on-file-change. However, document structure/outline and build-on-save won't be affected. This property must be an array of glob patterns. The patterns are matched against the absolute file path. To ignore everything inside the `texmf` tree, `**/texmf/**` can be used.
  "latex-workshop.latex.watch.files.ignore": [
    "**/*.bbx",
    "**/*.bbl",
    "**/*.cbx",
    "**/*.cfg",
    "**/*.clo",
    "**/*.cnf",
    "**/*.def",
    "**/*.dfu",
    "**/*.enc",
    "**/*.fd",
    "**/*.fmt",
    "**/*.lbx",
    "**/*.map",
    "**/*.mkii",
    "**/*.pfb",
    "**/*.tfm",
    "**/*.vf",
    "**/*.code.tex",
    "**/*.sty",
    "**/texmf-{dist,var}/**",
    "**/Local/MiKTeX/**",
    "**/Local/Programs/MiKTeX/**",
    "**/Roaming/MiKTeX/**",
    "**/Program*/MiKTeX*/**",
    "**/.miktex/texmfs/**",
    "/var/cache/miktex-texmf/**",
    "/usr/local/share/miktex-texmf/**",
    "**/Library/Application Support/MiKTeX/texmfs/**",
    "/dev/null"
  ],

  // Defines the time delay before confirming a PDF-like binary file is fully changed. Increase this value if you encounter repeated viewer refreshes and/or loss of PDF scrolling position. LaTeX Workshop internally monitors file change events and initiates auto-builds and/or PDF viewing refresh. When LaTeX is changing large files (particularly binary files like PDFs), multiple consecutive file change events may be emitted, potentially causing file corruption issues. We use this config to control the file polling delay before confirming that the file change has been stabilized. Note that non-binary files such as `.tex`, `.bib`, and `.cls` are not affected.
  "latex-workshop.latex.watch.pdf.delay": 250,

  // Define the command line arguments for latexindent. In the addition to the placeholders defined at https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders, the following placeholders are accepted
  // - %TMPFILE%: The full path of the raw TeX file to be formatted. At this moment you need to use it as an input file of `latexindent`.
  // - %INDENT%: The indent character of the file, typically `	`, `' '`, `' '`.
  //
  // Note that the option `-c` requires a trailing slash.
  "latex-workshop.latexindent.args": ["-c", "%DIR%/", "%TMPFILE%", "-y=defaultIndent: '%INDENT%'"],

  // Define the location of the latexindent executable file.
  "latex-workshop.latexindent.path": "latexindent",

  // Write the `TabSize` number from `.chktexrc`. The default value "-1" means that LaTeX Workshop will try to find `.chktexrc` and to read the value from it.
  "latex-workshop.linting.chktex.convertOutput.column.chktexrcTabSize": -1,

  // Enable converting ChkTeX outputs' column numbers for non-ASCII characters.
  "latex-workshop.linting.chktex.convertOutput.column.enabled": true,

  // Enable linting LaTeX with `chktex`. Check `latex-workshop.linting.run` to control when `chktex` is executed if this config is set to `true.
  "latex-workshop.linting.chktex.enabled": false,

  // Linter arguments to check LaTeX syntax of the current file state in real time with ChkTeX. Arguments must be in separate strings in the array. Additional arguments, i.e., `-I0 -f%f:%l:%c:%d:%k:%n:%m\n` will be appended when constructing the command. Current file contents will be piped to the command through stdin.
  "latex-workshop.linting.chktex.exec.args": ["-wall", "-n22", "-n30", "-e16", "-q"],

  // Define the location of ChkTeX executive file. This command will be joint with `latex-workshop.linting.chktex.exec.args` and required arguments to form a complete command of ChkTeX.
  "latex-workshop.linting.chktex.exec.path": "chktex",

  // Defines the delay in milliseconds for linter to wait after stopped typing. This config only matters when `latex-workshop.linting.run` is set to `onType`.
  "latex-workshop.linting.delay": 500,

  // Enable linting LaTeX with `lacheck`. Check `latex-workshop.linting.run` to control when `lacheck` is executed if this config is set to `true.
  "latex-workshop.linting.lacheck.enabled": false,

  // Define the location of LaCheck executive file.
  "latex-workshop.linting.lacheck.exec.path": "lacheck",

  // When LaTeX should be linted.
  // - `onSave`: the whole LaTeX project will be linted upon saving.
  // - `onType`: the active document will be linted when input is stopped for a period of time defined in `latex-workshop.linting.delay`. It also implies `onSave`.
  //  - onSave: Lint the whole LaTeX project upon saving
  //  - onType: Lint the active document when input is stopped
  "latex-workshop.linting.run": "onSave",

  // [Experimental] Render a cursor on the math preview panel. **This feature is experimental. If you report an issue to us on this feature, we will not fix it. We will not accept any pull requests.**
  "latex-workshop.mathpreviewpanel.cursor.enabled": false,

  // The editor group in which to open the math preview panel.
  //  - current: Use the current editor group
  //  - left: Put the math preview panel in a new group on the left of the current one
  //  - right: Put the math preview panel in a new group on the right of the current one
  //  - above: Put the math preview panel in a new group above the current one
  //  - below: Put the math preview panel in a new group below the current one
  "latex-workshop.mathpreviewpanel.editorGroup": "below",

  // Show badbox information in the problems panel.
  "latex-workshop.message.badbox.show": true,

  // Exclude biber log messages matching the given regexp from the problems panel.
  "latex-workshop.message.biberlog.exclude": [],

  // Exclude bibtex log messages matching the given regexp from the problems panel.
  "latex-workshop.message.bibtexlog.exclude": [],

  // Convert the encoding of filenames if necessary when displaying them in the problems panel.
  "latex-workshop.message.convertFilenameEncoding": true,

  // Display error messages in popup notifications.
  "latex-workshop.message.error.show": true,

  // Display information messages in popup notifications.
  "latex-workshop.message.information.show": false,

  // Exclude latex log messages matching the given regexp from the problems panel.
  "latex-workshop.message.latexlog.exclude": [],

  // Display LaTeX Workshop debug log in output panel. This property defines whether LaTeX Workshop will output its debug log to the log panel.
  "latex-workshop.message.log.show": true,

  // Display warning messages in popup notifications.
  "latex-workshop.message.warning.show": true,

  // Enable AST based smart selection. Command ids are `editor.action.smartSelect.expand` and `editor.action.smartSelect.shrink`.
  "latex-workshop.selection.smart.latex.enabled": true,

  // Enable the LaTeX contextual menu. This menu is deactivated as it is available through the new LaTeX badge. Just set this variable to `true` to recover the menu.
  "latex-workshop.showContextMenu": false,

  // Execute forward synctex at cursor position after compiling LaTeX project.
  "latex-workshop.synctex.afterBuild.enabled": false,

  // Define the visibility and style of SyncTeX indicator after a forward SyncTeX in the PDF viewer.
  //  - none: Hide the indicator.
  //  - circle: Indicates a possible location with a red circular SyncTeX indicator.
  //  - rectangle: Indicates the whole line selected in the TeX file with a red rectangular SyncTeX indicator. Only valid when SyncTeX binary is executable.
  "latex-workshop.synctex.indicator": "rectangle",

  // Define the location of SyncTeX executive file. Additional arguments, e.g., synctex modes and position of click, will be appended to this command.
  "latex-workshop.synctex.path": "synctex",

  // TeXCount arguments to count words in the LaTeX documents of the entire project from the root file, or the current document. Arguments must be in separate strings in the array. Additional arguments, i.e., `-merge %DOC%` for the project and the current document path for counting current file will be appended when constructing the command.
  "latex-workshop.texcount.args": [],

  // When to call `texcount`. Default is never.
  //  - onSave: Count words in the current document
  //  - never: Never automatically call texcount
  "latex-workshop.texcount.autorun": "never",

  // The minimal time interval between two consecutive runs of `texcount` in milliseconds when `latex-workshop.texcount.run` is set to `onSave`.
  "latex-workshop.texcount.interval": 1000,

  // Define the location of TeXCount executive file/script. This command will be joint with `latex-workshop.texcount.args` and required arguments to form a complete command of TeXCount.
  "latex-workshop.texcount.path": "texcount",

  // Texdoc arguments to see a package documentation. Arguments must be in separate strings in the array. The package name is automatically appended to the arguments.
  "latex-workshop.texdoc.args": ["--view"],

  // Define the location of the `texdoc` executable. This command is used to show a package documentation.
  "latex-workshop.texdoc.path": "texdoc",

  // Auto focus the LaTeX view when switching from non-tex to tex files. This will cause the view to appear consistently upon activating the extension.
  "latex-workshop.view.autoFocus.enabled": false,

  // The names of the commands to be shown in the outline/structure views. The commands must be called in the form `\commandname{arg}`.
  "latex-workshop.view.outline.commands": ["label"],

  // Show the float caption in the outline/structure views.
  "latex-workshop.view.outline.floats.caption.enabled": true,

  // Show the floating objects (figures and tables) in the outline/structure views.
  "latex-workshop.view.outline.floats.enabled": true,

  // Show the float number in the outline/structure views.
  "latex-workshop.view.outline.floats.number.enabled": true,

  // Whether scrolling the editor will also reveal corresponding structure items.
  "latex-workshop.view.outline.follow.editor": true,

  // Show the sectioning numbers in the outline/structure views.
  "latex-workshop.view.outline.numbers.enabled": true,

  // The section names of LaTeX outline hierarchy. It is also used by the folding mechanism. This property is an array of case-sensitive strings in the order of document structure hierarchy. For multiple tags in the same level, separate the tags with `|` as delimiters, e.g., `section|alternative`.
  "latex-workshop.view.outline.sections": ["part", "chapter", "section", "subsection", "subsubsection"],

  // Whether clicking on structure items will also call synctex to scroll the PDF viewer to the corresponding location.
  "latex-workshop.view.outline.sync.viewer": false,

  //  The background color of the viewer 1) in tab viewer when the vscode color theme is dark, and 2) in browser when the OS theme is dark. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.dark.backgroundColor": "#ffffff",

  //  The border color of the PDF pages 1) in tab viewer when the vscode color theme is dark, and 2) in browser when the OS theme is dark. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.dark.pageBorderColor": "lightgrey",

  //  The background color of the PDF document 1) in tab viewer when the vscode color theme is dark, and 2) in browser when the OS theme is dark. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.dark.pageColorsBackground": "",

  //  The foreground color of the PDF document 1) in tab viewer when the vscode color theme is dark, and 2) in browser when the OS theme is dark. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.dark.pageColorsForeground": "",

  //  The background color of the viewer 1) in tab viewer when the vscode color theme is light, and 2) in browser when the OS theme is light. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.light.backgroundColor": "#ffffff",

  //  The border color of the PDF pages 1) in tab viewer when the vscode color theme is light, and 2) in browser when the OS theme is light. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.light.pageBorderColor": "lightgrey",

  //  The background color of the PDF document 1) in tab viewer when the vscode color theme is light, and 2) in browser when the OS theme is light. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.light.pageColorsBackground": "",

  //  The foreground color of the PDF document 1) in tab viewer when the vscode color theme is light, and 2) in browser when the OS theme is light. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.light.pageColorsForeground": "",

  // The arguments for `latex-workshop.view.pdf.external.synctex.args` when forward synctex to external viewer. %LINE% is the line number, %PDF% is the placeholder for the absolute path to the generated PDF file, and %TEX% is the source LaTeX file path with `.tex` extension from which syncTeX is fired.
  "latex-workshop.view.pdf.external.synctex.args": ["%LINE%", "%PDF%", "%TEX%"],

  // The command to execute when forward synctex to external viewer. This function is not officially supported.
  "latex-workshop.view.pdf.external.synctex.command": "",

  // The arguments for `latex-workshop.view.pdf.external.viewer.command` when using external viewer. This function is not officially supported. %PDF% is the placeholder for the absolute path to the generated PDF file.
  "latex-workshop.view.pdf.external.viewer.args": ["%PDF%"],

  // The command to execute when using external viewer. This function is not officially supported.
  "latex-workshop.view.pdf.external.viewer.command": "",

  // Define if the hand tool is enabled by default in the PDF viewer.
  "latex-workshop.view.pdf.hand": false,

  //  Which keybinding to use for the internal viewer for reverse synctex. `ctrl`/`cmd` + click (default) or double click.
  "latex-workshop.view.pdf.internal.synctex.keybinding": "ctrl-click",

  //  Define the CSS invert filter level of the PDF viewer. This config can invert the color of PDF. Possible values are from 0 to 1.
  "latex-workshop.view.pdf.invert": 0,

  //  Define the CSS brightness filter level of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 2.
  "latex-workshop.view.pdf.invertMode.brightness": 1,

  // Enable the CSS invert filter.
  //  - auto: Enable the invert filter when using a dark theme.
  //  - always: Always enable invert filter.
  //  - compat: Enable the invert filter only if `invert > 0`.
  //  - never: Disable the invert filter
  "latex-workshop.view.pdf.invertMode.enabled": "compat",

  //  Define the CSS grayscale filter level of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 1.
  "latex-workshop.view.pdf.invertMode.grayscale": 0.6,

  //  Define the CSS hue-rotate filter angle of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 360.
  "latex-workshop.view.pdf.invertMode.hueRotate": 180,

  //  Define the CSS sepia filter level of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 1.
  "latex-workshop.view.pdf.invertMode.sepia": 0,

  // PDF viewer used for [View on PDF] link on \ref.
  "latex-workshop.view.pdf.ref.viewer": "auto",

  // The default scroll mode of the PDF viewer. This default value will be passed to the viewer upon opening. Possible values are `0` (vertical), `1`(horizontal), `2` (wrapped), `3` (page).
  "latex-workshop.view.pdf.scrollMode": 0,

  // The default spread mode of the PDF viewer. This default value will be passed to the viewer upon opening. Possible values are `0` (none), `1` (odd) and `2` (even).
  "latex-workshop.view.pdf.spreadMode": 0,

  // The editor group in which to open the tab viewer.
  //  - current: Use the current editor group
  //  - left: Put the viewer tab in a new group on the left of the current one
  //  - right: Put the viewer tab in a new group on the right of the current one
  //  - above: Put the viewer tab in a new group above the current one
  //  - below: Put the viewer tab in a new group below the current one
  "latex-workshop.view.pdf.tab.editorGroup": "right",

  // The default trim percentage of the PDF viewer. This should be an integer between 0 and 99, indicating the portion of PDF to be trimmed. For example, setting the value to `10` means that 10% of the height and width of PDF pages are trimmed off.
  "latex-workshop.view.pdf.trim": 0,

  // The default PDF viewer.
  //  - browser: Open PDF with the default web browser.
  //  - tab: Open PDF with the built-in tab viewer.
  //  - external: [Experimental] Open PDF with the external viewer set in "View > Pdf > External: command".
  //  - legacy: [Legacy] Open PDF with the built-in tab viewer with vscode WebView API.
  //  - singleton: [Legacy] Open PDF with the built-in tab viewer with vscode WebView API, reveal existing one if possible.
  "latex-workshop.view.pdf.viewer": "tab",

  // The default zoom level of the PDF viewer. This default value will be passed to the viewer upon opening. Possible values are `auto`, `page-actual`, `page-fit`, `page-width`, and one-based scale values (e.g., 0.5 for 50%, 2.0 for 200%).
  "latex-workshop.view.pdf.zoom": "auto",

  // Rebroadcasting KeyboardEvent on the internal viewers. If keyboard shortcuts on the internal viewer do not work well, change this setting.
  "latex-workshop.viewer.pdf.internal.keyboardEvent": "auto",

  // Define the port to listen on for communicating with the internal viewer. The default value "0" means the port is chosen randomly by the application. If this config is set, only one Visual Studio Code instance with this extension active can be opened. Otherwise, a port conflict may happen.
  "latex-workshop.viewer.pdf.internal.port": 0,

  // When creating a hanging indent, do not put the closing bracket on its own line.
  "pythonIndent.keepHangingBracketOnLine": false,

  // Trims lines that contain only whitespace after pressing Enter on them.
  "pythonIndent.trimLinesWithOnlyWhitespace": false,

  // After creating a hanging indent, press tab to leave the indented section and go to the ending bracket.
  "pythonIndent.useTabOnHangingIndent": false,

  // The default color to be used in svg previews
  "gutterpreview.currentColorForSVG": "white",

  // A flag which indicates whether resources should be resolved from references
  "gutterpreview.enableReferenceLookup": false,

  // The maximum height of the image preview
  "gutterpreview.imagePreviewMaxHeight": "100",

  // The maximum width of the image preview, if configured to > 0, it is used instead of the max height setting
  "gutterpreview.imagePreviewMaxWidth": "-1",

  // Specify path mapping to be computed relative to project root.
  "gutterpreview.paths": {},

  // A flag which indicates whether the image preview should be shown on the gutter
  "gutterpreview.showImagePreviewOnGutter": true,

  // A flag which indicates whether to underline recognized URLs
  "gutterpreview.showUnderline": true,

  // Additional folder to consider when resolving relative urls
  "gutterpreview.sourceFolder": "src",

  // Sometimes image URLs without extensions (such as `https://example.com/pic/640?fmt=jpeg`) are not detected. You can now specify regular expressions to detect these URLs. configured values (such as `/^http(s)*://example.com/pic/i`) will be parsed using [regex-parser](https://github.com/IonicaBizau/regex-parser.js) and ignored if they are illegal regular expression strings.
  "gutterpreview.urlDetectionPatterns": [],

  // Column limit for a given line.
  //
  // A column limit of `0` means that there is no column limit. This is overriden if a configuration file is found in some parent of the file.
  "latex.formatter.columnLimit": 80,

  // Absolute/relative path to the configuration file for the formatter. Must end in `.yaml`. Default behavior is to search the directory (or parents) of the file (or the workspace) till a configuration is found. See the extension's description.
  "latex.formatter.config": "",

  // Absolute/relative path to the formatter executable. Default behavior is to find the system's executable if it exists.
  "latex.formatter.path": "",

  // Amount of time (in ms) to wait for the formatter to finish.
  "latex.formatter.timeout": 10000,

  // Absolute/relative path to the configuration file for the linter. Default behavior is to search the directory (or parents) of the file (or the workspace) till a configuration is found. See the extension's description.
  "latex.linter.config": "",

  // Duration (in ms) to delay linting during contiguous typing.
  "latex.linter.delay": 1000,

  // Enables the linter.
  "latex.linter.enabled": true,

  // Absolute/relative path to the linter executable. Default behavior is to find the system's executable if it exists.
  "latex.linter.path": "",

  // Amount of time (in ms) to wait for the linter to finish.
  "latex.linter.timeout": 10000,

  // If enabled, aligned content is copied to a new scratch file to keep the original file without modifications (unless the original is itself an untitled scratch document).
  "rainbow_csv.align_in_scratch_file": false,

  // Enable automatic content-based separator autodetection for the specified list of separators (multicharacter separators are supported).
  "rainbow_csv.autodetect_separators": ["TAB", ",", ";", "|"],

  // Minimum number of non-comment lines in file for content-based autodetection.
  "rainbow_csv.autodetection_min_line_count": 10,

  // Comment lines prefix, e.g. "#". Set to empty string to disable.
  "rainbow_csv.comment_prefix": "",

  // CSV Lint: detect leading and trailing whitespaces in fields and show warning.
  "rainbow_csv.csv_lint_detect_trailing_spaces": false,

  // If enabled treat double width unicode chars e.g. Chinese or Japanese chars as double wide when aligning.
  "rainbow_csv.double_width_alignment": true,

  // Automatically run linter for every CSV file.
  "rainbow_csv.enable_auto_csv_lint": true,

  // Enable "Preview CSV head" option in File Explorer context menu for all files.
  "rainbow_csv.enable_context_menu_head": false,

  // Enable "Preview CSV tail" option in File Explorer context menu for all files.
  "rainbow_csv.enable_context_menu_tail": false,

  // Keyboard input text cursor: show info about the cursor CSV column in the status bar.
  "rainbow_csv.enable_cursor_position_info": true,

  // Dev Mode: Enable Debug Logging. Run command [Developer: Show Logs...] -> [rainbow_csv_debug_channel] to see the output.
  "rainbow_csv.enable_debug_logging": false,

  // Enable automatic content based separator autodetection.
  "rainbow_csv.enable_separator_autodetection": true,

  // Enable sticky header line at the top.
  "rainbow_csv.enable_sticky_header": true,

  // Enable column-info tooltip on hover.
  "rainbow_csv.enable_tooltip": true,

  // Show column names in tooltip.
  "rainbow_csv.enable_tooltip_column_names": true,

  // Output directory for RBQL result sets, can be `TMP`, `INPUT` or a custom absolute path. `TMP` - output in system tmp dir(default), `INPUT` - output in the same dir as input file, otherwise use provided path as the output directory e.g. `/path/to/custom/dir`.
  "rainbow_csv.rbql_output_dir": "TMP",

  // RBQL treats the first line as header by default.
  "rainbow_csv.rbql_with_headers_by_default": false,

  // Depreciated: This setting has been renamed to `git-graph.commitDetailsView.autoCenter`
  // Automatically center the commit details view when it is opened.
  "git-graph.autoCenterCommitDetailsView": true,

  // Depreciated: This setting has been renamed to `git-graph.referenceLabels.combineLocalAndRemoteBranchLabels`
  // Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
  "git-graph.combineLocalAndRemoteBranchLabels": true,

  // Automatically center the Commit Details View when it is opened.
  "git-graph.commitDetailsView.autoCenter": true,

  // Render the File Tree in the Commit Details View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
  "git-graph.commitDetailsView.fileView.fileTree.compactFolders": true,

  // Sets the default type of File View used in the Commit Details View. This can be overridden per repository using the controls on the right side of the Commit Details View.
  //  - File Tree: Display files in a tree structure.
  //  - File List: Display files in a list (useful for repositories with deep folder structures).
  "git-graph.commitDetailsView.fileView.type": "File Tree",

  // Specifies where the Commit Details View is rendered in the Git Graph View.
  //  - Inline: Show the Commit Details View inline with the graph & commits.
  //  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph View.
  "git-graph.commitDetailsView.location": "Inline",

  // Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.fileTree.compactFolders`
  // Render the File Tree in the Commit Details / Comparison View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
  "git-graph.commitDetailsViewFileTreeCompactFolders": true,

  // Depreciated: This setting has been renamed to `git-graph.commitDetailsView.location`
  // Specifies where the Commit Details View is rendered in the Git Graph view.
  //  - Inline: Show the Commit Details View inline with the graph
  //  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph view
  "git-graph.commitDetailsViewLocation": "Inline",

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.order`
  // Specifies the order of commits on the Git Graph view. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option.
  //  - date: Show commits in the commit timestamp order.
  //  - author-date: Show commits in the author timestamp order.
  //  - topo: Avoid showing commits on multiple lines of history intermixed.
  "git-graph.commitOrdering": "date",

  // Customise which context menu actions are visible. For example, if you want to hide the rebase action from the branch context menu, a suitable value for this setting is `{ "branch": { "rebase": false } }`. For more information of how to configure this setting, view the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Extension-Settings#context-menu-actions-visibility).
  "git-graph.contextMenuActionsVisibility": {},

  // An array of Custom Branch Glob Patterns to be shown in the 'Branches' dropdown. Example: [{"name": "Feature Requests", "glob": "heads/feature/*"}]
  "git-graph.customBranchGlobPatterns": [],

  // An array of custom Emoji Shortcode mappings. Example: [{"shortcode": ":sparkles:", "emoji":"✨"}]
  "git-graph.customEmojiShortcodeMappings": [],

  // An array of custom Pull Request providers that can be used in the "Pull Request Creation" Integration. For information on how to configure this setting, see the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Configuring-a-custom-Pull-Request-Provider).
  "git-graph.customPullRequestProviders": [],

  // Specifies the date format to be used in the "Date" column on the Git Graph View.
  //  - Date & Time: Show the date and time (e.g. "24 Mar 2019 21:34")
  //  - Date Only: Show the date only (e.g. "24 Mar 2019")
  //  - ISO Date & Time: Show the ISO date and time (e.g. "2019-03-24 21:34")
  //  - ISO Date Only: Show the ISO date only (e.g. "2019-03-24")
  //  - Relative: Show relative times (e.g. "5 minutes ago")
  "git-graph.date.format": "Date & Time",

  // Specifies the date type to be displayed in the "Date" column on the Git Graph View.
  //  - Author Date: Use the author date of a commit.
  //  - Commit Date: Use the committer date of a commit.
  "git-graph.date.type": "Author Date",

  // Depreciated: This setting has been renamed to `git-graph.date.format`
  // Specifies the date format to be used in the "Date" column on the Git Graph View.
  //  - Date & Time: Show the date and time, for example "24 Mar 2019 21:34"
  //  - Date Only: Show the date only, for example "24 Mar 2019"
  //  - ISO Date & Time: Show the ISO date and time, for example "2019-03-24 21:34"
  //  - ISO Date Only: Show the ISO date only, for example "2019-03-24"
  //  - Relative: Show relative times, for example "5 minutes ago"
  "git-graph.dateFormat": "Date & Time",

  // Depreciated: This setting has been renamed to `git-graph.date.type`
  // Specifies the date type to be displayed in the "Date" column on the Git Graph View.
  //  - Author Date: Use the author date of a commit
  //  - Commit Date: Use the committer date of a commit
  "git-graph.dateType": "Author Date",

  // An object specifying the default visibility of the Date, Author & Commit columns. Example: {"Date": true, "Author": true, "Commit": true}
  "git-graph.defaultColumnVisibility": {
    "Date": true,
    "Author": true,
    "Commit": true
  },

  // Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.type`
  // Sets the default type of File View used in the Commit Details / Comparison Views. This can be overridden per repository using the controls on the right side of the Commit Details / Comparison Views.
  //  - File Tree: Display files in a tree structure
  //  - File List: Display files in a list (useful for repositories with deep folder structures)
  "git-graph.defaultFileViewType": "File Tree",

  // Default state of the field indicating whether the tag should be pushed to a remote once it is added.
  "git-graph.dialog.addTag.pushToRemote": false,

  // Default type of the tag being added.
  "git-graph.dialog.addTag.type": "Annotated",

  // Default state of the "Reinstate Index" checkbox.
  "git-graph.dialog.applyStash.reinstateIndex": false,

  // Default state of the "No Commit" checkbox.
  "git-graph.dialog.cherryPick.noCommit": false,

  // Default state of the "Record Origin" checkbox.
  "git-graph.dialog.cherryPick.recordOrigin": false,

  // Default state of the "Check out" checkbox.
  "git-graph.dialog.createBranch.checkOut": false,

  // Default state of the "Force Delete" checkbox.
  "git-graph.dialog.deleteBranch.forceDelete": false,

  // Default state of the "Force Fetch" checkbox.
  "git-graph.dialog.fetchIntoLocalBranch.forceFetch": false,

  // Default state of the "Prune" checkbox.
  "git-graph.dialog.fetchRemote.prune": false,

  // Default state of the "Prune Tags" checkbox.
  "git-graph.dialog.fetchRemote.pruneTags": false,

  // Specifies a substitution that is automatically performed when space characters are entered or pasted into reference inputs on dialogs (e.g. Create Branch, Add Tag, etc.).
  //  - None: Don't replace spaces.
  //  - Hyphen: Replace space characters with hyphens, for example: "new branch" -> "new-branch".
  //  - Underscore: Replace space characters with underscores, for example: "new branch" -> "new_branch".
  "git-graph.dialog.general.referenceInputSpaceSubstitution": "None",

  // Default state of the "No Commit" checkbox.
  "git-graph.dialog.merge.noCommit": false,

  // Default state of the "Create a new commit even if fast-forward is possible" checkbox.
  "git-graph.dialog.merge.noFastForward": true,

  // Default state of the "Squash Commits" checkbox.
  "git-graph.dialog.merge.squashCommits": false,

  // Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
  //  - Default: Use the squash message generated by Git Graph.
  //  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
  "git-graph.dialog.merge.squashMessageFormat": "Default",

  // Default state of the "Reinstate Index" checkbox.
  "git-graph.dialog.popStash.reinstateIndex": false,

  // Default state of the "Create a new commit even if fast-forward is possible" checkbox.
  "git-graph.dialog.pullBranch.noFastForward": false,

  // Default state of the "Squash Commits" checkbox.
  "git-graph.dialog.pullBranch.squashCommits": false,

  // Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
  //  - Default: Use the squash message generated by Git Graph.
  //  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
  "git-graph.dialog.pullBranch.squashMessageFormat": "Default",

  // Default state of the "Ignore Date (non-interactive rebase only)" checkbox.
  "git-graph.dialog.rebase.ignoreDate": true,

  // Default state of the "Launch Interactive Rebase in new Terminal" checkbox.
  "git-graph.dialog.rebase.launchInteractiveRebase": false,

  // Default mode to be used for the reset action.
  //  - Soft: Soft - Keep all changes, but reset head
  //  - Mixed: Mixed - Keep working tree, but reset index
  //  - Hard: Hard - Discard all changes
  "git-graph.dialog.resetCurrentBranchToCommit.mode": "Mixed",

  // Default mode to be used for the reset action.
  //  - Mixed: Mixed - Keep working tree, but reset index
  //  - Hard: Hard - Discard all changes
  "git-graph.dialog.resetUncommittedChanges.mode": "Mixed",

  // Default state of the "Include Untracked" checkbox.
  "git-graph.dialog.stashUncommittedChanges.includeUntracked": true,

  // Visual file change A|M|D|R|U indicators in the Commit Details View for users with colour blindness. In the future, this setting will enable any additional accessibility related features of Git Graph that aren't enabled by default.
  "git-graph.enhancedAccessibility": false,

  // Depreciated: This setting has been renamed to `git-graph.repository.fetchAndPrune`
  // Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
  "git-graph.fetchAndPrune": false,

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.fetchAvatars`
  // Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
  "git-graph.fetchAvatars": false,

  // The character set encoding used when retrieving a specific version of repository files (e.g. in the Diff View). A list of all supported encodings can be found [here](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).
  "git-graph.fileEncoding": "utf8",

  // Specifies the colours used on the graph.
  "git-graph.graph.colours": [
    "#0085d9",
    "#d9008f",
    "#00d90a",
    "#d98500",
    "#a300d9",
    "#ff0000",
    "#00d9cc",
    "#e138e8",
    "#85d900",
    "#dc5b23",
    "#6f24d6",
    "#ffcc00"
  ],

  // Specifies the style of the graph.
  //  - rounded: Use smooth curves when transitioning between branches on the graph.
  //  - angular: Use angular lines when transitioning between branches on the graph.
  "git-graph.graph.style": "rounded",

  // Specifies how the Uncommitted Changes are displayed on the graph.
  //  - Open Circle at the Uncommitted Changes: Display the Uncommitted Changes as a grey open circle, connected to the commit referenced by HEAD with a solid grey line. The current file system's state is therefore always displayed as an open circle.
  //  - Open Circle at the Checked Out Commit: Display the Uncommitted Changes as a grey closed circle, connected to the commit referenced by HEAD with a dotted grey line. The commit referenced by HEAD is therefore always displayed as an open circle.
  "git-graph.graph.uncommittedChanges": "Open Circle at the Uncommitted Changes",

  // Depreciated: This setting has been renamed to `git-graph.graph.colours`
  // Specifies the colours used on the graph.
  "git-graph.graphColours": [
    "#0085d9",
    "#d9008f",
    "#00d90a",
    "#d98500",
    "#a300d9",
    "#ff0000",
    "#00d9cc",
    "#e138e8",
    "#85d900",
    "#dc5b23",
    "#6f24d6",
    "#ffcc00"
  ],

  // Depreciated: This setting has been renamed to `git-graph.graph.style`
  // Specifies the style of the graph.
  //  - rounded: Use smooth curves when transitioning between branches on the graph
  //  - angular: Use angular lines when transitioning between branches on the graph
  "git-graph.graphStyle": "rounded",

  // Depreciated: This setting has been renamed to `git-graph.repository.includeCommitsMentionedByReflogs`
  // Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
  "git-graph.includeCommitsMentionedByReflogs": false,

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.initialLoad`
  // Specifies the number of commits to initially load.
  "git-graph.initialLoadCommits": 300,

  // Specifies the path and filename of the Shell executable to be used by the Visual Studio Code Integrated Terminal, when it is opened by Git Graph. For example, to use Git Bash on Windows this setting would commonly be set to "C:\Program Files\Git\bin\bash.exe". If this setting is left blank, the default Shell is used.
  "git-graph.integratedTerminalShell": "",

  // The keybinding for the keyboard shortcut that opens the Find Widget in the Git Graph View.
  "git-graph.keyboardShortcut.find": "CTRL/CMD + F",

  // The keybinding for the keyboard shortcut that refreshes the Git Graph View.
  "git-graph.keyboardShortcut.refresh": "CTRL/CMD + R",

  // The keybinding for the keyboard shortcut that scrolls the Git Graph View to be centered on the commit referenced by HEAD.
  "git-graph.keyboardShortcut.scrollToHead": "CTRL/CMD + H",

  // The keybinding for the keyboard shortcut that scrolls the Git Graph View to the first (or next) stash in the loaded commits. The Shift Key Modifier can be applied to this keybinding to scroll the Git Graph View to the last (or previous) stash in the loaded commits.
  "git-graph.keyboardShortcut.scrollToStash": "CTRL/CMD + S",

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMore`
  // Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
  "git-graph.loadMoreCommits": 100,

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMoreAutomatically`
  // When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
  "git-graph.loadMoreCommitsAutomatically": true,

  // Parse and render a frequently used subset of inline Markdown formatting rules in commit messages and tag details (bold, italics, bold & italics, and inline code blocks).
  "git-graph.markdown": true,

  // Specifies the maximum depth of subfolders to search when discovering repositories in the workspace. Note: Sub-repos are not automatically detected when searching subfolders, however they can be manually added by running the command "Git Graph: Add Git Repository" in the Command Palette.
  "git-graph.maxDepthOfRepoSearch": 0,

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead`
  // Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
  "git-graph.muteCommitsThatAreNotAncestorsOfHead": false,

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.mergeCommits`
  // Display merge commits with a muted text color.
  "git-graph.muteMergeCommits": true,

  // Depreciated: This setting has been renamed to `git-graph.repository.onlyFollowFirstParent`
  // Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting.
  "git-graph.onlyFollowFirstParent": false,

  // Depreciated: This setting has been renamed to `git-graph.openNewTabEditorGroup`
  // Specifies which Editor Group the Visual Studio Code Diff View is opened in.
  //  - Active: Open the Visual Studio Code Diff View in the Active Editor Group.
  //  - Beside: Open the Visual Studio Code Diff View beside the Active Editor Group.
  //  - One: Open the Visual Studio Code Diff View in the First Editor Group.
  //  - Two: Open the Visual Studio Code Diff View in the Second Editor Group.
  //  - Three: Open the Visual Studio Code Diff View in the Third Editor Group.
  //  - Four: Open the Visual Studio Code Diff View in the Fourth Editor Group.
  //  - Five: Open the Visual Studio Code Diff View in the Fifth Editor Group.
  //  - Six: Open the Visual Studio Code Diff View in the Sixth Editor Group.
  //  - Seven: Open the Visual Studio Code Diff View in the Seventh Editor Group.
  //  - Eight: Open the Visual Studio Code Diff View in the Eighth Editor Group.
  //  - Nine: Open the Visual Studio Code Diff View in the Ninth Editor Group.
  "git-graph.openDiffTabLocation": "Active",

  // Specifies the Editor Group where Git Graph should open new tabs, when performing the following actions from the Git Graph View: Viewing the Visual Studio Code Diff View, Opening a File, Viewing a File at a Specific Revision.
  //  - Active: Open the new tab in the Active Editor Group.
  //  - Beside: Open the new tab beside the Active Editor Group.
  //  - One: Open the new tab in the First Editor Group.
  //  - Two: Open the new tab in the Second Editor Group.
  //  - Three: Open the new tab in the Third Editor Group.
  //  - Four: Open the new tab in the Fourth Editor Group.
  //  - Five: Open the new tab in the Fifth Editor Group.
  //  - Six: Open the new tab in the Sixth Editor Group.
  //  - Seven: Open the new tab in the Seventh Editor Group.
  //  - Eight: Open the new tab in the Eighth Editor Group.
  //  - Nine: Open the new tab in the Ninth Editor Group.
  "git-graph.openNewTabEditorGroup": "Active",

  // Depreciated: This setting has been renamed to `git-graph.repository.onLoad.scrollToHead`
  // When opening or switching repositories in the Git Graph View, automatically scroll the view to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
  "git-graph.openRepoToHead": false,

  // Open the Git Graph View to the repository containing the active Text Editor document.
  "git-graph.openToTheRepoOfTheActiveTextEditorDocument": false,

  // Depreciated: This setting has been renamed to `git-graph.referenceLabels.alignment`
  // Specifies how branch and tag reference labels are aligned for each commit.
  //  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
  //  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
  //  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
  "git-graph.referenceLabelAlignment": "Normal",

  // Specifies how branch and tag reference labels are aligned for each commit.
  //  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
  //  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
  //  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
  "git-graph.referenceLabels.alignment": "Normal",

  // Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
  "git-graph.referenceLabels.combineLocalAndRemoteBranchLabels": true,

  // Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
  "git-graph.repository.commits.fetchAvatars": false,

  // Specifies the number of commits to initially load.
  "git-graph.repository.commits.initialLoad": 300,

  // Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
  "git-graph.repository.commits.loadMore": 100,

  // When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
  "git-graph.repository.commits.loadMoreAutomatically": true,

  // Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
  "git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead": false,

  // Display merge commits with a muted text color.
  "git-graph.repository.commits.mute.mergeCommits": true,

  // Specifies the order of commits on the Git Graph View. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option. This can be overridden per repository via the Git Graph View's Column Header Context Menu.
  //  - date: Show commits in the commit timestamp order.
  //  - author-date: Show commits in the author timestamp order.
  //  - topo: Avoid showing commits on multiple lines of history intermixed.
  "git-graph.repository.commits.order": "date",

  // Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
  "git-graph.repository.commits.showSignatureStatus": false,

  // Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
  "git-graph.repository.fetchAndPrune": false,

  // Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any local tags that no longer exist on the remote(s). Requires Git >= 2.17.0, and the "Repository: Fetch And Prune" setting to be enabled. Caution: If you work in repositories that have multiple remotes, it is not recommended to use this setting (instead you can prune tags for a specific remote via "Fetch Remote" Dialog from the Repository Settings Widget on the Git Graph View).
  "git-graph.repository.fetchAndPruneTags": false,

  // Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
  "git-graph.repository.includeCommitsMentionedByReflogs": false,

  // Automatically scroll the Git Graph View to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
  "git-graph.repository.onLoad.scrollToHead": false,

  // Show the checked out branch when a repository is loaded in the Git Graph View. This setting can be used in conjunction with "Repository > On Load: Show Specific Branches". Default: false (show all branches)
  "git-graph.repository.onLoad.showCheckedOutBranch": false,

  // Show specific branches when a repository is loaded in the Git Graph View. Branches can be specified as follows: A local branch name (e.g. `master`), a remote-tracking branch name prefixed with "remotes/" (e.g. `remotes/origin/master`), or a glob pattern defined in `git-graph.customBranchGlobPatterns` prefixed with "--glob=" (e.g. `--glob=heads/feature/*`). This setting can be used in conjunction with "Repository > On Load: Show Checked Out Branch". Default: [] (show all branches)
  "git-graph.repository.onLoad.showSpecificBranches": [],

  // Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
  "git-graph.repository.onlyFollowFirstParent": false,

  // Show Commits that are only referenced by tags in Git Graph.
  "git-graph.repository.showCommitsOnlyReferencedByTags": true,

  // Show Remote Branches in Git Graph by default. This can be overridden per repository from the Git Graph View's Control Bar.
  "git-graph.repository.showRemoteBranches": true,

  // Show Remote HEAD Symbolic References in Git Graph (e.g. "origin/HEAD").
  "git-graph.repository.showRemoteHeads": true,

  // Show Stashes in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
  "git-graph.repository.showStashes": true,

  // Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
  "git-graph.repository.showTags": true,

  // Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
  "git-graph.repository.showUncommittedChanges": true,

  // Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
  "git-graph.repository.showUntrackedFiles": true,

  // Enables commit signing with GPG or X.509.
  "git-graph.repository.sign.commits": false,

  // Enables tag signing with GPG or X.509.
  "git-graph.repository.sign.tags": false,

  // Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
  "git-graph.repository.useMailmap": false,

  // Specifies the order that repositories are sorted in the repository dropdown on the Git Graph View (only visible when more than one repository exists in the current Visual Studio Code Workspace).
  //  - Full Path: Sort repositories alphabetically by the full path of the repository.
  //  - Name: Sort repositories alphabetically by the name of the repository.
  //  - Workspace Full Path: Sort repositories according to the Visual Studio Code Workspace Folder order, then alphabetically by the full path of the repository.
  "git-graph.repositoryDropdownOrder": "Workspace Full Path",

  // Specifies if the Git Graph View's Visual Studio Code context is kept when the panel is no longer visible (e.g. moved to background tab). Enabling this setting will make Git Graph load significantly faster when switching back to the Git Graph tab, however has a higher memory overhead.
  "git-graph.retainContextWhenHidden": true,

  // Depreciated: This setting has been renamed to `git-graph.repository.showCommitsOnlyReferencedByTags`
  // Show commits that are only referenced by tags in Git Graph.
  "git-graph.showCommitsOnlyReferencedByTags": true,

  // Depreciated: This setting has been renamed to `git-graph.repository.onLoad.showCheckedOutBranch`
  // Show the current branch by default when Git Graph is opened. Default: false (show all branches)
  "git-graph.showCurrentBranchByDefault": false,

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.showSignatureStatus`
  // Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
  "git-graph.showSignatureStatus": false,

  // Show a Status Bar Item that opens the Git Graph View when clicked.
  "git-graph.showStatusBarItem": true,

  // Depreciated: This setting has been renamed to `git-graph.repository.showTags`
  // Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
  "git-graph.showTags": true,

  // Depreciated: This setting has been renamed to `git-graph.repository.showUncommittedChanges`
  // Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
  "git-graph.showUncommittedChanges": true,

  // Depreciated: This setting has been renamed to `git-graph.repository.showUntrackedFiles`
  // Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
  "git-graph.showUntrackedFiles": true,

  // Specifies where the "View Git Graph" action appears on the title of SCM Providers.
  //  - Inline: Show the 'View Git Graph' action on the title of SCM Providers
  //  - More Actions: Show the 'View Git Graph' action in the 'More Actions...' menu on the title of SCM Providers
  "git-graph.sourceCodeProviderIntegrationLocation": "Inline",

  // Specifies the colour theme of the icon displayed on the Git Graph tab.
  //  - colour: Show a colour icon which suits most Visual Studio Code colour themes
  //  - grey: Show a grey icon which suits Visual Studio Code colour themes that are predominantly grayscale
  "git-graph.tabIconColourTheme": "colour",

  // Depreciated: This setting has been renamed to `git-graph.repository.useMailmap`
  // Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
  "git-graph.useMailmap": false,

  // Highest number of labels displayed on a transition in an ATN graph
  "antlr4.atn.maxLabelCount": 3,

  // Default export target folder for ATN SVG files
  "antlr4.atn.saveDir": "",

  // Default export target folder for call graphs
  "antlr4.call-graph.saveDir": "",

  // List of custom CSS file names for diagram SVG files
  "antlr4.customCSS": [],

  // Debugging related settings
  "antlr4.debug": {
    "visualParseTreeHorizontal": true,
    "visualParseTreeClustered": false
  },

  // Settings related to code formatting
  "antlr4.format": {
    "alignTrailingComments": false,
    "allowShortBlocksOnASingleLine": true,
    "breakBeforeBraces": false,
    "columnLimit": 100,
    "continuationIndentWidth": 4,
    "indentWidth": 4,
    "keepEmptyLinesAtTheStartOfBlocks": false,
    "maxEmptyLinesToKeep": 1,
    "reflowComments": true,
    "spaceBeforeAssignmentOperators": true,
    "tabWidth": 4,
    "useTab": true,
    "alignColons": "none",
    "singleLineOverrulesHangingColon": true,
    "allowShortRulesOnASingleLine": true,
    "alignSemicolons": "none",
    "breakBeforeParens": false,
    "ruleInternalsOnSingleLine": false,
    "minEmptyLines": 0,
    "groupedAlignments": true,
    "alignFirstTokens": false,
    "alignLexerCommands": false,
    "alignActions": false,
    "alignLabels": true,
    "alignTrailers": false
  },

  // Settings related to parser generation
  "antlr4.generation": {
    "mode": "internal",
    "listeners": true,
    "visitors": false
  },

  // Determines the level of logging
  //  - none: No logging
  //  - debug: Log debug messages
  "antlr4.log": "none",

  // Enable/disable the references code lens
  "antlr4.referencesCodeLens.enabled": false,

  // Default export target folder for railroad diagrams
  "antlr4.rrd.saveDir": "",

  // Regular expression that is matched against rules names, to filter out parts of the name that should not be shown in the diagram
  "antlr4.rrd.stripNamePart": "",

  // If > 0, element sequences (the visual expression of a single alternative) are wrapped when the number of characters in all rendered elements exceeds this value. Since rendering also depends on other graphical details, total line lengths may still vary a bit.
  "antlr4.rrd.wrapAfter": 0,

  // Print debug messages? Default false.
  "latexPreview.debugMode": false,

  // Display device resolution in pixels per inch. Default 96.
  "latexPreview.dpi": 96,

  // Path to the LaTeX font directory.
  "latexPreview.latexFontDir": "",

  // Document magnification(%). Default 100.
  "latexPreview.mag": 100,

  // Number of pages to pre-render. Default 2.
  "latexPreview.pageBufferSize": 2,

  // Render pages separated by this number of pixels. Default 0.
  "latexPreview.pageGap": 0,

  // Page Size
  "latexPreview.pageSize": "A4",

  // Enable sending error and usage events to help improve the software.
  "latexPreview.telemetry": false,

  // Specify a shell command that is run to start the browser for authenticating with the OIDC identity provider for the server connection. Leave this empty for default browser.
  "mdb.browserCommandForOIDCAuth": "",

  // Show a confirmation message before deleting a document from the tree view.
  "mdb.confirmDeleteDocument": true,

  // Show a confirmation message before running commands in a playground.
  "mdb.confirmRunAll": true,

  // When the setting that hides the option to choose where to save new connections is checked, this setting sets if and where new connections are saved.
  //  - Global: Save new connections globally on vscode.
  //  - Workspace: Save new connections to the active workspace.
  //  - Session Only: Don't save new connections (connections are lost when the session is closed).
  "mdb.connectionSaving.defaultConnectionSavingLocation": "Global",

  // The number of documents to fetch when viewing documents from a collection.
  "mdb.defaultLimit": 10,

  // Files and folders to exclude while searching for playgrounds in the current workspace.
  "mdb.excludeFromPlaygroundsSearch": [
    "**/.*",
    "**/_output/**",
    "**/bower_components/**",
    "**/build/**",
    "**/dist/**",
    "**/node_modules/**",
    "**/out/**",
    "**/output/**",
    "**/release/**",
    "**/releases/**",
    "**/static/**",
    "**/target/**",
    "**/third_party/**",
    "**/vendor/**"
  ],

  // Remain logged in when using the MONGODB-OIDC authentication mechanism for MongoDB server connection. Access tokens are encrypted using the system keychain before being stored.
  "mdb.persistOIDCTokens": true,

  // Allow the collection of anonymous diagnostic and usage telemetry data to help improve the product.
  "mdb.sendTelemetry": true,

  // The MongoDB shell to use.
  //  - mongosh: Use the new mongosh
  //  - mongo: Use the legacy mongo shell
  "mdb.shell": "mongosh",

  // Show or hide the MongoDB connections view.
  "mdb.showMongoDBConnectionExplorer": true,

  // Show or hide the help and feedback view.
  "mdb.showMongoDBHelpExplorer": true,

  // Show or hide the MongoDB playgrounds view.
  "mdb.showMongoDBPlaygrounds": true,

  // Show a checkbox on the connection form to enable device auth flow authentication for MongoDB server OIDC Authentication. This enables a less secure authentication flow that can be used as a fallback when browser-based authentication is unavailable.
  "mdb.showOIDCDeviceAuthFlow": false,

  // The default behavior is to generate a single ObjectId and insert it on all cursors. Set to true to generate a unique ObjectId per cursor instead.
  "mdb.uniqueObjectIdPerCursor": false,

  // Use default template for playground files.
  "mdb.useDefaultTemplateForPlayground": true,

  // Controls the maximum number of problems produced by the server.
  "mongodbLanguageServer.maxNumberOfProblems": 100,

  //
  "mongodbLanguageServer.trace.server": {},

  // The port that SCSS IntelliSense server listens to. Can be used for attaching to the server Node process for debugging / profiling.
  "scss.dev.serverPort": -1,

  // The text of a label that the file imported implicitly. If `null` then label not displayed.
  "scss.implicitlyLabel": "(implicitly)",

  // Allows scan imported files.
  "scss.scanImportedFiles": true,

  // The maximum number of nested directories to scan.
  "scss.scannerDepth": 30,

  // List of glob patterns for directories that are excluded when scanning.
  "scss.scannerExclude": ["**/.git", "**/node_modules", "**/bower_components"],

  // Allows to display errors.
  "scss.showErrors": false,

  // Allows prompt Functions.
  "scss.suggestFunctions": true,

  // Allows prompt Functions in String context after specified symbols.
  "scss.suggestFunctionsInStringContextAfterSymbols": " (+-*%",

  // Allows prompt Mixins.
  "scss.suggestMixins": true,

  // Allows prompt Variables.
  "scss.suggestVariables": true,

  // When debugging only step through user-written code. Disable this to allow stepping into library code.
  "debugpy.debugJustMyCode": true,

  // Path to the State Tool executable for ActiveState runtimes (version 0.36+).
  "python.activeStateToolPath": "state",

  // List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
  "python.autoComplete.extraPaths": [],

  // Path to the conda executable to use for activation (version 4.4+).
  "python.condaPath": "",

  // Show or hide Create Environment button in the editor for `requirements.txt` or other dependency files.
  "python.createEnvironment.contentButton": "hide",

  // Detect if environment creation is required for the current project
  "python.createEnvironment.trigger": "prompt",

  // Path to default Python to use when extension loads up for the first time, no longer used once an interpreter is selected for the workspace. See [here](https://aka.ms/AAfekmf) to understand when this is used
  "python.defaultInterpreterPath": "python",

  // Enable source map support for meaningful stack traces in error logs.
  "python.diagnostics.sourceMapsEnabled": false,

  // Absolute path to a file containing environment variable definitions.
  "python.envFile": "${workspaceFolder}/.env",

  // Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.
  "python.experiments.enabled": true,

  // List of experiment to opt into. If empty, user is assigned the default experiment groups. See [here](https://github.com/microsoft/vscode-python/wiki/AB-Experiments) for more details.
  "python.experiments.optInto": [],

  // List of experiment to opt out of. If empty, user is assigned the default experiment groups. See [here](https://github.com/microsoft/vscode-python/wiki/AB-Experiments) for more details.
  "python.experiments.optOutFrom": [],

  // Whether to install Python modules globally when not using an environment.
  "python.globalModuleInstallation": false,

  // Controls when to display information of selected interpreter in the status bar.
  //  - never: Never display information.
  //  - onPythonRelated: Only display information if Python-related files are opened.
  //  - always: Always display information.
  "python.interpreter.infoVisibility": "onPythonRelated",

  // Defines type of the language server.
  //  - Default: Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.
  //  - Jedi: Use Jedi behind the Language Server Protocol (LSP) as a language server.
  //  - Pylance: Use Pylance as a language server.
  //  - None: Disable language server capabilities.
  "python.languageServer": "Default",

  // [Experimental] Select implementation of environment locators. This is an experimental setting while we test native environment location.
  "python.locator": "js",

  // This setting is deprecated. Please use command `Developer: Set Log Level...` to set logging level.
  // The logging level the extension logs at, defaults to 'error'
  "python.logging.level": "error",

  // Set severity of missing packages in requirements.txt or pyproject.toml
  "python.missingPackage.severity": "Hint",

  // Path to the pipenv executable to use for activation.
  "python.pipenvPath": "pipenv",

  // Path to the pixi executable.
  "python.pixiToolPath": "pixi",

  // Path to the poetry executable.
  "python.poetryPath": "poetry",

  // Toggle Smart Send for the Python REPL. Smart Send enables sending the smallest runnable block of code to the REPL on Shift+Enter and moves the cursor accordingly.
  "python.REPL.enableREPLSmartSend": true,

  // Toggle to send code to Python REPL instead of the terminal on execution. Turning this on will change the behavior for both Smart Send and Run Selection/Line in the Context Menu.
  "python.REPL.sendToNativeREPL": false,

  // Tensorboard support has been moved to the extension [Tensorboard extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.tensorboard). Instead use the setting `tensorBoard.logDirectory`.
  // Set this setting to your preferred TensorBoard log directory to skip log directory prompt when starting TensorBoard.
  "python.tensorBoard.logDirectory": "",

  // Activate Python Environment in the current Terminal on load of the Extension.
  "python.terminal.activateEnvInCurrentTerminal": false,

  // Activate Python Environment in all Terminals created.
  "python.terminal.activateEnvironment": true,

  // When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
  "python.terminal.executeInFileDir": false,

  // When launching a python terminal, whether to focus the cursor on the terminal.
  "python.terminal.focusAfterLaunch": false,

  // Python launch arguments to use when executing a file in the terminal.
  "python.terminal.launchArgs": [],

  // Enable auto run test discovery when saving a test file.
  "python.testing.autoTestDiscoverOnSaveEnabled": true,

  // Optional working directory for tests.
  "python.testing.cwd": null,

  // Port number used for debugging of tests.
  "python.testing.debugPort": 3000,

  // Prompt to configure a test framework if potential tests directories are discovered.
  "python.testing.promptToConfigure": true,

  // Arguments passed in. Each argument is a separate item in the array.
  "python.testing.pytestArgs": [],

  // Enable testing using pytest.
  "python.testing.pytestEnabled": false,

  // Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.
  "python.testing.pytestPath": "pytest",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.testing.unittestArgs": ["-v", "-s", ".", "-p", "*test*.py"],

  // Enable testing using unittest.
  "python.testing.unittestEnabled": false,

  // Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).
  "python.venvFolders": [],

  // Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
  "python.venvPath": "",

  // When typing a '{' in a string, automatically prefix the string with an 'f'.
  "python.analysis.autoFormatStrings": false,

  // Enable auto-import completions.
  "python.analysis.autoImportCompletions": false,

  // Automatically adjust indentation based on language semantics when typing Python code.
  "python.analysis.autoIndent": true,

  // Automatically add common search paths like 'src'.
  "python.analysis.autoSearchPaths": true,

  // Collect module info [Experimental]. For internal use only, may cause Pylance to slow down.
  "python.analysis.collectModuleInfo": false,

  // Add parentheses to function completions.
  "python.analysis.completeFunctionParens": false,

  // Analysis scope for showing diagnostics.
  //  - openFilesOnly: Analyzes and reports errors on only open files.
  //  - workspace: Analyzes and reports errors on all files in the workspace.
  "python.analysis.diagnosticMode": "openFilesOnly",

  // Allows a user to override the severity levels for individual diagnostics. Use the rule name as a key and one of "error", "warning", "information", "none", `true` (alias for "error") or `false` (alias for "none") as value. The default value shown for each diagnostic is the default when "python.analysis.typeCheckingMode" is set to "off". See [here](https://github.com/microsoft/pyright/blob/main/docs/configuration.md#diagnostic-rule-defaults) for defaults for each type checking mode ("off", "basic" and "strict").
  "python.analysis.diagnosticSeverityOverrides": {},

  // Enables pytest support in Pylance.
  "python.analysis.enablePytestSupport": true,

  // Use sync server mode [Experimental]. For internal use only, may cause Pylance to stop working.
  "python.analysis.enableSyncServer": false,

  // Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. Note that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no exclude paths are specified, Pylance automatically excludes the following: `**/node_modules`, `**/__pycache__`, `.git` and any virtual environment directories.
  "python.analysis.exclude": [],

  // testing experiemental server
  "python.analysis.experimentalserver": false,

  // Allow using '.', '(' as commit characters when applicable.
  "python.analysis.extraCommitChars": false,

  // Additional import search resolution paths
  "python.analysis.extraPaths": [],

  // source fixes to run in fix all.
  "python.analysis.fixAll": [],

  // For string literals that look like module names, enables go to definition to go to the module.
  "python.analysis.gotoDefinitionInStringLiteral": true,

  // Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character).
  "python.analysis.ignore": [],

  // Defines the default format for import module.
  //  - absolute: Use absolute import format when creating new import statement.
  //  - relative: Use relative import format when creating new import statement.
  "python.analysis.importFormat": "absolute",

  // Paths of directories or files that should be included. If no paths are specified, Pylance defaults to the workspace root directory. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character).
  "python.analysis.include": [],

  // Enable indexing of installed third party libraries and user files for language features such as auto-import, add import, workspace symbols and etc.
  "python.analysis.indexing": true,

  // Enable/disable inlay hints for call argument names:
  // ```python
  // datetime('year='2019, 'month='10, 'day='27)
  // ```
  //
  //  - off: Disable inlay hints for call argument names.
  //  - partial: Enable inlay hints for positional-or-keyword arguments while ignoring positional-only and keyword-only.
  //  - all: Enable inlay hints for positional-or-keyword and positional-only arguments while ignoring keyword-only.
  "python.analysis.inlayHints.callArgumentNames": "off",

  // Enable/disable inlay hints for function return types:
  // ```python
  // def foo(x:int) '-> int':
  // 	return x
  // ```
  //
  "python.analysis.inlayHints.functionReturnTypes": false,

  // Enable/disable inlay hints for pytest function parameter types:
  // ```python
  // def test_foo(my_fixture: 'str'):
  // 	assert(my_fixture == 'foo')
  // ```
  //
  "python.analysis.inlayHints.pytestParameters": false,

  // Enable/disable inlay hints for variable types. Hints are not displayed for assignments of literals or constants:
  // ```python
  // foo':list[str]' = ["a"]
  //
  // ```
  //
  "python.analysis.inlayHints.variableTypes": false,

  // Specifies the level of logging for the Output panel
  "python.analysis.logLevel": "Information",

  // Path to a Node.js executable to use for running the language server. If not specified, the language server will use the Node.js executable that ships with VS Code. Set this option if you're having trouble with Pylance running out of memory. See [here](https://aka.ms/AApf7ox) for more information.
  "python.analysis.nodeExecutable": "",

  // Used to override how many levels under installed packages to index on a per package basis. By default, only top-level modules are indexed (depth = 1). To index submodules, increase depth by 1 for each level of submodule you want to index. Accepted values are:
  // ```JSON
  // {"name": "package name (str)",
  //  "depth": "depth to scan (int)",
  //  "includeAllSymbols": "whether to include all symbols (bool)"}
  //
  // ```
  // If `include all symbols` is set to `false`, only symbols in each package's `__all__` are included. When it's set to `true`, Pylance will index every module/top level symbol declarations in the file.
  //
  // Usage example:
  // ```JSON
  // [
  // 	{"name": "sklearn", "depth": 2, "includeAllSymbols": true},
  // 	{"name": "matplotlib", "depth": 3, "includeAllSymbols": false}
  // ]
  //
  // ```
  //
  "python.analysis.packageIndexDepths": [
    {
      "name": "sklearn",
      "depth": 2
    },
    {
      "name": "matplotlib",
      "depth": 2
    },
    {
      "name": "scipy",
      "depth": 2
    },
    {
      "name": "django",
      "depth": 2
    },
    {
      "name": "flask",
      "depth": 2
    },
    {
      "name": "fastapi",
      "depth": 2
    }
  ],

  // Indices for all third party libraries will be persisted to disk.
  "python.analysis.persistAllIndices": true,

  // Path to directory containing custom type stub files.
  "python.analysis.stubPath": "typings",

  // Enable/disable support for reStructuredText in docstrings. Experimental, may cause docstrings to no longer render.
  "python.analysis.supportRestructuredText": false,

  // Defines the default rule set for type checking.
  //  - off: Show diagnostics for invalid syntax, unresolved imports, undefined variables.
  //  - basic: All "off" rules + basic type checking rules.
  //  - standard: All "off" rules + basic type checking rules + standard typechecker rules.
  //  - strict: All "off" rules + all type checking rules.
  "python.analysis.typeCheckingMode": "off",

  // Paths to look for typeshed modules.
  "python.analysis.typeshedPaths": [],

  // Use library implementations to extract type information when type stub is not present.
  "python.analysis.useLibraryCodeForTypes": true,

  // Maximum number of user files to index in the workspace. Indexing files is a performance-intensive task. Please use this setting to limit the number of files you want us to index. If you enter -1, we will index all files.
  "python.analysis.userFileIndexingLimit": 2000,

  // Allow for connecting the Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers.
  "jupyter.allowUnauthorizedRemoteConnection": false,

  // Warn the user before restarting a kernel.
  "jupyter.askForKernelRestart": true,

  // Warn the user before trying to open really large data frames.
  "jupyter.askForLargeDataFrames": true,

  // Mapping of characters which trigger auto completion in a Jupyter Kernel language. Following is an example of trigger characters for rust and julia kernel languages:
  // ```json
  // {
  //   "julia": ["."],
  //   "rust": [".",":"]
  // }
  // ```
  "jupyter.completionTriggerCharacters": {
    "bash": ["$", "{"],
    "java": [".", "@", "#"],
    "javascript": [".", "\"", "'", "/", "@"],
    "python": [".", "%", "'", "\""],
    "julia": ["."],
    "r": ["[", "(", ",", "$", "@", "\"", "'"],
    "rust": [".", ":"],
    "scala": ["."],
    "typescript": [".", "\"", "'", "/", "@", "<"]
  },

  // When debugging, only step through user-written code. Disable this to allow stepping into library code.
  "jupyter.debugJustMyCode": true,

  // Path to debugpy bits for debugging cells.
  "jupyter.debugpyDistPath": "",

  // When true, disables Jupyter from being automatically started for you. You must instead run a cell to start Jupyter.
  "jupyter.disableJupyterAutoStart": false,

  // This setting has been deprecated in favor of jupyter.enableExtendedPythonKernelCompletions.
  // Enables Jedi support for extended IntelliSense completions in running Python Jupyter kernels for Python (see this [setting](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi)). This can greatly impact notebook cell execution performance. Use with caution.
  "jupyter.enableExtendedKernelCompletions": false,

  // Enables Jedi support for extended IntelliSense completions in running Python Jupyter kernels for Python (see this [setting](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi)). This can greatly impact notebook cell execution performance. Use with caution.
  "jupyter.enableExtendedPythonKernelCompletions": false,

  // Enable code completions in Notebooks and Interactive Windows using results from the associated Jupyter Kernel.
  "jupyter.enableKernelCompletions": true,

  // Add PYTHONNOUSERSITE to kernels before starting. This prevents global/user site-packages from being used in the PYTHONPATH of the kernel.
  "jupyter.excludeUserSitePackages": false,

  // Experimental feature to enable execution analysis in notebooks
  "jupyter.executionAnalysis.enabled": false,

  // Enables/disables A/B tests.
  "jupyter.experiments.enabled": true,

  // List of experiment to opt into. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
  "jupyter.experiments.optInto": [],

  // List of experiment to opt out of. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
  "jupyter.experiments.optOutFrom": [],

  // Enable exporting a python file into a jupyter notebook and run all cells when doing so.
  "jupyter.exportWithOutputEnabled": false,

  // This setting has been deprecated and will be removed in a future release.
  // Inject stack frame links into the stored traceback for the notebook.
  "jupyter.formatStackTraces": false,

  // Regular expression used to identify code cells. All code until the next match is considered part of this cell.
  "jupyter.interactiveWindow.cellMarker.codeRegex": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",

  // Draw a highlight behind the currently active cell, or all cells, in a python file.
  "jupyter.interactiveWindow.cellMarker.decorateCells": "currentCell",

  // Cell marker used for delineating a cell in a python file.
  "jupyter.interactiveWindow.cellMarker.default": "# %%",

  // Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown.
  "jupyter.interactiveWindow.cellMarker.markdownRegex": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",

  // Set of commands to put as code lens above a cell.
  "jupyter.interactiveWindow.codeLens.commands": "jupyter.runcell, jupyter.runallcellsabove, jupyter.debugcell",

  // Enables code lens for 'cells' in a python file.
  "jupyter.interactiveWindow.codeLens.enable": true,

  // After running a cell, add a 'Goto' code lens on the cell. Note, disabling all code lenses disables this code lens as well.
  "jupyter.interactiveWindow.codeLens.enableGotoCell": true,

  // Set of debug commands to put as code lens above a cell while debugging.
  "jupyter.interactiveWindow.codeLes.debugCommands": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",

  // Behavior of the Interactive Window. 'perFile' will create a new interactive window for every file that runs a cell. 'single' allows a single window. 'multiple' allows the creation of multiple.
  "jupyter.interactiveWindow.creationMode": "multiple",

  // A file run in the Interactive Window will be run in individual cells if it has them.
  "jupyter.interactiveWindow.splitRunFileIntoCells": true,

  // Append a new empty cell to an interactive window file on running the currently last cell.
  "jupyter.interactiveWindow.textEditor.autoAddNewCell": true,

  // Enables moving to the next cell when clicking on a 'Run Cell' code lens.
  "jupyter.interactiveWindow.textEditor.autoMoveToNextCell": true,

  // Enable folding regions for code cells in Python files. This setting requires a reload of VS Code.
  "jupyter.interactiveWindow.textEditor.cellFolding": true,

  // When pressing shift+enter, send selected code in a Python file to the Jupyter interactive window as opposed to the Python terminal.
  "jupyter.interactiveWindow.textEditor.executeSelection": false,

  // Uncomment shell assignments (#!), line magic (#!%) and cell magic (#!%%) when parsing code cells.
  "jupyter.interactiveWindow.textEditor.magicCommandsAsComments": false,

  // Selected text will be normalized before it is executed in the Interactive Window.
  "jupyter.interactiveWindow.textEditor.normalizeSelection": false,

  // Where to open an Interactive Window that is not associated with a python file. 'beside' will open the interactive window to the right of the active editor. 'active' will open the interactive window in place of the active editor. 'secondGroup' will open the interactive window in the second editor group.
  "jupyter.interactiveWindow.viewColumn": "secondGroup",

  // If and when a Jupyter server is started, these arguments will be passed to into the Jupyter Notebook CLI. By default this list is generated by the Jupyter Extension.
  "jupyter.jupyterCommandLineArguments": [],

  // Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.
  "jupyter.jupyterInterruptTimeout": 10000,

  // Number of times to attempt to connect to the Jupyter Notebook
  "jupyter.jupyterLaunchRetries": 3,

  // Amount of time (in ms) to wait for the Jupyter Notebook server to start.
  "jupyter.jupyterLaunchTimeout": 60000,

  // List of Python environments to be excluded from the Kernel picker.
  "jupyter.kernels.excludePythonEnvironments": [],

  // Enter fully qualified paths to Kernel specification files that are to be trusted. E.g. 'C:\Program Data\Jupyter\kernels\python3\kernel.json'.
  // **Note**: Kernels can execute code with user privileges. Click [here](https://aka.ms/JupyterTrustedKernelPaths) for further details.
  "jupyter.kernels.trusted": [],

  // The logging level the extension logs at.
  //  - off: No messages are logged with this level.
  //  - error: Only error messages are logged with this level.
  //  - warn: Warning and error messages are logged with this level.
  //  - info: Information, warning and error messages are logged with this level.
  //  - debug: Debug and higher severity messages are logged with this level.
  //  - trace: All messages are logged with this level.
  "jupyter.logging.level": "info",

  // Creates separate output panels for kernels/jupyter server console output
  "jupyter.logKernelOutputSeparately": false,

  // Set the root directory for Jupyter Notebooks and the Interactive Window running locally.
  //
  // **Note:** This does not apply to Remote Jupyter Kernels.
  "jupyter.notebookFileRoot": "${fileDirname}",

  // This setting has been deprecated in favor of jupyter.completionTriggerCharacters.
  // Characters which trigger auto completion on a python jupyter kernel.
  "jupyter.pythonCompletionTriggerCharacters": ".%'\"",

  // The method to use when exporting a notebook to a Python file. 'direct' will copy over the code directly as is. 'commentMagics' will comment out lines starting with line magics (%), cell magics (%%), and shell commands(!). 'nbconvert' will install nbconvert and use that for the conversion which can translate iPython syntax into Python syntax.
  "jupyter.pythonExportMethod": "direct",

  // A series of Python instructions or iPython magic commands. Can be either an array of strings or a single string with commands separated by '\n'. Commands will be silently executed whenever the interactive window loads. For instance, set this to '%load_ext autoreload\n%autoreload 2' to automatically reload changes made to imported files without having to restart the interactive session.
  "jupyter.runStartupCommands": "",

  // Show the Outline button in the Jupyter notebook toolbar.
  "jupyter.showOutlineButtonInNotebookToolbar": true,

  // Bring up the Variable View when starting a Run by Line session.
  "jupyter.showVariableViewWhenDebugging": false,

  // When debugging a cell, stop on the first line.
  "jupyter.stopOnFirstLineWhileDebugging": true,

  // In the Interactive window and Notebook Editor theme matplotlib outputs to match the VS Code editor theme.
  "jupyter.themeMatplotlibPlots": false,

  // When running Jupyter locally, create a default empty Jupyter config
  "jupyter.useDefaultConfigForJupyter": true,

  // Types to exclude from showing in the Interactive variable explorer
  "jupyter.variableExplorerExclude": "module;function;builtin_function_or_method;ABCMeta;type;ModelMetaclass",

  // Defines the location and order of the sources where scripts files for Widgets are downloaded from (e.g. ipywidgest, bqplot, beakerx, ipyleaflet, etc). Not selecting any of these could result in widgets not rendering or function correctly. See [here](https://aka.ms/PVSCIPyWidgets) for more information. Once updated you will need to restart the Kernel.
  //  - jsdelivr.com: Loads widget (javascript) scripts from https://www.jsdelivr.com/
  //  - unpkg.com: Loads widget (javascript) scripts from https://unpkg.com/
  "jupyter.widgetScriptSources": [],

  // Additional directories to search for compilers.
  "cmake.additionalCompilerSearchDirs": [],

  // Array of paths to custom kit files.
  "cmake.additionalKits": [],

  // Allow the use of JSON extensions such as comments in CMakePresets.json. Please note that your CMakePresets.json file may be considered invalid by other IDEs or on the command line if you use non-standard JSON.
  "cmake.allowCommentsInPresetsFile": false,

  // Enables the use of presets files that are using features from the versions that CMake Tools extension doesn't currently support. Unknown properties and macros will be ignored.
  "cmake.allowUnsupportedPresetsVersions": false,

  // Automatically configure CMake project directories when the kit or the configuration preset is changed.
  "cmake.automaticReconfigure": true,

  // Select active folder automatically.
  "cmake.autoSelectActiveFolder": true,

  // Additional arguments to pass to CMake when building. When using CMake Presets, these arguments are temporarily appended to the arguments provided by the active build preset.
  "cmake.buildArgs": [],

  // Build the target before running it.
  "cmake.buildBeforeRun": true,

  // The directory where CMake build files will go.
  "cmake.buildDirectory": "${workspaceFolder}/build",

  // Environment variables to pass to CMake during build. When using CMake Presets, these are temporarily added to the environment provided by the active build preset.
  "cmake.buildEnvironment": {},

  // Build using tasks.json instead of internal process.
  "cmake.buildTask": false,

  // Additional arguments to pass to the underlying build tool when building. When using CMake Presets, these arguments are temporarily appended to the arguments provided by the active build preset to invoke the build tool.
  "cmake.buildToolArgs": [],

  // Provide cache-initializing CMake file(s).
  "cmake.cacheInit": null,

  // Clear build output before each build.
  "cmake.clearOutputBeforeBuild": true,

  // The protocol used to communicate between the extension and CMake.
  "cmake.cmakeCommunicationMode": "automatic",

  // Name/path of the CMake executable to use.
  "cmake.cmakePath": "cmake",

  // Additional arguments to pass to CMake when configuring. When using CMake Presets, these arguments are temporarily appended to the arguments provided by the active configure preset.
  "cmake.configureArgs": [],

  // Environment variables to pass to CMake during configure. When using CMake Presets, these are temporarily added to the environment provided by the active configure preset.
  "cmake.configureEnvironment": {},

  // Automatically configure CMake project directories when cmake.sourceDirectory or CMakeLists.txt content are saved.
  "cmake.configureOnEdit": true,

  // Automatically configure CMake project directories when they are opened.
  "cmake.configureOnOpen": null,

  // CMake variables to set on the command line. This setting is specific to kits and will not be used for CMake Presets.
  "cmake.configureSettings": {},

  // Copy compile_commands.json to this location after a successful configure.
  "cmake.copyCompileCommands": null,

  // Additional arguments to pass to CPack (only when using presets, not supported for kits). These arguments are temporarily added to the arguments provided by the active package preset.
  "cmake.cpackArgs": [],

  // Environment variables to set when packaging with CPack (only when using presets, not supported for kits). These are temporarily added to the environment used for CPack runs.
  "cmake.cpackEnvironment": {},

  // Path to CPack executable. If null, will be inferred from cmake.cmakePath (recommended to leave null). Will be ignored when kits are used instead of presets.
  "cmake.cpackPath": null,

  // Allows ctests to be run in parallel, however the result output may be garbled as a result and the Test Explorer may not accurately reflect test progress.
  "cmake.ctest.allowParallelJobs": false,

  // The number of parallel test jobs. Use zero to use the value of `cmake.parallelJobs#`. This only applies when `#cmake.ctest.allowParallelJobs` is set to `true`.
  "cmake.ctest.parallelJobs": 0,

  // Whether or not the integration with the test explorer is enabled. This is helpful to disable if you prefer using a different extension for test integration.
  "cmake.ctest.testExplorerIntegrationEnabled": true,

  // Optional delimiter used to separate test suite names and group tests hierarchically in the Test Explorer. This string is used in a Regular Expression, so some delimiters may need escaping. Examples: `-` ( One delimiter: `-`), `\.|::` (Two delimiters: `.` or `::`. Note that `.` needs to be escaped.)
  "cmake.ctest.testSuiteDelimiter": null,

  // Additional arguments to pass to CTest. When using CMake Presets, these arguments are temporarily added to the arguments provided by the active test preset.
  "cmake.ctestArgs": [],

  // Arguments passed by default to CTest.
  "cmake.ctestDefaultArgs": ["-T", "test", "--output-on-failure"],

  // Path to CTest executable. If null, will be inferred from cmake.cmakePath (recommended to leave null).
  "cmake.ctestPath": null,

  // The debug configuration to use when debugging a target.
  "cmake.debugConfig": {},

  // Configure the default variant settings.
  "cmake.defaultVariants": {
    "buildType": {
      "default": "debug",
      "description": "The build type.",
      "choices": {
        "debug": {
          "short": "Debug",
          "long": "Disable optimizations - include debug information.",
          "buildType": "Debug"
        },
        "release": {
          "short": "Release",
          "long": "Optimize for speed - exclude debug information.",
          "buildType": "Release"
        },
        "minsize": {
          "short": "MinSizeRel",
          "long": "Optimize for smallest binary size - exclude debug information.",
          "buildType": "MinSizeRel"
        },
        "reldeb": {
          "short": "RelWithDebInfo",
          "long": "Optimize for speed - include debug information.",
          "buildType": "RelWithDebInfo"
        }
      }
    }
  },

  // %cmake-tools.configuration.cmake.deleteBuildDirOnCleanCconfigure.description%
  "cmake.deleteBuildDirOnCleanConfigure": false,

  // Directories where Emscripten may be installed.
  "cmake.emscriptenSearchDirs": [],

  // Enable automatic scanning for kits when a kit isn't selected. This will only take affect when CMake Presets aren't being used.
  "cmake.enableAutomaticKitScan": true,

  // Output parsers to use. Supported parsers `cmake`, `gcc`, `gnuld` for GNULD-style linker output, `msvc` for Microsoft Visual C++, `ghs` for the Green Hills compiler with --no_wrap_diagnostics --brief_diagnostics, and `diab` for the Wind River Diab compiler.
  "cmake.enabledOutputParsers": ["cmake", "gcc", "gnuld", "msvc", "ghs", "diab"],

  // Enable trace logging to file and console (very noisy).
  "cmake.enableTraceLogging": false,

  // Environment variables to set when running CMake commands. When using CMake Presets, these are temporarily added to the environment used for CMake commands.
  "cmake.environment": {},

  // Enables exporting compile_commands.json. This only is used in Kits scenarios. In Presets scenarios, please set this by using CMakePresets.json
  "cmake.exportCompileCommandsFile": true,

  // The CMake generator to use.
  "cmake.generator": null,

  // If `true`, the extension will not ask the user to select a CMakeLists.txt file for configuration when one is found in the workspace but not in the root folder.
  "cmake.ignoreCMakeListsMissing": false,

  // Do not use the kit environment variables when running CMake commands.
  "cmake.ignoreKitEnv": false,

  // The directory where CMake installed files will go.
  "cmake.installPrefix": null,

  // Controls what happens with the launch terminal when you launch a target.
  //  - reuseTerminal: The launch terminal instance is reused and the target will launch as soon as the terminal is idle.
  //  - breakAndReuseTerminal: The launch terminal instance is reused and a `break` command is sent to terminate any active foreground process before launching the target.
  //  - newTerminal: A new terminal instance is created and the target is launched in it. Existing terminals are not automatically cleaned up.
  "cmake.launchBehavior": "reuseTerminal",

  // Controls whether the extension reads compile_commands.json to enable single file compilation.
  "cmake.loadCompileCommands": true,

  // Tell what types of messages should be logged to the console.
  "cmake.loggingLevel": "info",

  // Recursively collect and merge all compile_commands.json found in the cmake.buildDirectory.
  "cmake.mergedCompileCommands": null,

  // **Deprecated**: Please use `cmake.additionalCompilerSearchDirs` instead.
  // Directories where MinGW may be installed.
  "cmake.mingwSearchDirs": [],

  // Configures the settings for individual Project Status View and status bar options. These settings may overwrite the more general `cmake.options.statusBarVisibility` setting. [More info](https://aka.ms/cmaketoolsoptionsconfiguration).
  "cmake.options.advanced": {
    "build": {
      "statusBarVisibility": "inherit",
      "inheritDefault": "visible"
    },
    "launch": {
      "statusBarVisibility": "inherit",
      "inheritDefault": "visible"
    },
    "debug": {
      "statusBarVisibility": "inherit",
      "inheritDefault": "visible"
    }
  },

  // Configures how the extension displays the options in the Status Bar. These settings may be overwritten by the more specific `cmake.options.advanced.statusBarVisibility` setting. [More info](https://aka.ms/cmaketoolsoptionsconfiguration).
  "cmake.options.statusBarVisibility": "hidden",

  // Encoding of the output from external commands (eg.cmake -- build).
  "cmake.outputLogEncoding": "auto",

  // The number of parallel build jobs. Use zero to automatically detect the number of CPUs. Setting this to 1 will omit the parallelism flag (-j) from the underlying build command, which has a generator-dependent effect on build parallelism.
  "cmake.parallelJobs": 0,

  // Parse compiler output for warnings and errors.
  "cmake.parseBuildDiagnostics": true,

  // List of CMake commands to pin.
  "cmake.pinnedCommands": [],

  // The CMake platform to use when configuring.
  "cmake.platform": null,

  // The preferred CMake generator(s) to use when configuring (tried in order of listing).
  "cmake.preferredGenerators": [],

  // Configures the settings for showing the log and focusing on the output channel.
  //  - focus: The log appears and the output channel takes the cursor focus.
  //  - always: The log appears but the output channel doesn't take the cursor focus.
  //  - never: The log neither appears nor takes the focus.
  "cmake.revealLog": "always",

  // Save open files before building.
  "cmake.saveBeforeBuild": true,

  // Set CMAKE_BUILD_TYPE also on multi config generators.
  "cmake.setBuildTypeOnMultiConfig": false,

  // Enables the pop-up that asks the user if, upon a failed configure, they want to configure with the CMake Debugger.
  "cmake.showConfigureWithDebuggerNotification": true,

  // Enables the pop-up that asks the user if they want to continue the build despite some files possibly not being saved. If not enabled, the build will be continued.
  "cmake.showNotAllDocumentsSavedQuestion": true,

  // Enables the notification regarding the status bar options moving to the Project Status View to show when the extension starts.
  "cmake.showOptionsMovedNotification": true,

  // Include system kits in kit selection.
  "cmake.showSystemKits": true,

  // Skip over the configure process if cache is present.
  "cmake.skipConfigureIfCachePresent": null,

  // Path or array of paths to the CMakeLists.txt root directory/directories.
  "cmake.sourceDirectory": "${workspaceFolder}",

  // Environment variables to pass to CTest. When using CMake Presets, these are temporarily added to the environment provided by the active test preset.
  "cmake.testEnvironment": {},

  // The CMake toolset to use when configuring.
  "cmake.toolset": null,

  // Configures advanced settings for how the extension displays buttons on a MacBook Touch Bar.
  "cmake.touchbar.advanced": {},

  // Configures how the extension displays the buttons on a MacBook Touch Bar.
  //  - default: Show Touch Bar buttons on supported systems.
  //  - hidden: Do not show Touch Bar buttons.
  "cmake.touchbar.visibility": "default",

  // Use CMakePresets.json to configure drive CMake configure, build, and test. When using CMakePresets.json, kits, variants, and some settings in settings.json will be ignored.
  "cmake.useCMakePresets": "auto",

  // Controls the auto-completion provider. If `disabled` and you want word-based completion, you will also need to set `"[cpp]": {"editor.wordBasedSuggestions": <value>}` (and similarly for `c` and `cuda-cpp` languages).
  //  - default: Uses the active IntelliSense engine.
  //  - disabled: Uses the word-based completion provided by Visual Studio Code.
  "C_Cpp.autocomplete": "default",

  // If `true`, autocomplete will automatically add `(` after function calls, in which case `)` may also be added, depending on the value of the `editor.autoClosingBrackets` setting.
  "C_Cpp.autocompleteAddParentheses": false,

  // If enabled, code folding ranges are provided by the language server.
  "C_Cpp.codeFolding": "enabled",

  // Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.
  "C_Cpp.configurationWarnings": "enabled",

  // The value to use in a configuration if `browse.databaseFilename` is either not specified or set to `${default}`.
  "C_Cpp.default.browse.databaseFilename": "",

  // The value to use in a configuration if `browse.limitSymbolsToIncludedHeaders` is either not specified or set to `${default}`.
  "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,

  // The value to use in a configuration if `browse.path` is not specified, or the values to insert if `${default}` is present in `browse.path`.
  "C_Cpp.default.browse.path": null,

  // The value to use in a configuration if `compileCommands` is either not specified, or set to `${default}`.
  "C_Cpp.default.compileCommands": "",

  // The value to use in configuration if `compilerArgs` is either not specified or set to `${default}`.
  "C_Cpp.default.compilerArgs": [],

  // The value to use in a configuration if `compilerPath` is either not specified or set to `${default}`.
  "C_Cpp.default.compilerPath": null,

  // The value to use in a configuration if `configurationProvider` is either not specified or set to `${default}`.
  "C_Cpp.default.configurationProvider": "",

  // The value to use in a configuration if `cppStandard` is either not specified or set to `${default}`.
  "C_Cpp.default.cppStandard": "",

  // The value to use in a configuration if `cStandard` is either not specified or set to `${default}`.
  "C_Cpp.default.cStandard": "",

  // The value to use in a configuration if `customConfigurationVariables` is not set, or the values to insert if `${default}` is present as a key in `customConfigurationVariables`.
  "C_Cpp.default.customConfigurationVariables": null,

  // The value to use in a configuration if `defines` is not specified, or the values to insert if `${default}` is present in `defines`.
  "C_Cpp.default.defines": [],

  // The value to use in a configuration if `dotConfig` is not specified, or the value to insert if `${default}` is present in `dotConfig`.
  "C_Cpp.default.dotConfig": "",

  // Controls whether the extension will report errors detected in `c_cpp_properties.json`.
  "C_Cpp.default.enableConfigurationSquiggles": true,

  // The value to use in a configuration if `forcedInclude` is not specified, or the values to insert if `${default}` is present in `forcedInclude`.
  "C_Cpp.default.forcedInclude": [],

  // The value to use in a configuration if `includePath` is not specified in `c_cpp_properties.json`. If `includePath` is specified, add `${default}` to the array to insert the values from this setting. Usually, this should not include system includes; instead, set `C_Cpp.default.compilerPath`.
  "C_Cpp.default.includePath": [],

  // The value to use in a configuration if `intelliSenseMode` is either not specified or set to `${default}`.
  "C_Cpp.default.intelliSenseMode": "",

  // The value to use in a configuration if `macFrameworkPath` is not specified, or the values to insert if `${default}` is present in `macFrameworkPath`.
  "C_Cpp.default.macFrameworkPath": [],

  // Set to `true` to merge include paths, defines, and forced includes with those from a configuration provider.
  "C_Cpp.default.mergeConfigurations": false,

  // The value to use for the system include path. If set, it overrides the system include path acquired via `compilerPath` and `compileCommands` settings.
  "C_Cpp.default.systemIncludePath": [],

  // Version of the Windows SDK include path to use on Windows, e.g. `10.0.17134.0`.
  "C_Cpp.default.windowsSdkVersion": "",

  // Controls whether inactive preprocessor blocks are colored differently than active code. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.
  "C_Cpp.dimInactiveRegions": true,

  // If enabled, code is colorized based on IntelliSense. This setting only applies if `C_Cpp.intelliSenseEngine` is set to `default`.
  "C_Cpp.enhancedColorization": "enabled",

  // Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. It also controls whether code analysis warnings are reported if includes can't be found. This setting is ignored by the Tag Parser engine.
  "C_Cpp.errorSquiggles": "enabledIfIncludesResolve",

  // Instructs the extension when to use the `files.exclude#` (and `#C_Cpp.files.exclude#`) setting when determining which files should be added to the code navigation database while traversing through the paths in the `browse.path` array. If your `#files.exclude` setting only contains folders, then `checkFolders` is the best choice and will increase the speed at which the extension can initialize the code navigation database.
  //  - checkFolders: The exclusion filters will only be evaluated once per folder (individual files are not checked).
  //  - checkFilesAndFolders: The exclusion filters will be evaluated against every file and folder encountered.
  "C_Cpp.exclusionPolicy": "checkFolders",

  // Configure glob patterns for excluding folders (and files if `C_Cpp.exclusionPolicy#` is changed). These are specific to the C/C++ extension and are in addition to `#files.exclude#`, but unlike `#files.exclude` they also apply to paths outside the current workspace folder and are not removed from the Explorer view. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
  "C_Cpp.files.exclude": {
    "**/.vscode": true,
    "**/.vs": true
  },

  // If disabled, hover details are no longer provided by the language server.
  "C_Cpp.hover": "default",

  // Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.
  "C_Cpp.inactiveRegionBackgroundColor": "",

  // Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.
  "C_Cpp.inactiveRegionForegroundColor": "",

  // Controls the opacity of inactive preprocessor blocks. Scales between `0.1` and `1.0`. This setting only applies when inactive region dimming is enabled.
  "C_Cpp.inactiveRegionOpacity": 0.55,

  // Display inlay hints for deduced type when `auto` is used in a declaration:
  // ```cpp
  //
  //  auto index /* : int */ = 0;
  // ```
  "C_Cpp.inlayHints.autoDeclarationTypes.enabled": false,

  // Display inlay hints for deduced type when `auto` is used in a declaration on the left of the identifier:
  // ```cpp
  //
  //  auto /* int */ index = 0;
  // ```
  "C_Cpp.inlayHints.autoDeclarationTypes.showOnLeft": false,

  // Display inlay hints for parameter names:
  // ```cpp
  //
  //  int a = getArea(/* width: */ x, /* height: */ y);
  // ```
  "C_Cpp.inlayHints.parameterNames.enabled": false,

  // Hide leading `_` in parameter name hints.
  "C_Cpp.inlayHints.parameterNames.hideLeadingUnderscores": true,

  // Suppress parameter name hints when the argument text or inline comment contains the parameter name:
  // ```cpp
  //
  //  int a = getArea(width, /* height: */ y);
  // ```
  "C_Cpp.inlayHints.parameterNames.suppressWhenArgumentContainsName": true,

  // Display the inlay hint reference operator `&` for parameters passed by non-const reference:
  // ```cpp
  //
  //  swap(/* &first: */ str1, /* &last: */ str2);
  // ```
  "C_Cpp.inlayHints.referenceOperator.enabled": false,

  // Controls whether a space is shown after `&` for parameters passed by non-const reference:
  // ```cpp
  //
  //  swap(/* & first: */ str1, /* & last: */ str2);
  // ```
  "C_Cpp.inlayHints.referenceOperator.showSpace": false,

  // Controls the IntelliSense provider.
  //  - default: Provides context-aware results via a separate IntelliSense process.
  //  - Tag Parser: Provides "fuzzy" results that are not context-aware.
  //  - disabled: Turns off C/C++ language service features.
  "C_Cpp.intelliSenseEngine": "default",

  // Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing `#include` errors.
  "C_Cpp.intelliSenseEngineFallback": "disabled",

  // Controls the delay in milliseconds before IntelliSense starts updating after a modification.
  "C_Cpp.intelliSenseUpdateDelay": 1000,

  // Enable pre-v1.10.0 behavior for how shell escaping is handled in compiler arg settings. Shell escaping is no longer expected or supported by default in arg arrays starting in v1.10.0.
  "C_Cpp.legacyCompilerArgsBehavior": false,

  // Controls whether to include the header file of a refactored function/symbol to its corresponding source file when doing a refactoring action, such as create declaration/definition.
  //  - always: Always include the header file if it is not included explicitly in its source file.
  //  - ifNeeded: Only include the header file if it is not included explicitly in its source file or through implicit inclusion.
  //  - never: Never include the header file.
  "C_Cpp.refactoring.includeHeader": "always",

  // If `true`, 'Rename Symbol' will require a valid C/C++ identifier.
  "C_Cpp.renameRequiresIdentifier": true,

  // If `true`, snippets are provided by the language server.
  "C_Cpp.suggestSnippets": true,

  // Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values `highest`/`high`/`medium`/`low` correspond to approximately 100/75/50/25% CPU usage.
  "C_Cpp.workspaceParsingPriority": "highest",

  // The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked.
  "C_Cpp.workspaceSymbols": "Just My Code",

  // Name of the predefined style used as a fallback in case `clang-format` is invoked with style `file` but the `.clang-format` file is not found. Possible values are `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`, `none`, or use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
  "C_Cpp.clang_format_fallbackStyle": "Visual Studio",

  // The full path of the `clang-format` executable. If not specified, and `clang-format` is available in the environment path, that is used. If not found in the environment path, the `clang-format` bundled with the extension will be used.
  "C_Cpp.clang_format_path": "",

  // If set, overrides the include sorting behavior determined by the `SortIncludes` parameter.
  "C_Cpp.clang_format_sortIncludes": null,

  // Coding style, currently supports: `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`. Use `file` to load the style from a `.clang-format` file in the current or parent directory, or use `file:<path>/.clang-format` to reference a specific path. Use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
  "C_Cpp.clang_format_style": "file",

  // Configures the formatting engine.
  //  - clangFormat: `clang-format` will be used to format code.
  //  - vcFormat: The Visual C++ formatting engine will be used to format code.
  //  - default: By default, `clang-format` will be used to format the code. However, the Visual C++ formatting engine will be used if an `.editorconfig` file with relevant settings is found nearer to the code being formatted and `C_Cpp.clang_format_style` is the default value: `file`.
  //  - disabled: Code formatting will be disabled.
  "C_Cpp.formatting": "default",

  // Access specifiers are indented relative to class or struct definitions by the amount specified in the `editor.tabSize` setting.
  "C_Cpp.vcFormat.indent.accessSpecifiers": false,

  // Braces are indented by the amount specified in the `editor.tabSize` setting.
  "C_Cpp.vcFormat.indent.braces": false,

  // Code inside a `case` block is indented relative to its label by the amount specified in the `editor.tabSize` setting.
  "C_Cpp.vcFormat.indent.caseContents": true,

  // Indent braces following a case statement by the amount specified in the `editor.tabSize` setting.
  "C_Cpp.vcFormat.indent.caseContentsWhenBlock": false,

  // Labels are indented relative to switch statements by the amount specified in the `editor.tabSize` setting.
  "C_Cpp.vcFormat.indent.caseLabels": false,

  // The position of goto labels.
  //  - oneLeft: Position goto labels to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
  //  - leftmostColumn: Position goto labels at the leftmost edge of the code.
  //  - none: Goto labels will not be formatted.
  "C_Cpp.vcFormat.indent.gotoLabels": "oneLeft",

  // Indent braces of lambdas used as function parameters relative to the start of the statement by the amount specified in the `editor.tabSize` setting.
  "C_Cpp.vcFormat.indent.lambdaBracesWhenParameter": true,

  // Determines what new line indentation is relative to.
  //  - outermostParenthesis: Indent new line relative to the outermost open parenthesis.
  //  - innermostParenthesis: Indent new line relative to the innermost open parenthesis.
  //  - statementBegin: Indent new line relative to the beginning of the current statement.
  "C_Cpp.vcFormat.indent.multiLineRelativeTo": "innermostParenthesis",

  // Code is indented relative to its enclosing namespace by the amount specified in the `editor.tabSize` setting.
  "C_Cpp.vcFormat.indent.namespaceContents": true,

  // The position of preprocessor directives.
  //  - oneLeft: Preprocessor directives are positioned to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
  //  - leftmostColumn: Preprocessor directives are positioned at the leftmost edge of the code.
  //  - none: Preprocessor directives will not be formatted.
  "C_Cpp.vcFormat.indent.preprocessor": "leftmostColumn",

  // Indentation of comments is not changed during formatting operations.
  "C_Cpp.vcFormat.indent.preserveComments": false,

  // In existing code, preserve the existing indent alignment of new lines within parentheses.
  "C_Cpp.vcFormat.indent.preserveWithinParentheses": false,

  // When a new line is typed, it is aligned under the opening parenthesis or based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
  //  - alignToParenthesis: New line is aligned under the opening parenthesis.
  //  - indent: New line is indented based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
  "C_Cpp.vcFormat.indent.withinParentheses": "indent",

  // Place `catch` and similar keywords on a new line.
  "C_Cpp.vcFormat.newLine.beforeCatch": true,

  // Place `else` on a new line.
  "C_Cpp.vcFormat.newLine.beforeElse": true,

  // The position of opening braces for control blocks.
  //  - newLine: Opening braces are moved to a new line.
  //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
  //  - ignore: Opening braces are not formatted.
  "C_Cpp.vcFormat.newLine.beforeOpenBrace.block": "ignore",

  // The position of opening braces for functions.
  //  - newLine: Opening braces are moved to a new line.
  //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
  //  - ignore: Opening braces are not formatted.
  "C_Cpp.vcFormat.newLine.beforeOpenBrace.function": "ignore",

  // The position of opening braces for lambda functions.
  //  - newLine: Opening braces are moved to a new line.
  //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
  //  - ignore: Opening braces are not formatted.
  "C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": "ignore",

  // The position of opening braces for namespaces.
  //  - newLine: Opening braces are moved to a new line.
  //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
  //  - ignore: Opening braces are not formatted.
  "C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": "ignore",

  // The position of opening braces for type definitions.
  //  - newLine: Opening braces are moved to a new line.
  //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
  //  - ignore: Opening braces are not formatted.
  "C_Cpp.vcFormat.newLine.beforeOpenBrace.type": "ignore",

  // Place `while` in a `do`-`while` loop on a new line.
  "C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": false,

  // For empty function bodies, move closing braces to the same line as opening braces.
  "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": false,

  // For empty types, move closing braces to the same line as opening braces.
  "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": false,

  // Place opening and closing braces for scopes on separate lines.
  "C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": false,

  // A space is added after the closing parenthesis of a C-style cast.
  "C_Cpp.vcFormat.space.afterCastCloseParenthesis": false,

  // A space is added after every comma.
  "C_Cpp.vcFormat.space.afterComma": true,

  // A space is added between the keyword and opening parenthesis in control flow statements.
  "C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements": true,

  // Spaces around assignment operators.
  //  - insert: A space is added before the operator and also after it.
  //  - remove: Spaces before and after the operator are removed.
  //  - ignore: Spaces are left as entered.
  "C_Cpp.vcFormat.space.aroundAssignmentOperator": "insert",

  // Spaces around binary operators.
  //  - insert: A space is added before the operator and also after it.
  //  - remove: Spaces before and after the operator are removed.
  //  - ignore: Spaces are left as entered.
  "C_Cpp.vcFormat.space.aroundBinaryOperator": "insert",

  // Spaces around conditional operators.
  //  - insert: A space is added before the operator and also after it.
  //  - remove: Spaces before and after the operator are removed.
  //  - ignore: Spaces are left as entered.
  "C_Cpp.vcFormat.space.aroundTernaryOperator": "insert",

  // A space is added before the opening braces of scope blocks.
  "C_Cpp.vcFormat.space.beforeBlockOpenBrace": true,

  // A space is added before every comma.
  "C_Cpp.vcFormat.space.beforeComma": false,

  // A space is added before the colon in constructor definitions.
  "C_Cpp.vcFormat.space.beforeConstructorColon": true,

  // When square brackets are empty, a space is added before the opening bracket.
  "C_Cpp.vcFormat.space.beforeEmptySquareBrackets": false,

  // Spacing between function names and opening parentheses of argument lists.
  //  - insert: Add a space before the opening parenthesis of a function.
  //  - remove: Spaces before opening parenthesis of a function are removed.
  //  - ignore: Spaces are left as entered.
  "C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": "remove",

  // A space is added before the colon for inherited types in class definitions.
  "C_Cpp.vcFormat.space.beforeInheritanceColon": true,

  // A space is added before the opening brace of uniform initialization and initializer lists.
  "C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": false,

  // A space is added before the opening parenthesis of lambda argument lists.
  "C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": false,

  // A space is added before opening square brackets.
  "C_Cpp.vcFormat.space.beforeOpenSquareBracket": false,

  // When braces are empty and on the same line, a space is inserted between them.
  "C_Cpp.vcFormat.space.betweenEmptyBraces": false,

  // When square brackets are empty, a space is inserted between them.
  "C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": false,

  // When a function parameter list is empty, a space is inserted between its parentheses.
  "C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": false,

  // When square brackets are empty, a space is inserted between them.
  "C_Cpp.vcFormat.space.betweenEmptySquareBrackets": false,

  // For multi-dimensional arrays, all space between brackets is removed. Other settings that control space are overridden.
  "C_Cpp.vcFormat.space.groupSquareBrackets": true,

  // A space is inserted after every semicolon.
  "C_Cpp.vcFormat.space.insertAfterSemicolon": false,

  // Spaces around pointer and reference operators.
  //  - left: Pointer and reference operators are aligned to the left.
  //  - center: Pointer and reference operators are centered.
  //  - right: Pointer and reference operators are aligned to the right.
  //  - ignore: Pointer and reference operators are not formatted.
  "C_Cpp.vcFormat.space.pointerReferenceAlignment": "left",

  // Spaces around commas are preserved inside uniform initialization and initializer lists.
  "C_Cpp.vcFormat.space.preserveInInitializerList": true,

  // Spaces around member access operators, pointer-to-member operators, and scope resolution operators are removed.
  "C_Cpp.vcFormat.space.removeAroundMemberOperators": true,

  // Spaces between unary operators and operands are removed.
  "C_Cpp.vcFormat.space.removeAroundUnaryOperator": true,

  // Spaces are removed before every semicolon.
  "C_Cpp.vcFormat.space.removeBeforeSemicolon": true,

  // A space is added after the opening parenthesis and also before the closing parenthesis of a C-style cast.
  "C_Cpp.vcFormat.space.withinCastParentheses": false,

  // A space is added after the opening parenthesis and also before the closing parenthesis in control flow statements.
  "C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": false,

  // A space is added after the opening parenthesis and also before the closing parenthesis of a parenthesized expression.
  "C_Cpp.vcFormat.space.withinExpressionParentheses": false,

  // A space is added after the opening brace and also before the closing brace of uniform initialization and initializer lists.
  "C_Cpp.vcFormat.space.withinInitializerListBraces": true,

  // A space is added after the opening square bracket and also before the closing square bracket.
  "C_Cpp.vcFormat.space.withinLambdaBrackets": false,

  // A space is added after the opening parenthesis and also before the closing parenthesis in function parameter lists.
  "C_Cpp.vcFormat.space.withinParameterListParentheses": false,

  // A space is added after the opening square bracket and also before the closing square bracket.
  "C_Cpp.vcFormat.space.withinSquareBrackets": false,

  // Wrapping options for blocks.
  //  - oneLiners: A complete code block that is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
  //  - allOneLineScopes: Any code where the opening and closing brace is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
  //  - never: Code blocks are always formatted based on the values of the `C_Cpp.vcFormat.newLine.*` settings.
  "C_Cpp.vcFormat.wrap.preserveBlocks": "oneLiners",

  // Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.
  "C_Cpp.commentContinuationPatterns": ["/**"],

  // The string of characters used as the starting line of the Doxygen comment.
  "C_Cpp.doxygen.generatedStyle": "///",

  // Controls whether to automatically insert the Doxygen comment after typing the chosen comment style.
  "C_Cpp.doxygen.generateOnType": true,

  // Select the Doxygen section tags that you would like to appear on hover in the tooltip area when the 'Simplify Structured Comments' setting is enabled.
  "C_Cpp.doxygen.sectionTags": [
    "attention",
    "tparam",
    "param",
    "result",
    "returns",
    "retval",
    "exception",
    "deprecated",
    "warning",
    "note"
  ],

  // Select whether markdown will be available in the hover tooltip. By default, only a subset of markdown will be applied to comments in the hover tooltip.
  //  - subsetEnabled: Enable all markdown features in the hover tooltip except those that include the '_' and '*' characters.
  //  - enabled: Enable all markdown features in the hover tooltip.
  //  - disabled: Disable all markdown features in the hover tooltip.
  "C_Cpp.markdownInComments": "subsetEnabled",

  // If `true`, tooltips of hover and auto-complete will only display certain labels of structured comments. Otherwise, all comments are displayed.
  "C_Cpp.simplifyStructuredComments": true,

  // Additional command line arguments to pass to `clang-tidy`. These take precedence over the equivalent `C_Cpp.codeAnalysis.clangTidy.*` settings.
  "C_Cpp.codeAnalysis.clangTidy.args": [],

  // List of disabled `clang-tidy` checks. The values are appended to the `Checks` in a `.clang-tidy` file or `C_Cpp.codeAnalysis.clangTidy.config`, if any.
  "C_Cpp.codeAnalysis.clangTidy.checks.disabled": [],

  // List of enabled `clang-tidy` checks. The values are appended to the `Checks` in a `.clang-tidy` file or `C_Cpp.codeAnalysis.clangTidy.config`, if any. The default check `clang-analyzer-*` is always used unless it is explicitly disabled.
  "C_Cpp.codeAnalysis.clangTidy.checks.enabled": [],

  // If `true`, formatting will be run on the lines changed by 'Fix' code actions.
  "C_Cpp.codeAnalysis.clangTidy.codeAction.formatFixes": true,

  // Controls which 'Clear' code analysis problem code action options are available. Changing the setting to show more options may require re-running code analysis.
  //  - None: Show no 'Clear' code actions.
  //  - AllOnly: Show only the 'Clear all' code action (or 'Clear all <type>' if there is only one type or 'Clear this' if there is only one problem).
  //  - AllAndAllType: Show the 'Clear all' code action (if there are multiple problem types) and the 'Clear all <type>' code action (or 'Clear this' if there is only one problem for the <type>)
  //  - AllAndAllTypeAndThis: Show the 'Clear all' (if there are multiple problem types), 'Clear all <type>' (if there are multiple problems for the <type>), and 'Clear this' code actions
  "C_Cpp.codeAnalysis.clangTidy.codeAction.showClear": "AllAndAllTypeAndThis",

  // If `true`, the 'Disable' code action will be shown when available (the next time code analysis is run). When the 'Disable' code action is used, it adds the warning code to the `C_Cpp.codeAnalysis.clangTidy.checks.disabled` setting.
  "C_Cpp.codeAnalysis.clangTidy.codeAction.showDisable": true,

  // If `true`, the 'Show Documentation for' code action will be shown when available (the next time code analysis is run).
  "C_Cpp.codeAnalysis.clangTidy.codeAction.showDocumentation": true,

  // Specifies a `clang-tidy` configuration in YAML/JSON format: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{key: x, value: y}]}`. When the value is empty, `clang-tidy` will attempt to find a file named `.clang-tidy` for each source file in its parent directories.
  "C_Cpp.codeAnalysis.clangTidy.config": "",

  // If `true`, code analysis using `clang-tidy` will be enabled and will run after a file is opened or saved if `C_Cpp.codeAnalysis.runAutomatically` is `true` (the default).
  "C_Cpp.codeAnalysis.clangTidy.enabled": false,

  // Specifies a `clang-tidy` configuration in YAML/JSON format to be used as a fallback when `C_Cpp.codeAnalysis.clangTidy.config` is not set and no `.clang-tidy` file is found: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{key: x, value: y}]}`.
  "C_Cpp.codeAnalysis.clangTidy.fallbackConfig": "",

  // A POSIX extended regular expression (ERE) matching the names of the headers to output diagnostics from. Diagnostics from the main file of each translation unit are always displayed. The `${workspaceFolder}` variable is supported (and is used as the default fallback value if no `.clang-tidy` file exists). If this option is not `null` (empty), it overrides the `HeaderFilterRegex` option in a `.clang-tidy` file, if any.
  "C_Cpp.codeAnalysis.clangTidy.headerFilter": null,

  // The full path of the `clang-tidy` executable. If not specified, and `clang-tidy` is available in the environment path, that is used. If not found in the environment path, the `clang-tidy` bundled with the extension will be used.
  "C_Cpp.codeAnalysis.clangTidy.path": "",

  // If `true` and `compileCommands` is set, the `-p=<build-path>` argument is passed to `clang-tidy` instead of build arguments being passed after `--`. This may not work if environment variables aren't set so that system includes can be found.
  "C_Cpp.codeAnalysis.clangTidy.useBuildPath": false,

  // Configure glob patterns for excluding folders and files for code analysis. Files not under the workspace folder are always excluded. Inherits values from `files.exclude#` and `#C_Cpp.files.exclude`. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
  "C_Cpp.codeAnalysis.exclude": {},

  // The maximum number of concurrent threads to use for code analysis. The default of `null` (empty) uses half the value inherited from `C_Cpp.maxConcurrentThreads`.
  "C_Cpp.codeAnalysis.maxConcurrentThreads": null,

  // Fewer code analysis processes will run concurrently after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
  "C_Cpp.codeAnalysis.maxMemory": null,

  // If `true`, code analysis will run automatically on a file after it is opened or saved.
  "C_Cpp.codeAnalysis.runAutomatically": true,

  // Controls the delay in milliseconds before code analysis starts processing after a save is triggered from an edit when `files.autoSave#` is `afterDelay` and `#C_Cpp.codeAnalysis.runAutomatically` is `true`.
  "C_Cpp.codeAnalysis.updateDelay": 2000,

  // If `true`, debugger shell command substitution will use obsolete backtick ``(`)``.
  "C_Cpp.debugger.useBacktickCommandSubstitution": false,

  // Show the "Run and Debug" play button and "Add Debug Configuration" gear in the editor title bar for C++ files.
  "C_Cpp.debugShortcut": true,

  // Controls whether the SSH Targets view is visible. By default, enable the view when an SSH command is invoked.
  "C_Cpp.sshTargetsView": "default",

  // The maximum number of IntelliSense processes to keep running. The default of `null` (empty) uses value inherited from `C_Cpp.maxCachedProcesses`.
  "C_Cpp.intelliSense.maxCachedProcesses": null,

  // Older IntelliSense processes will shut down before new processes are created after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
  "C_Cpp.intelliSense.maxMemory": null,

  // Defines the folder path for cached precompiled headers used by IntelliSense. The default cache path is `%LocalAppData%/Microsoft/vscode-cpptools` on Windows, `$XDG_CACHE_HOME/vscode-cpptools/` on Linux (or `$HOME/.cache/vscode-cpptools/` if `XDG_CACHE_HOME` is not defined), and `$HOME/Library/Caches/vscode-cpptools/` on macOS. The default path will be used if no path is specified or if a specified path is invalid.
  "C_Cpp.intelliSenseCachePath": "",

  // Maximum size of the per-workspace hard drive space in megabytes (MB) for cached precompiled headers; the actual usage may fluctuate around this value. The default size is `5120` MB. Precompiled header caching is disabled when the size is `0`.
  "C_Cpp.intelliSenseCacheSize": 5120,

  // Memory usage limit in megabytes (MB) of an IntelliSense process. The default is `4096` and the maximum is `16384`. The extension will shutdown and restart an IntelliSense process when it exceeds the limit.
  "C_Cpp.intelliSenseMemoryLimit": 4096,

  // The maximum number of cached processes to use for language service processing. The default of `null` (empty) uses twice the number of logical processors available.
  "C_Cpp.maxCachedProcesses": null,

  // The maximum number of concurrent threads to use for language service processing. The value is a hint and may not always be used. The default of `null` (empty) uses the number of logical processors available.
  "C_Cpp.maxConcurrentThreads": null,

  // The maximum memory (in MB) available for language service processing. Fewer processes will be cached and run concurrently after this memory usage is exceeded. The default of `null` (empty) uses the system's free memory.
  "C_Cpp.maxMemory": null,

  // The maximum number of results to show for 'Go to Symbol in Workspace'. The default is `5000`.
  "C_Cpp.maxSymbolSearchResults": 5000,

  // The maximum number of processes to keep in memory for 'Find All References' and 'Rename'. The default of `0` disables this feature. The value of `null` (empty) uses the value inherited from `C_Cpp.maxCachedProcesses`.
  "C_Cpp.references.maxCachedProcesses": 0,

  // The maximum number of concurrent threads to use for 'Find All References' and 'Rename'. The default of `null` (empty) uses the value inherited from `C_Cpp.maxConcurrentThreads`.
  "C_Cpp.references.maxConcurrentThreads": null,

  // Fewer 'Find All References' and 'Rename' processes will be cached and run concurrently after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
  "C_Cpp.references.maxMemory": null,

  // Add include paths from `nan` and `node-addon-api` when they are dependencies.
  "C_Cpp.addNodeAddonIncludePaths": false,

  // Controls whether files are automatically added to `files.associations` when they are the target of a navigation operation from a C/C++ file.
  "C_Cpp.autoAddFileAssociations": true,

  // If set to `default`, the file system of the workspace is assumed to be case insensitive on Windows and case sensitive on macOS or Linux. If set to `enabled`, the file system of the workspace is assumed to be case sensitive on Windows.
  "C_Cpp.caseSensitiveFileSupport": "default",

  // Controls whether "experimental" features are usable.
  "C_Cpp.experimentalFeatures": "disabled",

  // The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: `None` < `Error` < `Warning` < `Information` < `Debug`.
  "C_Cpp.loggingLevel": "Error",

  // The character used as a path separator for `#include` auto-completion results.
  "C_Cpp.preferredPathSeparator": "Forward Slash",

  // This setting is deprecated. Pre-release extensions are now available via the Marketplace.
  // Set to `Insiders` to automatically download and install the latest Insiders builds of the extension, which include upcoming features and bug fixes.
  "C_Cpp.updateChannel": "Default",

  // Enable integration services for the [vcpkg dependency manager](https://aka.ms/vcpkg/).
  "C_Cpp.vcpkg.enabled": true,

  // Controls if plugin is enabled
  "color-highlight.enable": true,

  // An array of language ids which should be highlighted by Color Highlight with the rgbWithNoFunction pattern. "*" to trigger on any language; Prepend language id with "!" to exclude the language (i.e "!typescript", "!javascript")
  "color-highlight.hslWithNoFunctionLanguages": ["*"],

  // An array of language ids which should be highlighted by Color Highlight. "*" to trigger on any language; Prepend language id with "!" to exclude the language (i.e "!typescript", "!javascript")
  "color-highlight.languages": ["*"],

  // Style of the highlight. Can be 'dot-before', 'dot-after', 'foreground', 'background', 'outline', 'underline'
  "color-highlight.markerType": "background",

  // Highlight colors on the ruler (scroll bar), true/false
  "color-highlight.markRuler": true,

  // Highlight hsl without functions like hsl() ('255, 100%, 80%', [255, 100%, 80%], '255 100% 80%', etc.)
  "color-highlight.matchHslWithNoFunction": false,

  // Highlight rgb without functions like rgb() ('255, 255, 255', [255, 255, 255], '255 255 255', etc.)
  "color-highlight.matchRgbWithNoFunction": false,

  // Highlight color words in all files (grey, green, etc.)
  "color-highlight.matchWords": false,

  // An array of language ids which should be highlighted by Color Highlight with the rgbWithNoFunction pattern. "*" to trigger on any language; Prepend language id with "!" to exclude the language (i.e "!typescript", "!javascript")
  "color-highlight.rgbWithNoFunctionLanguages": ["*"],

  // Array of absolute paths to search while perform file lookups.
  "color-highlight.sass.includePaths": [],

  // Highlight HEX values using ARGB instead of RGBA (default)
  "color-highlight.useARGB": false,

  // Path to custom docstring template (overrides docstringFormat). Path can be absolute or relative to the project root.
  "autoDocstring.customTemplatePath": "",

  // Which docstring format to use.
  "autoDocstring.docstringFormat": "google",

  // Generate docstring on pressing enter after opening a docstring (use quoteStyle)
  "autoDocstring.generateDocstringOnEnter": true,

  // Guess the type of parameters and return values
  "autoDocstring.guessTypes": true,

  // Include [extended_summary] tag
  "autoDocstring.includeExtendedSummary": false,

  // Include function names at the start of docstrings
  "autoDocstring.includeName": false,

  // Output log information
  "autoDocstring.logLevel": "Info",

  // Style of quote used with generate docstring command
  "autoDocstring.quoteStyle": "\"\"\"",

  // Start docstring on new line
  "autoDocstring.startOnNewLine": false,

  // Select an icon pack that enables specific icons.
  //  - angular: Icons for Angular.
  //  - angular_ngrx: Icons for Angular and ngrx.
  //  - react: Icons for React.
  //  - react_redux: Icons for React and Redux.
  //  - qwik: Icons for Qwik.
  //  - vue: Icons for Vue.
  //  - vue_vuex: Icons for Vue and Vuex.
  //  - nest: Icons for NestJS.
  //  - none: No icon pack enabled.
  "material-icon-theme.activeIconPack": "angular",

  // Set custom file icon associations.
  "material-icon-theme.files.associations": {},

  // Change the color of the file icons.
  "material-icon-theme.files.color": "#90a4ae",

  // Clone any existing icon and create a new one with custom colors and associations
  "material-icon-theme.files.customClones": [],

  // Set custom folder icon associations.
  "material-icon-theme.folders.associations": {},

  // Change the color of the folder icons.
  "material-icon-theme.folders.color": "#90a4ae",

  // Clone any existing icon and create a new one with custom colors and associations
  "material-icon-theme.folders.customClones": [],

  // Set the type for the folder icons.
  //  - specific: Select specific folder icons.
  //  - classic: Select classic folder icons.
  //  - none: No folder icons.
  "material-icon-theme.folders.theme": "specific",

  // Hide explorer arrows before folder.
  "material-icon-theme.hidesExplorerArrows": false,

  // Set custom language icon associations.
  "material-icon-theme.languages.associations": {},

  // Change the opacity of the icons.
  "material-icon-theme.opacity": 1,

  // Change the saturation of the icons.
  "material-icon-theme.saturation": 1,

  // The default option for Active Environment selection is `Save To File`. The `Save To Local Memory` option will save the changes to the `Active Environment` in local memory
  "thunder-client.activeEnvironmentSelection": "Save To File",

  // Auto Run `cURL` request after import. If disabled, the `cURL` request will not be executed after import
  "thunder-client.autoRunCurl": false,

  // List of ssl certificates for hosts
  "thunder-client.certificates": [],

  // Automatically send `Content-Type` header when body is sent in request, If disabled, the `Content-Type` header will not be sent
  "thunder-client.contentType": true,

  // [[Subscription required](https://www.thunderclient.com/pricing)] Enter full folder path to store requests data, `Suitable for storing all requests data in one fixed location`. Also supports home folder `$HOME/path`. for more details [visit here](https://docs.thunderclient.com/team)
  "thunder-client.customLocation": "",

  // Please enter Http Methods separated by comma e.g: `search,subscribe`. Close and Re-open Review View to see changes.
  "thunder-client.customMethods": "",

  // Provide values for Default Headers for the Request
  "thunder-client.defaultHeaders": [
    {
      "name": "Accept",
      "value": "*/*"
    },
    {
      "name": "User-Agent",
      "value": "Thunder Client (https://www.thunderclient.com)"
    }
  ],

  // Please provide Default URL of the Request
  "thunder-client.defaultURL": "",

  // Thunder Client editor font size
  //  - Use 0 to use default font size.
  //  - Use any other value to set custom font size.
  "thunder-client.editorFontSize": 0,

  // Thunder Client Request Body Editor environment variables highlight.
  "thunder-client.editorVariableHighlight": true,

  // Comma separated Host names to exclude from proxy e.g: `abc.com,xyz.com`
  "thunder-client.excludeProxyHostList": "",

  // Follow Redirects when running Requests
  "thunder-client.followRedirects": true,

  // The HTML Report Response Display Limit is in KB. The default is `100KB`. If set to `0KB`, the response will not be included in the report. If set to `-1`, responses will only be saved for `failed` requests.
  "thunder-client.htmlReportResponseLimit": 100,

  // The http library to use to send API requests.
  "thunder-client.httpLibrary": "got",

  // Http Version for making the request, default is HTTP/1.1
  "thunder-client.httpVersion": "HTTP/1.1",

  // Thunder Client UI Editors JSON format indentation, select 2 or 4 spaces, default is `2 spaces`
  "thunder-client.indentSize": 2,

  // Indent Size for JSON files generated by Thunder Client, default is `4 spaces`
  "thunder-client.jsonFileIndentSize": 4,

  // [[Subscription required](https://www.thunderclient.com/pricing)] Mutile root workspace name to use to save requests data. This value is automatically set by the extension when you open `project.code-workspace` file.
  "thunder-client.multiRootWorkspaceName": "",

  // Preview features can be tested by enabling this option.
  "thunder-client.previewFeatures": false,

  // Select the request view layout for `request/response` sections. Please `close` request tab and `re-open` to apply new layout
  "thunder-client.requestLayout": "Left/Right",

  // Request Timeout in milliseconds, 0 means no timeout
  "thunder-client.requestTimeout": 0,

  // Response Display Limit in MB, Default is 2MB
  "thunder-client.responseLimit": 2,

  // Restore last opened tabs on vscode reload (only applies to request views).
  "thunder-client.restoreTabs": false,

  // `Save Request` when Send button is clicked in Collections. If disabled, the request will be sent without saving. Use shortcut `ctrl/cmd + s` to save the request explicitly
  "thunder-client.saveRequestOnSend": true,

  // Save OAuth 2 token based on environment, So this will allow to save `different access tokens` for `dev & prod` environments
  "thunder-client.saveTokenPerEnvironment": false,

  // [[Subscription required](https://www.thunderclient.com/pricing)] Requests data will be saved and loaded automatically from current workspace folder, `Suitable for Teams with multiple projects`. The tests folder `thunder-tests` will be created at the root. for more details [visit here](https://docs.thunderclient.com/team)
  "thunder-client.saveToWorkspace": false,

  // Sidebar default active tab, default is `Activity`
  "thunder-client.sidebar.defaultTab": "Activity",

  // The default sidebar layout is `standard`. The `compact` layout will hide the request date section in `sidebar`
  "thunder-client.sidebar.layout": "standard",

  // Show Requests executed from collection in `Activity Tab`
  "thunder-client.sidebar.showActivityFromCollection": false,

  // Sidebar Collections tree indentation, `select 0` for default padding, `select 5 or 10` to add extra 5px or 10px padding
  "thunder-client.sidebar.treeIndentation": 0,

  // Please provide `Test Value` column width in `percentage`, The value should be between `10 to 50`. The default value is `30`
  "thunder-client.testValueColumnWidth": 30,

  // [[Subscription required](https://www.thunderclient.com/pricing)] Relative path to the current workspace folder, where you like to save tests data, `Save To Workspace` setting needs to be enabled first. The tests folder `thunder-tests` will be created here. for more details [visit here](https://docs.thunderclient.com/team)
  "thunder-client.workspaceRelativePath": "",

  // Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
  //
  //  Examples :
  // chrome --incognito --headless --remote-debugging-port=9222
  //  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
  "liveServer.settings.AdvanceCustomBrowserCmdLine": null,

  // Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
  //  NOTE: You have to install 'Debugger for Chrome'
  // If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging.
  //
  //  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
  "liveServer.settings.ChromeDebuggingAttachment": false,

  // Specify custom browser settings for Live Server.
  // By Default it will open your default favorite browser.
  "liveServer.settings.CustomBrowser": null,

  // To disable information pop up messages.
  "liveServer.settings.donotShowInfoMsg": false,

  // To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
  "liveServer.settings.donotVerifyTags": false,

  // When set, serve this file (server root relative) for every 404 (useful for single-page applications)
  "liveServer.settings.file": "",

  // By Default Live Server inject CSS changes without full reloading of browser. You can change this behavior by making this setting as `true`
  "liveServer.settings.fullReload": false,

  // To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
  "liveServer.settings.host": "127.0.0.1",

  // Setup https configuration
  "liveServer.settings.https": {
    "enable": false,
    "cert": "",
    "key": "",
    "passphrase": ""
  },

  // To ignore specific file changes
  "liveServer.settings.ignoreFiles": [".vscode/**", "**/*.scss", "**/*.sass", "**/*.ts"],

  // Mount a directory to a route. Such as [['/components', './node_modules']]
  "liveServer.settings.mount": [],

  // This the entry point of server when you're in multiroot workspace
  "liveServer.settings.multiRootWorkspaceName": null,

  // If it is true live server will start without browser opened.
  "liveServer.settings.NoBrowser": false,

  // Set Custom Port Number of Live Server. Set 0 if you want random port.
  "liveServer.settings.port": 5500,

  // To Setup Proxy
  "liveServer.settings.proxy": {
    "enable": false,
    "baseUri": "/",
    "proxyUri": "http://127.0.0.1:80"
  },

  // Set Custom root of Live Server.
  // To change root the the server to sub folder of workspace, use '/' and relative path from workspace.
  // Example: /subfolder1/subfolder2
  "liveServer.settings.root": "/",

  // Change this to false if you don't want the button to show in the statusbar
  "liveServer.settings.showOnStatusbar": true,

  // Use local IP as host
  "liveServer.settings.useLocalIp": false,

  // You have to install a browser extension. That will be works for your dynamic pages (like PHP).
  "liveServer.settings.useWebExt": false,

  // Delay before live reloading. Value in milliseconds. Default is 100
  "liveServer.settings.wait": 100,

  // Your custom images.
  //
  // Example:
  //
  // `https://a.com/b.png`
  //
  // `file:///a/b.jpg`
  "background.customImages": [],

  // Plugin background enabled.
  "background.enabled": true,

  // Feature - fullscreen, may overwrite other config
  "background.fullscreen": {
    "images": [],
    "opacity": 0.91,
    "size": "cover",
    "position": "center",
    "interval": 0
  },

  // Seconds of interval for carousel, default `0` to disabled
  "background.interval": 0,

  // Custom common style.
  "background.style": {
    "background-position": "100% 100%",
    "background-size": "auto",
    "opacity": 1
  },

  // Each style of backgrounds.
  "background.styles": [{}, {}, {}],

  // If use front image,which means image is placed on the top of your code.
  "background.useFront": true,

  // Defines scopes for extension to work with.
  // multi-root: all selectors found within all root folders will be visible to all stylesheets.
  // workspace: all selectors found within particular workspace folder/project will be visible to stylesheets within that workspace folder.
  // linked files: selectors will be provided only for linked stylesheets.
  // Default: "multi-root"
  "html-to-css-autocompletion.autocompletionFilesScope": "multi-root",

  // Set custom glob pattern to exclude search on pattern matches. E.g.: **/{folderName1,folderName2,...}/**
  "html-to-css-autocompletion.excludePattern": "",

  // Defines folder names to be excluded from being searched. Default: ["node_modules"]
  "html-to-css-autocompletion.folderNamesToBeExcluded": ["node_modules"],

  // Defines only specific folder names to be searched. Default: [""]
  "html-to-css-autocompletion.folderNamesToBeIncluded": [""],

  // Defines file types to be searched for classes/ids.
  // Defaults: ["html", "php"]
  "html-to-css-autocompletion.getSelectorsFromFileTypes": ["html", "php"],

  // Set custom glob pattern to get classes/ids from matched files. E.g.: **/{folderName1,folderName2,...}/*.{fileType1,fileType2,...}
  "html-to-css-autocompletion.includePattern": "",

  // Set true to populate Intellisense with selectors only when '#' or '.' characters are typed. Default: false
  "html-to-css-autocompletion.triggerCharacters": false,

  // Custom empty elements in addition to the default HTML empty elements
  "highlight-matching-tag.customEmptyElements": null,

  // Enables the highlighting and status bar
  "highlight-matching-tag.enabled": true,

  // Whether to highlight matching tag from the tag attributes
  "highlight-matching-tag.highlightFromAttributes": true,

  // Whether to highlight matching tag from inside the tag content
  "highlight-matching-tag.highlightFromContent": false,

  // Whether to highlight matching tag from the tag name
  "highlight-matching-tag.highlightFromName": true,

  // Should self-closing tags be highlighted
  "highlight-matching-tag.highlightSelfClosing": false,

  // Don't use default HTML empty elements
  "highlight-matching-tag.noDefaultEmptyElements": false,

  // Enables showing tag's path in status bar
  "highlight-matching-tag.showPath": true,

  // Enables showing highlighted tag pair in ruler section
  "highlight-matching-tag.showRuler": true,

  // Decorations for opening and closing tags
  "highlight-matching-tag.styles": null,

  // Logging level for console
  "intellicodeApiExamples.loggingLevel": "INFO",

  // Enable API Usage Examples for Python files
  "intellicodeApiExamples.python.enabled": true,

  // Enable API Usage Examples for Typescript/Javascript files
  "intellicodeApiExamples.typescript.enabled": true,

  // Enable Visual Studio IntelliCode completions for Java
  "vsintellicode.java.completionsEnabled": true,

  // Control whether Visual Studio IntelliCode will modify `editor.suggestSelection` if it is set to a value (`recentlyUsed`) that will result in IntelliCode suggested completion items not being visible.
  //  - enabled: Allows IntelliCode to modify the editor.suggestSelection setting on your behalf.
  //  - disabled: You've explicitly opted out of having this configuration controlled by IntelliCode.
  //  - automaticallyOverrodeDefaultValue: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that configuration has been automatically modified to override a default value.
  //  - choseToUpdateConfiguration: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that you've chosen to let IntelliCode change the configuration from a value that was explicitly set.
  "vsintellicode.modify.editor.suggestSelection": "enabled",

  // Enable Visual Studio IntelliCode completions for Python
  "vsintellicode.python.completionsEnabled": true,

  // Enable Visual Studio IntelliCode completions for MSSQL
  "vsintellicode.sql.completionsEnabled": true,

  // Enable Visual Studio IntelliCode completions for TypeScript and JavaScript
  "vsintellicode.typescript.completionsEnabled": true,

  // The path to a PHP executable.
  "php.debug.executablePath": null,

  // A unique key that allows the proxy to match requests to your editor. Only used when proxy configuration includes replacement.
  "php.debug.ideKey": "vsc",

  // Controls whether all keybindings are disabled
  "terminalAllInOne.disableAllKeybindings": false,

  // Controls whether all messages (info, warning, and error) from this extension are disabled
  "terminalAllInOne.disableAllMessages": false,

  // Controls which messages should be shown if `terminalAllInOne.disableAllMessages` is set to false
  "terminalAllInOne.messages": {
    "shouldShowThemeQuickPickMessage": true,
    "shouldShowSelectedThemeMessage": true,
    "shouldShowFontSizeQuickPickMessage": true,
    "shouldShowSelectedFontSizeMessage": true,
    "shouldShowFontWeightQuickPickMessage": true,
    "shouldShowSelectedFontWeightMessage": true,
    "shouldShowCursorWidthQuickPickMessage": true,
    "shouldShowSelectedCursorWidthMessage": true,
    "shouldShowCursorStyleQuickPickMessage": true,
    "shouldShowSelectedCursorStyleMessage": true,
    "shouldShowBlinkingCursorToggledMessage": true,
    "shouldShowDisableScriptDescriptionMessage": true
  },

  // Controls whether the script description command is disabled when running a script
  "terminalAllInOne.script.disableDescription": false,

  // An array of scripts
  "terminalAllInOne.scripts": [],

  // A Terminal Theme from [this list](https://glitchbone.github.io/vscode-base16-term/#/)
  "terminalAllInOne.terminalTheme": "None",

  // Traces the communication between VSCode and the intellisense language server.
  "php-intellisense.trace.server": "off",

  // The path to a PHP 7+ executable.
  "php.executablePath": null,

  // Configure glob patterns for excluding files and folders from initial indexing. Paths are relative to root folder.
  "php.files.exclude": [],

  // The memory limit of the php language server. [Number][K|M|G]. Use '-1' to allow unlimited use of the RAM (default is 4G).
  "php.memoryLimit": "4095M"
}
